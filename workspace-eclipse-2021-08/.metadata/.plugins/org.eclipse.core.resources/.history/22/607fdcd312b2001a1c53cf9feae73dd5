package egovframework.mng.menu.web;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import egovframework.com.cmmn.EgovMessageSource;
import egovframework.com.cmmn.LoginVO;
import egovframework.mng.menu.service.MenuService;
import egovframework.mng.menu.vo.MenuVO;
import egovframework.rte.psl.dataaccess.util.EgovMap;

@Controller
@RequestMapping(value = "/menu")
public class MenuTmplController {

  @Resource(name = "egovMessageSource")
  EgovMessageSource egovMessageSource;

  @Resource(name = "menuService")
  private MenuService menuService;

  public static final int KEY_SIZE = 1024;

  Logger logger = LoggerFactory.getLogger(this.getClass());

  /**
   * 메뉴 상단 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/header"
   * @exception Exception
   */
  @RequestMapping(value = "/header.do")
  public String header(@ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request)
      throws Exception {
    logger.debug(
        "\n\t HEADER PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    logger.info(vo.getUpperMenuCode());
    logger.info("현재 접근한 메뉴 : {}", vo.getMenuCode());
    // 로그인 사용자 권한 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    
    // 로그인 사용자 권한 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    // 메뉴 조회 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // header menu original logic
    // List<MenuVO> gnbMenu = null;
    // if (vo.getMenuCode().length() == 0) {
    // vo.setUpperMenuCode("MNU00001");
    // } else {
    // vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
    // }
    // gnbMenu = menuService.getGnbSelectMenu(vo);

    // menulist session 저장 테스트.
    List<MenuVO> gnbMenu = loginVO.getMenuList();
    List<EgovMap> accessableMenuList = loginVO.getAccessableMenuList();

    if (gnbMenu == null || gnbMenu.isEmpty() || gnbMenu.size() == 0) {
      logger.info(">>>>>>>>>>> 메뉴 없음 <<<<<<<<<<<");
      if (vo.getMenuCode().length() == 0) {
        vo.setUpperMenuCode("MNU00001");
      } else {
        vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
      }
      gnbMenu = menuService.getGnbSelectMenu(vo);
      loginVO.setMenuList(gnbMenu);
      session.setAttribute("loginVO", loginVO);
      accessableMenuList =
          menuService.accessAuthListToMenuByAccount(loginVO.getUserId());
      loginVO.setAccessableMenuList(accessableMenuList);
    } else {
      logger.info(">>>>>>>>>>> 메뉴 있음 <<<<<<<<<<<");
    }
    // logger.info("menus
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    // for( MenuVO menu : gnbMenu ) {
    // logger.info(menu.toString());
    // }
    // logger.info("menus
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");

    /*
     * if(gnbMenu.size() > 0) { String leaf = "1"; for(int i=0; i<gnbMenu.size(); i++) {
     * if(gnbMenu.get(i).getLeaf().equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+1).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+1).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); } } } } }
     */
    model.addAttribute("gnbMenu", gnbMenu);
    // 메뉴 조회 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    //  접근 메뉴의  CRUD 권한 조회
    logger.info(loginVO.toString());
    try {
//      accessableMenuList
      EgovMap accessAuth = null;
      
      for( EgovMap auth : accessableMenuList ) {
        if( auth.get("menuCode").equals(vo.getMenuCode()) ) accessAuth = auth;
      }
      
      if( accessAuth != null ) {
        logger.info("accessAuth : {}", accessAuth.toString());
        model.addAttribute("readable", (String) accessAuth.get("rollRead"));
        model.addAttribute("createable", (String) accessAuth.get("rollCreate"));
        model.addAttribute("updateable", (String) accessAuth.get("rollUpdate"));
        model.addAttribute("deleteable", (String) accessAuth.get("rollDelete"));
      }
    } catch (Exception e ) {
      logger.error( e.getMessage());
      logger.error( e.getCause() + "");
      e.printStackTrace();
    }


    // RSA MODULE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
    generator.initialize(KEY_SIZE);

    KeyPair keyPair = generator.genKeyPair();
    KeyFactory keyFactory = KeyFactory.getInstance("RSA");

    PublicKey publicKey = keyPair.getPublic();
    PrivateKey privateKey = keyPair.getPrivate();

    // 세션에 공개키의 문자열을 키로하여 개인키를 저장한다.
    session.setAttribute("__rsaPrivateKey__", privateKey);

    // 공개키를 문자열로 변환하여 JavaScript RSA 라이브러리 넘겨준다.
    RSAPublicKeySpec publicSpec =
        (RSAPublicKeySpec) keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);

    String publicKeyModulus = publicSpec.getModulus().toString(16);
    String publicKeyExponent = publicSpec.getPublicExponent().toString(16);
    // logger.debug("----------------------------");
    // logger.debug("publicKeyModulus : " + publicKeyModulus);
    // logger.debug("publicKeyExponent : " + publicKeyExponent);
    // logger.debug("----------------------------");

    model.addAttribute("publicKeyModulus", publicKeyModulus);
    model.addAttribute("publicKeyExponent", publicKeyExponent);
    session.setAttribute("publicKeyModulus", publicKeyModulus);
    session.setAttribute("publicKeyExponent", publicKeyExponent);

    // RSA MODULE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    logger.debug(
        "\n\t HEADER PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/header";
  }

  /**
   * 메뉴 좌측 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/left"
   * @exception Exception
   */
  @RequestMapping(value = "/left.do")
  public String left(@ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request)
      throws Exception {
    logger.debug(
        "\n\t LEFT NAVIGATOR PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    // 로그인 사용자 권한
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    MenuVO menu = new MenuVO();
    String menuCode = vo.getMenuCode();

    // 메뉴 조회
    if (vo.getMenuCode().length() == 0) {
      vo.setMenuCode("MNU00002");
    }

    List<MenuVO> menuOn = menuService.menuOn(vo);
    if (menuOn.size() > 0) {
      menuCode = menuOn.get(0).getMenuCode();
      menu.setMenuCode(menuCode);
      menu.setAuthorGroupCode(vo.getAuthorGroupCode());

      if (menuOn.size() > 1) {
        model.addAttribute("menuCode", menuOn.get(1).getMenuCode());
        for (int i = 2; i < menuOn.size(); i++) {
          model.addAttribute("menuOn" + (i - 1), menuOn.get(i).getMenuCode());
        }
      }

      List<MenuVO> subMenu = menuService.getSubSelectMenu(menu);
      /*
       * if(subMenu.size() > 0) { for(int i=0;i<subMenu.size();i++) { MenuVO m =
       * (MenuVO)subMenu.get(i); if(m.getLeaf().equals("0")) { MenuVO _vo = new MenuVO();
       * _vo.setMenuCode(m.getMenuCode()); _vo.setAuthorGroupCode(vo.getAuthorGroupCode());
       * List<MenuVO> _subMenu = menuService.getSubSelectMenu(_vo); if(_subMenu.size() > 0) {
       * m.setMenuUrl(_subMenu.get(0).getMenuUrl());
       * m.setMenuCodeSub(_subMenu.get(0).getMenuCode());
       * if(m.getMenuCode().equals(m.getMenuCodeSub())) {
       * m.setMenuUrl(_subMenu.get(1).getMenuUrl());
       * m.setMenuCodeSub(_subMenu.get(1).getMenuCode()); }
       * 
       * _vo.setMenuCode(m.getMenuCodeSub()); List<MenuVO> __subMenu =
       * menuService.getSubSelectMenu(_vo); if(__subMenu.size() > 0) {
       * if(__subMenu.get(0).getLeaf().equals("0")) { m.setMenuUrl(__subMenu.get(1).getMenuUrl());
       * m.setMenuCodeSub(__subMenu.get(1).getMenuCode()); } } } } subMenu.set(i, m); } }
       */
      model.addAttribute("subMenu", subMenu);
    }

    model.addAttribute("menuOn", menuOn);

    logger.debug(
        "\n\t LEFT NAVIGATOR PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/left";
  }

  /**
   * 메뉴 좌측 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/left"
   * @exception Exception
   */
  @RequestMapping(value = "/location.do")
  public String location(@ModelAttribute("vo") MenuVO vo, ModelMap model,
      HttpServletRequest request) throws Exception {

    logger.debug(
        "\n\t LOCATION PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    // 로그인 사용자 권한
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    MenuVO menu = new MenuVO();
    String menuCode = vo.getMenuCode();
    String menuLocation = "";
    String menuName = "";

    // 메뉴 조회
    if (vo.getMenuCode().length() == 0) {
      vo.setMenuCode("MNU00002");
    }

    List<MenuVO> menuOn = menuService.menuOn(vo);
    if (menuOn.size() > 0) {
      menuCode = menuOn.get(0).getMenuCode();
      menu.setMenuCode(menuCode);
      menu.setAuthorGroupCode(vo.getAuthorGroupCode());
      // 메뉴 title, location
      for (int i = 0; i < menuOn.size(); i++) {
        if (i == menuOn.size() - 1) {
          menuLocation += menuOn.get(i).getMenuNm();
          menuName = menuOn.get(i).getMenuNm();
        } else {
          menuLocation += menuOn.get(i).getMenuNm() + " &gt; ";
        }
      }
    }

    model.addAttribute("menuName", menuName);
    model.addAttribute("menuLocation", menuLocation);

    logger.debug(
        "\n\t LOCATION PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/location";
  }
}

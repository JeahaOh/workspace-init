/**
  * @Description : 공통 유틸성 함수 JS
  * @Modification Information
  * @
  * @   수정일       수정자               수정내용
  * @  -------      --------    ---------------------------
  * @ 2018.05.30     hjh               최초작성
  *
  */
var isTest = (location.host.indexOf('localhost') > -1 || location.host.indexOf('192.168.') > -1);
var CmmnUtil = {excelFunc:null};

/**********************************************************************************************************************/
/** 윈도우팝업 관련 Util **********************************************************************************************/
/**********************************************************************************************************************/

this.opnWinObj;
this.otherParameters = new Object();
this.callbackMethod = null;
this.getDialogArgumentsInner = function() {
  return otherParameters;
};
this.getCallbackMethod = function() {
  return callbackMethod;
};

/**
 * Window PopUp
 * 
 * @param url
 *            URL
 * @param args
 *            파라미터
 * @param callback
 *            콜백함수
 * @param modal
 *            모달여부(default false)
 * @param name
 *            PopUp 명
 * @param resizable
 *            (PopUp 옵션)
 * @param scrollbar
 *            (PopUp 옵션)
 * @param width
 *            (PopUp 옵션)
 * @param height
 *            (PopUp 옵션)
 */
CmmnUtil.openWin = function(paramObj) {
  console.group('CmmnUtil.openWin');
  if( isTest ) console.log( paramObj );
  var pUrl = CmmnUtil.getObjVal(paramObj, "url", "");
  var pArgs = CmmnUtil.getObjVal(paramObj, "args", "");
  var pCallback = CmmnUtil.getObjVal(paramObj, "callback", null);
  var pName = CmmnUtil.getObjVal(paramObj, "name", "");
  var pResizable = CmmnUtil.getObjVal(paramObj, "resizable", "no");
  var pScrollbar = CmmnUtil.getObjVal(paramObj, "scrollbar", "no");
  var pWidth = CmmnUtil.getObjVal(paramObj, "width", "200");
  var pHeight = CmmnUtil.getObjVal(paramObj, "height", "200");
  var pTop = Math.round((window.outerHeight - pHeight) / 2 + window.screenTop);
  var pLeft = Math.round((window.outerWidth - pWidth) / 2 + window.screenLeft);
  
  if( isTest ) {
	  console.info("TEST SERVER LOG");
	  console.info( "pUrl : " + JSON.stringify(pUrl));
	  console.info( "pArgs : " + JSON.stringify(pArgs));
	  console.info( "pCallback : " + JSON.stringify(pCallback));
	  console.info( "pName : " + JSON.stringify(pName));
	  console.info( "pResizable : " + JSON.stringify(pResizable));
	  console.info( "pScrollbar : " + JSON.stringify(pScrollbar));
	  console.info( "pWidth : " + JSON.stringify(pWidth));
	  console.info( "pHeight : " + JSON.stringify(pHeight));
	  console.info( "pTop : " + JSON.stringify(pTop));
	  console.info( "pLeft : " + JSON.stringify(pLeft));
  }
  
  
  if (pCallback != null) {
    window.callbackMethod = pCallback;
  } else {
    window.callbackMethod = null;
  }
  var options = "titlebar=no, menubar=no, toolbar=no, location=no, directories=no, status=no, resizable=" + pResizable + ", scrollbars=" + pScrollbar + ", top=" + pTop + ", left=" + pLeft + ", width=" + pWidth + ", height=" + pHeight;
  opnWinObj = window.open("", pName, options);
  var $frm = $('<form>').attr({
    "method" : "POST",
    "target" : pName,
    "action" : pUrl
  }).hide().appendTo("body");
  for ( var name in pArgs) {
    $('<input type="hidden">').attr("name", name).val(pArgs[name]).appendTo($frm);
  }

  opnWinObj.focus();
  $frm.submit().remove();

  console.groupEnd('CmmnUtil.openWin');
  return opnWinObj;
};

CmmnUtil.setReturnValue = function(obj) {
  console.group("CmmnUtil.setReturnValue");
  console.info(obj);
  
  var vCallbackMethod;
  if (parent != null && parent != self) {
    console.info( parent );
    vCallbackMethod = parent.getCallbackMethod();
    try {
      if (vCallbackMethod != null) {
        vCallbackMethod(obj);
      }
    } catch (err) {
      alert('자식 파라미터 전달에 실패하였습니다. \n오류내용 : ' + err);
    }
  } else if (opener != null && !opener.closed) {
    vCallbackMethod = opener.getCallbackMethod();
    try {
      if (vCallbackMethod != null) {
        vCallbackMethod(obj);
      }
    } catch (err) {
      alert('팝업 파라미터 전달에 실패하였습니다. \n오류내용 : ' + err);
    }
  } else if (parent.opener != null && !parent.opener.closed) {
    vCallbackMethod = parent.opener.getCallbackMethod();
    try {
      if (vCallbackMethod != null) {
        vCallbackMethod(obj);
      }
    } catch (err) {
      alert('자식 팝업 파라미터 전달에 실패하였습니다. \n오류내용 : ' + err);
    }
  } else {
    alert('업무 화면에 대한 변동이 있습니다. 다시 시도해 주십시오.');
  }

  console.groupEnd("CmmnUtil.setReturnValue");
};

/**********************************************************************************************************************/
/** 통신 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * Ajax 통신
 * 
 * @param url
 * @param data
 * @param callback
 * @param async
 */
CmmnUtil.ajax = function(paramObj) {
  console.group('CmmnUtil.ajax');
  if(isTest) console.log('TEST SERVER LOG', paramObj);
  var pData = CmmnUtil.getObjVal(paramObj, "data", "");
  var pAsync = CmmnUtil.getObjVal(paramObj, "async", true);
  $.ajax({
    type : "POST",
    async : pAsync,
    url : paramObj.url,
    data : pData,
    dataType : "JSON",
  }).done(function(rData) {
    if (isTest) {
      console.info( 'res : ', rData );
    }
    if (paramObj["callback"] != undefined) {
      paramObj.callback(rData);
    }
  }).fail(function(req, status, error) {
    if (isTest) {
      console.group("ajax fail info");
      console.info( req );
      console.info( status );
      console.info( error );
      console.groupEnd("ajax fail info");
    } else {
      alert("서버와 통신 중 오류가 발생하였습니다.");
    }
  });

  console.groupEnd('CmmnUtil.ajax');
};

/**
 * Ajax 통신(JSON)
 * 
 * @param url(required)
 * @param data
 * @param callback
 * @param async
 */
CmmnUtil.ajaxJSON = function(paramObj) {
  // var pData = CmmnUtil.getObjVal(paramObj, "data", "");
  var pAsync = CmmnUtil.getObjVal(paramObj, "async", true);
  $.ajax({
    type : "POST",
    async : pAsync,
    contentType : "application/json",
    dataType : "json",
    url : paramObj.url,
    data : JSON.stringify(paramObj.data),
    beforeSend : function() {
    },
    success : function(data, textStatus, jqXHR) {
    },
    error : function(jqXHR, textStatus, errorThrown) {
      this.error = jqXHR.responseJSON;
      alert(this.error);
    },
    complete : function() {
    }
  }).done(function(rData) {
    if( isTest ) console.info( rData );
    if (paramObj["callback"] != undefined) {
      paramObj.callback(rData);
    }
  }).fail(function(req, status, error) {
    if (isTest) {
      console.group("ajax fail info");
      var msg = 'req : ' + JSON.stringify(req) + '\nstatus : ' + JSON.stringify(status) + '\nerror : ' + JSON.stringify(error);
      console.info( msg );
      console.groupEnd("ajax fail info");
    }
    if (this.error == null || this.error.error != true) {
      alert("서버와 통신 중 오류가 발생하였습니다.<br><br>" + status);
    }
  });
};

/**********************************************************************************************************************/
/** Data 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * Object 값 가져오기
 * 
 * @param obj
 *            Object 객체
 * @param key
 *            Object Key값
 * @param defaultVal
 *            기본값
 */
CmmnUtil.getObjVal = function(obj, key, defaultVal) {
  if (CmmnUtil.isEmpty(obj)) {
    return "";
  }
  if (obj[key] != undefined) {
    return obj[key];
  } else {
    return defaultVal === undefined ? "" : defaultVal;
  }
};

/**
 * 변수값 가져오기
 * 
 * @param oVar
 *            Object 객체
 * @param defaultVal
 *            기본값
 */
CmmnUtil.getValueEmptyDefault = function(oVar, defaultVal) {
  if (CmmnUtil.isEmpty(oVar)) {
    return defaultVal === undefined ? "" : defaultVal;
  } else {
    return oVar;
  }
};

/**
 * Empty 여부
 * 
 * @param obj
 *            Object 객체(required)
 */
CmmnUtil.isEmpty = function(obj) {
  if (obj == undefined || obj == null || String(obj) == "") {
    return true;
  } else {
    return false;
  }
};

/**
 * Object Data null 값 처리
 * 
 * @param objData
 *            Object Data
 * @return Null to empty string Data
 */
CmmnUtil.objectNullToEmptyString = function(objData) {
  $.each(objData, function(key, value) {
    if (value == null) {
      objData[key] = "";
    }
  });
  return objData;
};

/**********************************************************************************************************************/
/** Form 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * 엔터 친 경우 조회
 * 
 * @param event
 * @param 함수
 *            이름
 * @returns void
 */
CmmnUtil.enterKeySearch = function(event, funcName) {
  if (event.keyCode == 13) {
    window.eval(funcName);
  }
};

/**
 * 체크박스 전체체크
 * 
 * @param obj
 *            Object 전체체크박스 객체
 * @param targetClass
 *            체크할 체크박스 Class
 */
CmmnUtil.allCheck = function(obj, targetClass) {
  $("." + targetClass).prop("checked", $(obj).is(":checked"));
};

/**
 * 해당 폼 초기화
 * 
 * @param formObj
 *            Form Object
 */
CmmnUtil.resetForm = function(formObj) {
  $(formObj)[0].reset();
};

/**********************************************************************************************************************/
/** 날짜 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * 년도 가져오기
 * 
 * @param oDate
 *            Date 객체
 * @return String YYYY
 */
CmmnUtil.getDateYear = function(oDate) {
  var dateObj = CmmnUtil.getValueEmptyDefault(oDate, new Date());
  return dateObj.getFullYear().toString();
};

/**
 * 현재일 가져오기
 * 
 * @return String yyyyMMdd
 */
CmmnUtil.getToday = function() {
  return CmmnUtil.getDateString();
};

/**
 * 날짜 가져오기
 * 
 * @param oDate
 *            Date 객체
 * @param sDelim
 *            Date 표시 구분자
 * @return String 날짜
 */
CmmnUtil.getDateString = function(oDate, sDelim) {
  var dateObj = CmmnUtil.getValueEmptyDefault(oDate, new Date());
  var delim = CmmnUtil.getValueEmptyDefault(sDelim);
  return dateObj.getFullYear() + delim + CmmnUtil.appendZero(dateObj.getMonth() + 1) + delim + CmmnUtil.appendZero(dateObj.getDate());
};

/**
 * 시작일 종료일 날짜 비교
 * 
 * @param bgnDeObj
 *            시작일 Object
 * @param endDeObj
 *            종료일 Object
 */
CmmnUtil.checkBgnEndDt = function(bgnDeObj, endDeObj) {
  if (bgnDeObj.val() == "" || endDeObj.val() == "") {
    return true;
  }
  var bgnDe = bgnDeObj.val().replaceAll("-", "").replaceAll(":", "").replaceAll(" ", "");
  var endDe = endDeObj.val().replaceAll("-", "").replaceAll(":", "").replaceAll(" ", "");
  if (isNaN(bgnDe) || isNaN(endDe)) {
    return false;
  }
  if (Number(bgnDe) <= Number(endDe)) {
    return true;
  } else {
    alert("시작일(시)보다 종료일(시)가 크거나 같아야 합니다.");
    $(endDeObj).val("");
    return false;
  }
};

/**********************************************************************************************************************/
/** 숫자 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * 숫자에 콤마 추가
 */
CmmnUtil.setComma = function(n) {
  var reg = /(^[+-]?\d+)(\d{3})/;
  n += '';
  while (reg.test(n)) {
    n = n.replace(reg, '$1' + ',' + '$2');
  }
  return n;
};




/**
 * 콤보박스 생성
 * 
 * @param upperCode
 *            상위코드
 * @param selectedCode
 *            하위콤보박스 선택된 Value
 * @param targetObj
 *            하위 셀렉트박스 object
 * @param headerType
 *            A:전체, S:선택, N:없음
 * @param fnCallback
 *            콜백함수 데이터 조회 성공 시 호출
 */
CmmnUtil._makePortsCodeCombo = function(paramObj, fnCallback) {
  console.group('CmmnUtil._makePortsCodeCombo');
  console.log(paramObj);
  
  var pUpperCode = CmmnUtil.getObjVal(paramObj, "code", "");
  var pWhereQuery = CmmnUtil.getObjVal(paramObj, "whereQuery", "");
  var notEmpty = CmmnUtil.getObjVal(paramObj, "notEmpty", "");
  var pTargetObj = CmmnUtil.getObjVal(paramObj, "targetObj", null);
  var pSelectedCode = CmmnUtil.getObjVal(paramObj, "selectedCode", "");
  var pHeaderType = CmmnUtil.getObjVal(paramObj, "headerType", "S");
    
  if (pTargetObj == null) {
    return false;
  }
  var headerText = "";
  if (pHeaderType == "A") {
    headerText = "전체";
  } else if (pHeaderType == "S") {
    headerText = "선택";
  }
//  pTargetObj.html("loading");
  if (CmmnUtil.isEmpty(pUpperCode)) {
    
    if (pHeaderType != "N") {
      pTargetObj.html($("<option/>").attr("value", "").text(headerText));
    }
  } else {    
    CmmnUtil.ajax({
      url : "/cmmn/code/selectPortsCodeList.do",
      data : {
        "upperCode" : pUpperCode,
        "whereQuery" : pWhereQuery,
        "notEmpty" : notEmpty
      },
      callback : fnAjaxCallback,
      async : true
    });
    function fnAjaxCallback(rData) {
      var op = [];
      if (rData) {
        if (notEmpty == "Y" && rData.length == 1){
        }else{
          if (pHeaderType != "N") {
            op.push("<option value=''>" + headerText + "</option>");
          }
        }
        $.each(rData, function(i, v) {
          op.push("<option value='" + v.code + "' " + (pSelectedCode == v.code ? "selected='selected'" : "") + ">" + v.codeNm + "</option>");
        });
        pTargetObj.html(op.join("\r\n"));
        if (fnCallback != null && $.isFunction(fnCallback)) {
          fnCallback(rData);
        }
      }
    }
  }

  console.groupEnd('CmmnUtil._makePortsCodeCombo');
};

CmmnUtil._makeInsttCodeCombo = function(paramObj, fnCallback) {
  
  var pUpperCode = CmmnUtil.getObjVal(paramObj, "upperCode", "");
  var pWhereQuery = CmmnUtil.getObjVal(paramObj, "whereQuery", "");
  var notEmpty = CmmnUtil.getObjVal(paramObj, "notEmpty", "");
  var pTargetObj = CmmnUtil.getObjVal(paramObj, "targetObj", null);
  var pSelectedCode = CmmnUtil.getObjVal(paramObj, "selectedCode", "");
  var pHeaderType = CmmnUtil.getObjVal(paramObj, "headerType", "S");
    
  if (pTargetObj == null) {
    return false;
  }
  var headerText = "";
  if (pHeaderType == "A") {
    headerText = "전체";
  } else if (pHeaderType == "S") {
    headerText = "선택";
  }
//  pTargetObj.html("loading");
  if (CmmnUtil.isEmpty(pUpperCode)) {
  
    if (pHeaderType != "N") {
      pTargetObj.html($("<option/>").attr("value", "").text(headerText));
    }
  } else {
  
    CmmnUtil.ajax({
      url : "/cmmn/code/selectInsttCodeList.do",
      data : {
        "upperCode" : pUpperCode,
        "whereQuery" : pWhereQuery,
        "notEmpty" : notEmpty
      },
      callback : fnAjaxCallback,
      async : true
    });
    function fnAjaxCallback(rData) {
      var op = [];
      if (rData) {
        if (notEmpty == "Y" && rData.length == 1){
        }else{
          if (pHeaderType != "N") {
            op.push("<option value=''>" + headerText + "</option>");
          }
        }
        $.each(rData, function(i, v) {
          op.push("<option value='" + v.code + "' " + (pSelectedCode == v.code ? "selected='selected'" : "") + ">" + v.codeNm + "</option>");
        });
        pTargetObj.html(op.join("\r\n"));
        if (fnCallback != null && $.isFunction(fnCallback)) {
          fnCallback(rData);
        }
      }
    }
  }
};

CmmnUtil.makeCodeCombo2 = function(obj) {
  var $this = $(obj);
  CmmnUtil._makePortsCodeCombo({
    "upperCode" : $this.attr("combo-code2"),
    "targetObj" : $this,
    "selectedCode" : $this.attr("combo-selected"),
    "headerType" : $this.attr("combo-header")
  }, callback_makeLowerCombo2);
  function callback_makeLowerCombo2() {
    if ($this.is("[combo-lower-id2]")) {
      var $lowerObj = $("#" + $this.attr("combo-lower-id2"));
      CmmnUtil._makePortsCodeCombo({
        "upperCode" : $this.val(),
        "targetObj" : $lowerObj,
        "selectedCode" : $lowerObj.attr("combo-selected"),
        "headerType" : $lowerObj.attr("combo-header"),
        "notEmpty" : $lowerObj.attr("combo-notempty")
      });
    }
  }
};

CmmnUtil.makeCodeCombo3 = function(obj) {
  var $this = $(obj);
  CmmnUtil._makeInsttCodeCombo({
    "upperCode" : $this.attr("combo-code3"),
    "targetObj" : $this,
    "selectedCode" : $this.attr("combo-selected3"),
    "headerType" : $this.attr("combo-header")
  }, callback_makeLowerCombo3);
  function callback_makeLowerCombo3() {
    if ($this.is("[combo-lower-id3]")) {
      var $lowerObj = $("#" + $this.attr("combo-lower-id3"));
      CmmnUtil._makeInsttCodeCombo({
        "upperCode" : $this.val(),
        "targetObj" : $lowerObj,
        "selectedCode" : $lowerObj.attr("combo-selected3"),
        "headerType" : $lowerObj.attr("combo-header"),
        "notEmpty" : $lowerObj.attr("combo-notempty")
      });
    }
  }
};

/**********************************************************************************************************************/
/** 공통코드 관련 Util ************************************************************************************************/
/**********************************************************************************************************************/

/**
 * 콤보박스 생성
 * 
 * @param upperCode
 *            상위코드
 * @param selectedCode
 *            하위콤보박스 선택된 Value
 * @param targetObj
 *            하위 셀렉트박스 object
 * @param headerType
 *            A:전체, S:선택, N:없음
 * @param fnCallback
 *            콜백함수 데이터 조회 성공 시 호출
 */
CmmnUtil._makeDtlCodeCombo = function(paramObj, fnCallback) {
  
  var pUpperCode = CmmnUtil.getObjVal(paramObj, "upperCode", "");
  var pWhereQuery = CmmnUtil.getObjVal(paramObj, "whereQuery", "");
  var notEmpty = CmmnUtil.getObjVal(paramObj, "notEmpty", "");
  var pTargetObj = CmmnUtil.getObjVal(paramObj, "targetObj", null);
  var pSelectedCode = CmmnUtil.getObjVal(paramObj, "selectedCode", "");
  var pHeaderType = CmmnUtil.getObjVal(paramObj, "headerType", "S");
    
  
  if (pTargetObj == null) {
    return false;
  }
  var headerText = "";
  if (pHeaderType == "A") {
    headerText = "전체";
  } else if (pHeaderType == "S") {
    headerText = "선택";
  }
//  pTargetObj.html("loading");
  if (CmmnUtil.isEmpty(pUpperCode)) {    
    if (pHeaderType != "N") {
      pTargetObj.html($("<option/>").attr("value", "").text(headerText));
    }
  } else {
    
    CmmnUtil.ajax({
      url : "/cmmn/code/selectDtlCodeList.do",
      data : {
        "upperCode" : pUpperCode,
        "whereQuery" : pWhereQuery,
        "notEmpty" : notEmpty
      },
      callback : fnAjaxCallback,
      async : true
    });
    function fnAjaxCallback(rData) {
      var op = [];
      if (rData) {
        if (notEmpty == "Y" && rData.length == 1){
        }else{
          if (pHeaderType != "N") {
            op.push("<option value=''>" + headerText + "</option>");
          }
        }
        $.each(rData, function(i, v) {
          op.push("<option value='" + v.code + "' " + (pSelectedCode == v.code ? "selected='selected'" : "") + ">" + v.codeNm + "</option>");
        });
        pTargetObj.html(op.join("\r\n"));
        if (fnCallback != null && $.isFunction(fnCallback)) {
          fnCallback(rData);
        }
      }
    }
  }
};

CmmnUtil.makeCodeCombo = function(obj) {
  var $this = $(obj);
  CmmnUtil._makeDtlCodeCombo({
    "upperCode" : $this.attr("combo-code"),
    "targetObj" : $this,
    "selectedCode" : $this.attr("combo-selected"),
    "headerType" : $this.attr("combo-header")
  }, callback_makeLowerCombo);
  function callback_makeLowerCombo() {
    if ($this.is("[combo-lower-id]")) {
      var $lowerObj = $("#" + $this.attr("combo-lower-id"));
      CmmnUtil._makeDtlCodeCombo({
        "upperCode" : $this.val(),
        "targetObj" : $lowerObj,
        "selectedCode" : $lowerObj.attr("combo-selected"),
        "headerType" : $lowerObj.attr("combo-header"),
        "notEmpty" : $lowerObj.attr("combo-notempty")
      });
    }
  }
};

/**
 * 하위 콤보박스 생성
 * 
 * @param upperObj
 *            상위콤보박스 Object
 * @param lowerTargetObjId
 *            하위콤보박스 생성대상 Object Id
 * @param selectedLowerCode
 *            선택된 하위코드
 * @param fnCallback
 *            콜백함수
 */
CmmnUtil.makeDtlCodeCombo = function(upperObj, lowerTargetObjId, selectedLowerCode, fnCallback) {
  var $targetObj = CmmnUtil.isEmpty(lowerTargetObjId) ? $(upperObj).next() : $("#" + lowerTargetObjId);
  CmmnUtil._makeDtlCodeCombo({
    "upperCode" : $(upperObj).val(),
    "targetObj" : $targetObj,
    "selectedCode" : selectedLowerCode
  }, fnCallback);
};

/**********************************************************************************************************************/
/** 문자열 관련 Util **************************************************************************************************/
/**********************************************************************************************************************/

/**
 * Replace all the characters
 * 정규 표현식을 쓸줄 몰라서 이런 함수를 만드냐?
 */
String.prototype.replaceAll = function(replace, string) {
  var tmpStr = this.trim();
  if (tmpStr != "" && replace != string)
    while (tmpStr.indexOf(replace) > -1) {
      tmpStr = tmpStr.replace(replace, string);
    }
  return tmpStr;
};

/**
 * 한 자리 숫자일 때 Zero 붙이기
 * 
 * @param s
 *            숫자
 * @param padLen
 *            전체 문자열 길이
 * @param padStr
 *            Padding 문자
 * @return String Padding 문자열
 */
CmmnUtil.appendZero = function(digit) {
  return CmmnUtil.lpad(digit, 2, "0");
};

/**
 * 왼쪽 문자열 붙이기
 * 
 * @param s
 *            숫자
 * @param padLen
 *            전체 문자열 길이
 * @param padStr
 *            Padding 문자
 * @return String Padding 문자열
 */
CmmnUtil.lpad = function(s, padLen, padStr) {
  var str = String(s);
  while (str.length < padLen) {
    str = padStr + str;
  }
  return str;
};

/**********************************************************************************************************************/
/** 참조영역(구획정보) 관련 Util **************************************************************************************/
/**********************************************************************************************************************/

/**
 * 도/분/초 로 나누어진 좌표를 도로 변환하는 함수
 */
function funcDMSToDegress(obj) {
  return Number(obj[0]) + Number((obj[1] / 60)) + Number((obj[2] / 3600));
};

/**
 * 도값으로 된 데이터베이스값 -> 도분초 로 나누는 함수
 */
function funcDegressToDMS(ldDegress) {
  ldDegress = parseFloat(ldDegress);
  var lrDMS = {
    d : 0,
    m : 0,
    s : 0
  };
  var tmp;
  lrDMS.d = Math.floor(ldDegress);

  tmp = ((ldDegress * 100000000000000 - lrDMS.d * 100000000000000) / 100000000000000 * 60).toFixed(10);

  lrDMS.m = Math.floor(tmp);
  lrDMS.s = (tmp * 100000000000000 - lrDMS.m * 100000000000000) / 100000000000000 * 60;
  //소수11자리에서 버림
  lrDMS.s = Math.floor(lrDMS.s*10000000000)/10000000000;
  
  return lrDMS;
};

/**********************************************************************************************************************/
/** html 관련 Util ****************************************************************************************************/
/**********************************************************************************************************************/

/**
 * HTML Table JSON으로 파싱
 * 
 * @param tableClass(required)
 *            테이블 Class
 */

CmmnUtil.tableParser = function(tableObj, isOz, ignoreHiddenRows) {
  console.group('CommnUtil.tableParser');
  var $tableObj = $(tableObj);
  var tdthMaxCnt = 0;
  $("tr", $tableObj).each(function() {
    var tdthCnt = 0;
    $("td,th", this).each(function() {
      if (($(this).attr("colspan") * 1) > 1) {
        tdthCnt = tdthCnt + ($(this).attr("colspan") * 1);
      } else {
        tdthCnt++;
      }
    });
    // console.info("tdthCnt {} " + tdthCnt);
    if (tdthMaxCnt < tdthCnt) {
      tdthMaxCnt = tdthCnt;
    }
  });
  var headings = [];
  for (var i = 0; i < tdthMaxCnt; i++) {
    headings.push(i + "");
  }
  headings.push("isHeader");

  var tableJsonArr = $tableObj.tableToJSON({
    headings : headings,
    ignoreHiddenRows : ignoreHiddenRows
  });
  // console.info(tableJsonArr);
  // console.info(JSON.stringify(tableJsonArr));
  if (isOz) {
    var jsonData = {
      header : [],
      data : []
    };
    $.each(tableJsonArr, function(i, v) {
      var row = {};
      for (key in v) {
        if (key == "isHeader") {
          continue;
        }
        row[key] = v[key].txt;
      }
      if (v.isHeader == "Y") {
        jsonData.header.push(row);
      } else {
        jsonData.data.push(row);
      }
    });
    // console.info("jsonData {} " + JSON.stringify(jsonData));

    console.info(jsonData);
    console.groupEnd('CommnUtil.tableParser');
    return jsonData;
  } else {
    console.info(tableJsonArr);
    console.groupEnd('CommnUtil.tableParser');
    return tableJsonArr;
  }
}

/**
 * HTML Table 엑셀 다운로드
 * 
 * @param tableClass
 *            String 테이블 Class (required)
 * @param fileName
 *            String 엑셀 파일명 (required)
 * @param sheetName
 *            Array 시트명
 * @param width
 *            cell 너비
 */
CmmnUtil.tableToExcel = function(paramObj) {
	console.info("tabelToExcel!!!!!!!!!!!!!!!")
  if (paramObj.target == null) {
    isTest && console.info("paramObj.target {} " + paramObj.target);
    paramObj.target = document;
  }  
  function fn_syncLayer() {
	  isTest &&   console.info("fn_syncLayer!!!!!!!!!!!!!")
    if (!$('.sync_layer', paramObj.target).is(":visible")) {
    	isTest && console.info("fn_syncLayer!!!!!!!!!!!!!")
      $('.sync_layer', paramObj.target).fadeIn();
    }
  }
  $.when(fn_syncLayer()).done(function() {
    try {
      if (CmmnUtil.isEmpty(paramObj.fileName)) {
        throw new Error("fileName 존재하지 않음");
      }
      if (CmmnUtil.isEmpty(paramObj.tableClass)) {
        throw new Error("tableClass 존재하지 않음");
      }
      if ($("." + paramObj.tableClass).length == 0) {
        throw new Error("$(\"." + paramObj.tableClass + "\") table이 존재하지 않음");
      }
      isTest && console.info("-------------------시작----------------")
      var pFileName = $.trim(paramObj.fileName);
      isTest && console.info("pFileName===>"+ pFileName);
      var pSheetName = [];
      var pWidth = CmmnUtil.getObjVal(paramObj, "width", "3000");
      isTest && console.info("pWidth===>"+ pWidth);
      var ignoreHiddenRows = CmmnUtil.getObjVal(paramObj, "ignoreHiddenRows", true);
      isTest && console.info("ignoreHiddenRows===>"+ ignoreHiddenRows);
      if (!$.isNumeric(pWidth)) {
        throw new Error("width 숫자가 아님");
      }
      if (CmmnUtil.isEmpty(paramObj.sheetName)) {
        $("." + paramObj.tableClass).each(function(i, v) {
          pSheetName.push(pFileName + (i > 0 ? " (" + (i + 1) + ")" : ""));
        });
      } else {
        if (!$.isArray(paramObj.sheetName) || paramObj.sheetName.length != $("." + paramObj.tableClass).length) {
          throw new Error("sheetName 배열이 아니거나 테이블 개수와 맞지 않음");
        } else {
          pSheetName = paramObj.sheetName;
        }
      }
      var jsonDataArr = [];
      $("." + paramObj.tableClass).each(function(i, v) {
        if ($.isArray(paramObj.ignCols)) {
          var _jsonData = CmmnUtil.tableParser($(this), false, ignoreHiddenRows);
          $.each(_jsonData, function(i2, v2) {
            for (key in v2) {
              if ($.isArray(paramObj.ignCols[i]) && $.inArray(key, paramObj.ignCols[i]) > -1) {
                delete v2[key];
              }
            }
          });
          jsonDataArr.push(_jsonData);
        } else {
          jsonDataArr.push(CmmnUtil.tableParser($(this), false, ignoreHiddenRows));
        }
      });
      var data = {
        fileName : pFileName,
        sheetName : JSON.stringify(pSheetName).replaceAll("\"", "＃"),
        width : pWidth
      };
      var maxSize = 500000;
      var binIdx = 0;
      var endIdx = maxSize;
      var jsonData = JSON.stringify(jsonDataArr).replaceAll("\"", "＃");
      if (maxSize < jsonData.length) {
        var jsonIdx = 0;
        while (true) {
          if (endIdx < jsonData.length) {
            data["jsonData" + jsonIdx] = jsonData.substring(binIdx, endIdx);
            binIdx = endIdx;
            endIdx = endIdx + binIdx;
          } else {
            data["jsonData" + jsonIdx] = jsonData.substring(binIdx, JSON.stringify(jsonDataArr).length);
            break;
          }
          jsonIdx++;
        }
      } else {
        data.jsonData = JSON.stringify(jsonDataArr).replaceAll("\"", "＃");
      }
      
      $.fileDownload("/cmmn/tableToExcel.do", {
        httpMethod : "POST",
        data : data,
        successCallback : function(url) {
          $('.sync_layer', paramObj.target).fadeOut("slow");
        },
        failCallback : function(responseHtml, url) {
          alert("에러발생");
          $('.sync_layer', paramObj.target).fadeOut();
        }
      });
    } catch (exception) {
      console.info(exception);
      $("#loaderText").text("에러 로그 참조");
    } finally {
    }
  });
};

/**
 * 페이징 엑셀 다운로드
 * 
 * @param tableClass
 *            String 테이블 Class (required)
 * @param fileName
 *            String 엑셀 파일명 (required)
 * @param excelPageUrl
 *            String 엑셀 페이지 URL (required)
 * @param params
 *            Array<{}> 검색조건 Form SerializeArray (required)
 * @param sheetName
 *            Array 시트명
 * @param width
 *            cell 너비
 * @param ignCols
 *            Array<Array<String>> 제외할 col index
 */
CmmnUtil.pagingToExcel = function(paramObj) {
  console.group('CmmnUtil.pagineToExcel');
  isTest && console.debug(paramObj);
  $('.sync_layer').fadeIn(function() {
    try {
      if (CmmnUtil.isEmpty(paramObj.fileName)) {
        throw new Error("fileName 존재하지 않음");
      }
      if (CmmnUtil.isEmpty(paramObj.tableClass)) {
        throw new Error("tableClass 존재하지 않음");
      }
      if (CmmnUtil.isEmpty(paramObj.excelPageUrl)) {
        throw new Error("excelPageUrl 존재하지 않음");
      }
      if ($("." + paramObj.tableClass).length == 0) {
        throw new Error("$(\"." + paramObj.tableClass + "\") table이 존재하지 않음");
      }
      if ($("[name='excelDownloadFrame']", parent.document).length > 0) {
        CmmnUtil.tableToExcel({
          tableClass : paramObj.tableClass,
          fileName : paramObj.fileName,
          ignoreHiddenRows : false,
          sheetName : paramObj.sheetName,
          width : paramObj.width,
          target : parent.document,
          ignCols : paramObj.ignCols
        });
      } else {
        if (!$("body").find("iframe[name=excelDownloadFrame]").length) {
          $('<iframe>').hide().attr("name", "excelDownloadFrame").appendTo("body");
        }
        var $frm = $('<form>').prop({
          "method" : "POST",
          "target" : "excelDownloadFrame",
          "action" : paramObj.excelPageUrl
        }).hide().appendTo("body");
        $.each(paramObj.params, function(i, v) {
          if (v.name != "currentPageNo" && v.name != "pageIndex") {
            $('<input type="hidden">').attr("name", v.name).val(v.value).appendTo($frm);
          }
        });
        $('<input type="hidden">').attr("name", "recordCountPerPage").val("99999999").appendTo($frm);
        $frm.submit().remove();
      }
    } catch (exception) {
      console.info(exception);
      $("#loaderText").text("에러 로그 참조");
    } finally {
      console.groupEnd('CmmnUtil.pagineToExcel');
    }
  });
};


CmmnUtil.pagingToExcelN = function(paramObj) {
  
  $('.sync_layer').fadeIn(function() {
    try {
      if ($("[name='excelDownloadFrame']", parent.document).length > 0) {
        CmmnUtil.tableToExcel({
          tableClass : paramObj.tableClass,
          fileName : paramObj.fileName,
          ignoreHiddenRows : false,
          sheetName : paramObj.sheetName,
          width : paramObj.width,
          target : parent.document,
          ignCols : paramObj.ignCols
        });
      } else {
        if (!$("body").find("iframe[name=excelDownloadFrame]").length) {
          $('<iframe>').hide().attr("name", "excelDownloadFrame").appendTo("body");
        }
        var $frm = $('<form>').prop({
          "method" : "POST",
          "target" : "excelDownloadFrame",
          "action" : paramObj.excelPageUrl
        }).hide().appendTo("body");
        $.each(paramObj.params, function(i, v) {
          if (v.name != "currentPageNo" && v.name != "pageIndex") {
            $('<input type="hidden">').attr("name", v.name).val(v.value).appendTo($frm);
          }
        });
        $('<input type="hidden">').attr("name", "recordCountPerPage").val("99999999").appendTo($frm);
        $("[name='excelDownloadFrame']").remove();//remove 꼭 해줘야해요
        $frm.submit().remove();
        
      } 
    }catch (exception) {
      console.info(exception);
      $("#loaderText").text("에러 로그 참조");
    } finally {
      $('.sync_layer', paramObj.target).fadeOut("slow");
    }
  });
};

CmmnUtil.pagingToExcelAjax = function(paramObj) {
  console.group('pagingToExcelAjax');
  isTest && console.debug('paramObj : ');
  isTest && console.debug(paramObj);

  $('.sync_layer').fadeIn(function() {
    try {
      try {
        console.group('Parameter Validation Check');
        if (CmmnUtil.isEmpty(paramObj.fileName)) {
          throw new Error("fileName 존재하지 않음");
        }
        if (CmmnUtil.isEmpty(paramObj.tableClass)) {
          throw new Error("tableClass 존재하지 않음");
        }
        if (CmmnUtil.isEmpty(paramObj.excelPageUrl)) {
          throw new Error("excelPageUrl 존재하지 않음");
        }
        if ($("." + paramObj.tableClass).length == 0) {
          throw new Error("$(\"." + paramObj.tableClass + "\") table이 존재하지 않음");
        }
      } catch( e ) {
        console.error( e );
      } finally {
        console.groupEnd('Parameter Validation Check');
      }

      //console.info($("[name='excelDownloadFrame']", parent.document));
      if ($("[name='excelDownloadFrame']", parent.document).length > 0) {
        console.group("before table to excel");
        CmmnUtil.tableToExcel({
          tableClass : paramObj.tableClass,
          fileName : paramObj.fileName,
          ignoreHiddenRows : false,
          sheetName : paramObj.sheetName,
          width : paramObj.width,
          target : parent.document,
          ignCols : paramObj.ignCols
        });
        console.groupEnd("before table to excel");
      } else {
        if (!$("body").find("iframe[name=excelDownloadFrame]").length) {
          $('<iframe>').hide().attr("name", "excelDownloadFrame").appendTo("body");
        }
        console.info( $('<iframe>') );

        var $frm = $('<form>').prop({
          "method" : "POST",
          "target" : "excelDownloadFrame",
          "action" : paramObj.excelPageUrl
        }).hide().appendTo("body");

        $.each(paramObj.params, function(i, v) {
        	isTest && console.info( i, v );
          if (v.name != "currentPageNo" && v.name != "pageIndex") {
            $('<input type="hidden">').attr("name", v.name).val(v.value).appendTo($frm);
          }
        });
        $frm.submit().remove();
      }
    } catch (exception) {
      console.info(exception);
      $("#loaderText").text("에러 로그 참조");
    } finally {
      $('.sync_layer').fadeOut(function() {
        console.groupEnd('pagingToExcelAjax');
      });
    }
  });
};

CmmnUtil.startExcel = function() {
  console.group('CmmnUtil.startExcel');
  if ($("[name='excelDownloadFrame']", parent.document).length > 0) {
    if ($.isFunction(CmmnUtil.excelFunc)) {
      CmmnUtil.excelFunc();
    } else {
      console.info("$.isFunction(CmmnUtil.excelFunc) {} " + false);
      //  여기서 에러 처리 해야 하는거 아냐?
      return false;
    }
  } else {
    console.info('CmmnUtil.startExcel : ' + $("[name='excelDownloadFrame']", parent.document).length);
  }
  console.groupEnd('CmmnUtil.startExcel');
};

function progressStart(){
  var backHeight = $(document).height(); //뒷 배경의 상하 폭
  var backWidth = window.document.body.clientWidth; //뒷 배경의 좌우 폭
  var backGroundCover = "<div id='back'></div>"; //뒷 배경을 감쌀 커버
  var loadingBarImage = ''; //가운데 띄워 줄 이미지
  loadingBarImage += "<div id='loadingBar'>";
  loadingBarImage += "<div class='loadingio-spinner-spinner-6hoir7b9jkt'>";
  loadingBarImage += "<div class='ldio-v3tmjpehpue'>";
  loadingBarImage += "<div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>";
  loadingBarImage += "</div>";
  loadingBarImage += "</div>";
  loadingBarImage += "</div>";
  $('body').prepend(backGroundCover).prepend(loadingBarImage);
  $('#back').css({ 'width': backWidth, 'height': backHeight, 'opacity': '0.5' });
  $('#back').show();
  $('#loadingBar').show();
};


/**
 * form 데이터를 객체로 만들어 반환한다.
 * let serialObj = $('#formId').serializeObject();
 */
jQuery.fn.serializeObject = function () {
  console.group('serializeObject');
  var obj = null;
  try {
    if (this[0].tagName && this[0].tagName.toUpperCase() == "FORM") {
      var arr = this.serializeArray();
      if (arr) {
        obj = {};
        jQuery.each(arr, function () {
          obj[this.name] = this.value;
        });
      }
    }
  } catch (e) {
    alert("serializeObject Crashed!!\n" + e.message);
  } finally {
    isTest && console.log(obj);
  }
  console.groupEnd('serializeObject');
  return obj;
}
//  serializeObject

//	[ ' ', ',', '(', ')', '\']를 제외한 특수문자 검출.
var someSpecialChar = /[\{\}\[\];:|*~`!^\-+<>@\#$\\\'\"]/gi;

/**
 * 입력 받은 문자열에서 일부 특수문자를 제거한다. 2번째 인자가 있을 경우 그 문자열로 대체한다.
 * @param {*} str 
 * @param {*} alt 
 * @author : Jeaha
 * @date   : 2020.03.03
 */
var rplcSpclCharLsn = function( str, alt ) {
  console.group('rplcSpclCharLsn');
  if( str.match(someSpecialChar) != null
      && str.match(someSpecialChar).length > 0 ) {
    isTest && console.info( str.match(someSpecialChar), str.match(someSpecialChar).length );
    
    console.groupEnd('rplcSpclCharLsn');
    if( alt != null && typeof str === 'string' ) return str.replace( someSpecialChar, alt );
    else return str.replace( someSpecialChar, '' );
  }
  console.groupEnd('rplcSpclCharLsn');
  return str;
}

$.ajaxSetup({
  error: function( xhr, status, err ) {
    if(isTest) {
      console.warn( 'JEAHA.DEV' );
      switch ( xhr.status ) {
        case ( 0 ) :
          console.error( 'Not Connected Or Verify Network Or Interupted By Function.\n대충 인터넷이 끊겼거나 다른 요청에 의해서 중단 되었단 뜻.' ); break;
        case ( 200 ) : 
          console.error( 'OK\n200 응답받은 데이터 타입이 요청한 타입과 맞지 않음.\n혹은 세션 만료, 로그인 필요함.' ); break;
        case ( 202 ) : 
          console.error( 'Acepted But Not Progressed.' ); break;
        case ( 204 ) : 
          console.error( 'No Content. (Void)' ); break;
        case ( 400 ) :
          console.error( 'Request Content Was Invalid.\n컨트롤러가 받는 데이터 타입과 맞지 않음.' ); break;
        case ( 401 ) :
          console.error( 'Unauthorized.\n인증 필요. (실제로는 Unauthenticated 의 의미)' ); break;
        case ( 403 ) :
          console.error( 'Forbidden.\n권한 부족. (실제로는 Unauthorized 의 의미)' ); break;
        case ( 405 ) :
          console.error( 'Method Not Allowed\nGET\\POST가 일치하지 않음.' ); break;
        case ( 406 ) :
          console.error( 'Not Acceptable\n헤더 또는 내용이 서버에서 받아들일 수 없는 요청.' ); break;
        case ( 408 ) :
          console.error( 'Request Timeout\n요청시간 초과.' ); break;
        case ( 413 ) :
          console.error( 'Requested Entity Too Large.\n내용이 너무 큼 (첨부파일).' ); break;
        case ( 415 ) :
          console.error( 'Unsupported Media Type.\n요청한 데이터 타입을 서버에서 만들줄 모름.' ); break;
        case ( 429 ) : 
          console.error( 'Too Many Requests.\n요청 횟수 제한' ); break;
        case ( 500 ) :
          alert( '서버 트래픽 과부하.\n요청이 너무 많음.' );
          console.error( 'Internal Server Error.' );  break;
        case ( 0 ) : 
          console.error( '' ); break;
      }
      console.warn( 'xhr' );
      console.log( xhr );
      console.warn( 'status' );
      console.log( status );
      console.warn( 'err' );
      console.log( err );
    }
  },
  beforeSend : function(xhr) {
    console.log( 'beforeSend', xhr );
    console.log('this', this);
    let data = this.data;
    try {
      //console.log( typeof data );
      //console.log( data );
      
      if(typeof data == 'string') {
        data = rplcSpclCharLsn(data, '_');
      }
      console.log( data );
    } catch ( e ) {
      console.error( e );
    }
  }
});
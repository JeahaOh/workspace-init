var draw = null;
var snap = null;

var positionPolygonGrid;
var areaDetailGrid;
var geometry;
var geometry_convert=[];

var inputLat;
var inputLon;
var count = 0;

var controllForm = null;
var selectStyle;

var coordintate;

$(document).ready(function(){
	if (Number(POS_LAT)>90 || Number(POS_LON)>180 || Number(POS_LAT)<-90 || Number(POS_LON)<-180) {
		DevExpress.ui.notify("위치가 잘못 입력되었습니다.", "error", 1500);
	}else{
		var areaMap = new ol.layer.Vector({
			source : new ol.source.Vector({
				features : new ol.Feature({}) 
			}),
			opacity : 0.5,
			crossOrigin: 'anonymous'
		});

		layerManager.addLayer({name:"areaMap", visible: false, layer:areaMap});
		
		selectStyle= new ol.style.Style({
	    	fill: new ol.style.Fill({
	    		color: '#0000FF'
	    		
	    	}),
	    	stroke: new ol.style.Stroke({
	    		color: '#000000',
	        	width: 3
	        	
	    	})
	    });
		
		var coordMap_source = new ol.source.Vector();
		var coordMap_vector;
		
		if (typeSelect=='Point') {
			coordMap_vector = new ol.layer.Vector({
			    source: coordMap_source,
			    opacity : 2,
			    style: new ol.style.Style({
			    	fill: new ol.style.Fill({
			    		color: '#ff0000'
			    		
			    	}),
			    	stroke: new ol.style.Stroke({
			    		color: '#CC0000',
			        	width: 2
			        	
			    	}),
			    	image: new ol.style.Circle({
			    		radius: 5,
			    		fill: new ol.style.Fill({
			    			color: '#ff0000'
			    			
			    		})
			    	})
			    }),
			    crossOrigin: 'anonymous'
			});
		}else{
			coordMap_vector = new ol.layer.Vector({
			    source: coordMap_source,
			    opacity : 0.4,
			    style: new ol.style.Style({
			    	fill: new ol.style.Fill({
			    		color: '#ff0000'
			    		
			    	}),
			    	stroke: new ol.style.Stroke({
			    		color: '#CC0000',
			        	width: 2
			        	
			    	})
			    })
			});
		}
		
		layerManager.addLayer({name:"coordMap_vector", visible: true, layer:coordMap_vector});
		
		var coordMap_modify = new ol.interaction.Modify({
			source: coordMap_source
		});

		coordMap_modify.on('modifyend', function(evt){
			
			if(typeSelect == 'Point'){
//				geometry = ol.proj.transform(coordMap_source.getFeatures()[0].getGeometry().getCoordinates(),"EPSG:3857","EPSG:4326");
				geometry = funcMapToDataPos(coordMap_source.getFeatures()[0].getGeometry().getCoordinates());
				
		    	var lon = funcDegressToDMS(geometry[0]);
		    	var lat = funcDegressToDMS(geometry[1]);
		    	
		    	inputLat.dxForm("instance").getEditor("inputLatDo").option("value", lat.d);
		    	inputLat.dxForm("instance").getEditor("inputLatBun").option("value", lat.m);
		    	inputLat.dxForm("instance").getEditor("inputLatCho").option("value", lat.s);
		    	
		    	inputLon.dxForm("instance").getEditor("inputLonDo").option("value", lon.d);
		    	inputLon.dxForm("instance").getEditor("inputLonBun").option("value", lon.m);
		    	inputLon.dxForm("instance").getEditor("inputLonCho").option("value", lon.s);
		    	
			}else{
//				geometry = funcMapToWGS(coordMap_source.getFeatures()[0].getGeometry().getCoordinates());
//				geometry_convert=[];
//		    	for (var i = 0; i < geometry.length-1; i++) {
//					geometry_convert.push({
//						"latD" : funcDegressToDMS(geometry[i][1]).d,
//						"latM" : funcDegressToDMS(geometry[i][1]).m,
//						"latS" : funcDegressToDMS(geometry[i][1]).s.toFixed(2),
//						
//						"lonD" : funcDegressToDMS(geometry[i][0]).d,
//						"lonM" : funcDegressToDMS(geometry[i][0]).m,
//						"lonS" : funcDegressToDMS(geometry[i][0]).s.toFixed(2),
//						
//					});
//				}
		    	
//		    	positionPolygonGrid.dxDataGrid('instance').option("dataSource", geometry_convert);
		    	
//				positionPolygonGrid.dxDataGrid('instance').option("dataSource", geometry);
			}
			
		});

		//영역 수정 이벤트
		map.addInteraction(coordMap_modify);
		
		if (POS_LON.length>0 && POS_LAT.length>0 && typeSelect == 'Point') {
			var feature = new ol.Feature({
				  geometry: new ol.geom.Point(funcDataToMapPos([Number(POS_LON), Number(POS_LAT)]))
			});
			layerManager.getLayer("coordMap_vector").layer.getSource().addFeature(feature);
			
			coordintate = funcMapToDataPos(layerManager.getLayer("coordMap_vector").layer.getSource().getFeatures()[0].getGeometry().getCoordinates());
			geometry = coordintate;
		}else{
			//영역 입력 이벤트
			addInteractions();
		}
		
		if (NMPA_CODE!="") {
			var patrolAreaLayer = new ol.layer.Tile({
				source : new ol.source.TileWMS({
					urls : mpcGeoServerURL,
					params : {
						LAYERS : 'mpc:tpm_level_zone',
						CQL_FILTER : "nmpa_ofe_code='"+NMPA_CODE+"'"
					},
					crossOrigin : 'anonymous'
				}),
				opacity : 0.7,
				zIndex : 1,
				visible : true
			});
			
			layerManager.addLayer({
				name : "patrolAreaLayer",
				visible : true,
				layer : patrolAreaLayer
			});
		}
	}
});

function funcMapToWGS(position){
	var array = [];
	for (var i = 0; i < position[0].length; i++) {
		array.push(funcMapToDataPos(position[0][i]));
	}
	return array; 
}

function funcWGSToMap(position){
	var array = [];
	for (var i = 0; i < position[0].length; i++) {
		array.push(funcMapToDataPos(position[0][i]));
	}
	return array; 
}

function resetFeature(){
	map.removeInteraction(draw);
    map.removeInteraction(snap);
    layerManager.getLayer("coordMap_vector").layer.getSource().clear();
    geometry=null;
//    addInteractions();
    
    var feature = new ol.Feature({
		  geometry: new ol.geom.Point(funcDataToMapPos([Number(POS_LON), Number(POS_LAT)]))
	});
	layerManager.getLayer("coordMap_vector").layer.getSource().addFeature(feature);
	
	coordintate = funcMapToDataPos(layerManager.getLayer("coordMap_vector").layer.getSource().getFeatures()[0].getGeometry().getCoordinates());
}

function addInteractions() {
    draw = new ol.interaction.Draw({
    	source: layerManager.getLayer("coordMap_vector").layer.getSource(),
      	type: typeSelect
    });
    
    map.addInteraction(draw);
    snap = new ol.interaction.Snap({source: layerManager.getLayer("coordMap_vector").layer.getSource()});
    map.addInteraction(snap);
    
    draw.on('drawend', function(evt){
    	
    	if ((typeSelect == 'Polygon' && layerManager.getLayer("coordMap_vector").layer.getSource().getFeatures().length == 0)&& $("#popupPolygonPosition").dxPopup('instance').option("visible")) {
			map.removeInteraction(draw);
        	map.removeInteraction(snap);
//        	geometry = funcMapToWGS(evt.feature.getGeometry().getCoordinates());
        	
//        	for (var i = 0; i < geometry.length-1; i++) {
//				geometry_convert.push({
//					"latD" : funcDegressToDMS(geometry[i][1]).d,
//					"latM" : funcDegressToDMS(geometry[i][1]).m,
//					"latS" : funcDegressToDMS(geometry[i][1]).s.toFixed(2),
//					
//					"lonD" : funcDegressToDMS(geometry[i][0]).d,
//					"lonM" : funcDegressToDMS(geometry[i][0]).m,
//					"lonS" : funcDegressToDMS(geometry[i][0]).s.toFixed(2),
//					
//				});
//			}
        	
//        	positionPolygonGrid.dxDataGrid('instance').option("dataSource", geometry_convert);
        	
		}else if((typeSelect == 'Point')&& $("#popupPointPosition").dxPopup('instance').option("visible")){
			map.removeInteraction(draw);
        	map.removeInteraction(snap);
        	geometry = funcMapToDataPos(evt.feature.getGeometry().getCoordinates());
        	
        	var lon = funcDegressToDMS(geometry[0]);
        	var lat = funcDegressToDMS(geometry[1]);
        	
        	inputLat.dxForm("instance").getEditor("inputLatDo").option("value", lat.d);
        	inputLat.dxForm("instance").getEditor("inputLatBun").option("value", lat.m);
        	inputLat.dxForm("instance").getEditor("inputLatCho").option("value", lat.s);
        	
        	inputLon.dxForm("instance").getEditor("inputLonDo").option("value", lon.d);
        	inputLon.dxForm("instance").getEditor("inputLonBun").option("value", lon.m);
        	inputLon.dxForm("instance").getEditor("inputLonCho").option("value", lon.s);
		}
    });
}

function updatePoint(){
	var subPointInputLon ={d:0,m:0,s:0};	//포인트 위도 도분초 변수
	var subPointInputLat ={d:0,m:0,s:0};	//포인트 경도 도분초 변수
	
	subPointInputLon.d = inputLon.dxForm("instance").getEditor("inputLonDo").option("value");
	subPointInputLon.m = inputLon.dxForm("instance").getEditor("inputLonBun").option("value");
	subPointInputLon.s = inputLon.dxForm("instance").getEditor("inputLonCho").option("value");
	subPointInputLat.d = inputLat.dxForm("instance").getEditor("inputLatDo").option("value");
	subPointInputLat.m = inputLat.dxForm("instance").getEditor("inputLatBun").option("value");
	subPointInputLat.s = inputLat.dxForm("instance").getEditor("inputLatCho").option("value");
	
	geometry[0] = funcDMSToDegress(subPointInputLon);
	geometry[1] = funcDMSToDegress(subPointInputLat);
	
	layerManager.getLayer("coordMap_vector").layer.getSource().getFeatures()[0].getGeometry().setCoordinates(funcDataToMapPos(geometry));
	map.getView().setCenter(funcDataToMapPos(geometry));
} 

$(function () {
	if (typeSelect == 'Point') {
		$("#popupPointPosition").dxPopup({
			height: 140,
	        width: 350,
	        dragEnabled: true,
	        resizeEnabled: false,
	        showCloseButton: false,
	        showTitle: true,
	        visible: true,
	        shading : false,
	        position: { at:'right', offset:'-500 0'},
	        title: "위치수정",
	        onShown : function (){
	        	var lon = funcDegressToDMS(coordintate[0]);
	        	var lat = funcDegressToDMS(coordintate[1]);
	        	
	        	inputLat.dxForm("instance").getEditor("inputLatDo").option("value", lat.d);
	        	inputLat.dxForm("instance").getEditor("inputLatBun").option("value", lat.m);
	        	inputLat.dxForm("instance").getEditor("inputLatCho").option("value", lat.s);
	        	
	        	inputLon.dxForm("instance").getEditor("inputLonDo").option("value", lon.d);
	        	inputLon.dxForm("instance").getEditor("inputLonBun").option("value", lon.m);
	        	inputLon.dxForm("instance").getEditor("inputLonCho").option("value", lon.s);
	        },
	        contentTemplate : function (contentElement) {
	        	positionPointForm = $("<div>").dxForm({
	                visible: true,
	                width:350,
	                alignItemLabels : false,
	                items: [{
    					itemType: "group",
    					template: function (data, itemElement) {
    						$("<div>").dxForm({
    							items:[{
    								itemType: "simple",
    								label: {text: "위도", alignment:"right"},
    								template: function (data, itemElement) {
                						inputLat = $("<div>").dxForm({
                							width:300,
                							colCount : 6,
    	                        			showColonAfterLabel : false,
                							items:[{
                								itemType: "simple",
                								name : "inputLatDo",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min : -90,
    		                        				max : 90,
    		                        				format: "0#",
    		                        				onValueChanged : function (e){
    		                        					if (e.value == 90 || e.value == -90) {
    		                        						inputLat.dxForm("instance").getEditor("inputLatBun").option("value",0);
    		                        						inputLat.dxForm("instance").getEditor("inputLatCho").option("value",0);
														}
    		                        					if (e.value!=null) {
				                        					if (e.previousValue != e.value && e.previousValue != null) {
				                        						updatePoint();
															}
    		                        					}
    		                        				}
    		                        			}
                							},{
                            					itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>도</div>");
                            		            }
                            				},{
                								itemType: "simple",
                								name : "inputLatBun",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min : 0,
    		                        				max : 59,
    		                        				format: "0#",
    		                        				onValueChanged : function (e){
    		                        					var latdo = Number(inputLat.dxForm("instance").getEditor("inputLatDo").option("value"));
    		                        					if (latdo == 90||latdo == -90) {
    		                        						inputLat.dxForm("instance").getEditor("inputLatBun").option("value",0);
														}
    		                        					if (e.value!=null) {
    		                        						if (e.previousValue != e.value && e.previousValue != null) {
        		                        						updatePoint();
    														}
														}
    		                        					
    		                        				}
    		                        			}
                							},{
                								itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>분</div>");
                            		            }
                            				},{
                								itemType: "simple",
                								name : "inputLatCho",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min:0,
    		                        				max:59.99,
    		                        				format: "0#.##",
    		                        				onValueChanged : function (e){
    		                        					var latdo = Number(inputLat.dxForm("instance").getEditor("inputLatDo").option("value"));
    		                        					if (latdo == 90||latdo == -90) {
    		                        						inputLat.dxForm("instance").getEditor("inputLatCho").option("value",0);
														}
    		                        					if (e.value!=null) {
	    		                        					if (e.previousValue != e.value && e.previousValue != null) {
	    		                        						updatePoint();
															}
    		                        					}
    		                        				}
    		                        			}
                							},{
                								itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>초</div>");
                            		            }
                            				}]
                						}).appendTo(itemElement);
                		            }
    							}]
    						}).appendTo(itemElement);
    						
    						$("<div style='margin-top:5px;'>").dxForm({
    							items:[{
    								itemType: "simple",
    								label: {text: "경도", alignment:"right"},
    								template: function (data, itemElement) {
    									inputLon = $("<div>").dxForm({
                							width:300,
                							colCount : 6,
    	                        			showColonAfterLabel : false,
                							items:[{
                								itemType: "simple",
                								name : "inputLonDo",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min : -180,
    		                        				max : 180,
    		                        				format: "0#",
    		                        				onValueChanged : function (e){
    		                        					if (e.value == 180 || e.value == -180) {
    		                        						inputLon.dxForm("instance").getEditor("inputLonBun").option("value",0);
    		                        						inputLon.dxForm("instance").getEditor("inputLonCho").option("value",0);
														}
    		                        					if (e.value!=null) {
	    		                        					if (e.previousValue != e.value && e.previousValue != null) {
	    		                        						updatePoint();
															}
    		                        					}
    		                        				}
    		                        			}
                							},{
                								itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>도</div>");
                            		            }
                            				},{
                								itemType: "simple",
                								name : "inputLonBun",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min : 0,
    		                        				max : 59,
    		                        				format: "0#",
    		                        				onValueChanged : function (e){
    		                        					var londo = Number(inputLon.dxForm("instance").getEditor("inputLonDo").option("value"));
    		                        					if (londo == 180||londo == -180) {
    		                        						inputLon.dxForm("instance").getEditor("inputLonBun").option("value",0);
														}
    		                        					if (e.value!=null) {
	    		                        					if (e.previousValue != e.value && e.previousValue != null) {
	    		                        						updatePoint();
															}
    		                        					}
    		                        				}
    		                        			}
                							},{
                								itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>분</div>");
                            		            }
                            				},{
                								itemType: "simple",
                								name : "inputLonCho",
    		                        			editorType : "dxNumberBox",
    		                        			editorOptions : {
    		                        				showSpinButtons : true,
    		                        				mode:"number",
    		                        				width:70,
    		                        				min :0,
    		                        				max:59.99,
    		                        				format: "0#.##",
    		                        				onValueChanged : function (e){
    		                        					var londo = Number(inputLon.dxForm("instance").getEditor("inputLonDo").option("value"));
    		                        					if (londo == 180||londo == -180) {
    		                        						inputLon.dxForm("instance").getEditor("inputLonCho").option("value",0);
														}
    		                        					if (e.value!=null) {
	    		                        					if (e.previousValue != e.value && e.previousValue != null) {
	    		                        						updatePoint();
															}
    		                        					}
    		                        				}
    		                        			}
                							},{
                								itemType: "simple",
                            					template: function (data, itemElement) {
                                        			itemElement.append("<div style='margin-top:5px; margin-left:25px;'>초</div>");
                            		            }
                            				}]
                						}).appendTo(itemElement);
    								}
    							}]
    						}).appendTo(itemElement);
    		            }
    				}]
	        	}).appendTo(contentElement);
	        	
	        	$("<div style='margin-top:5px; float:right;'>").dxForm({
	                width:200,
	                colCount:2,
	        		items :[{
	        			name : "drawClear",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "다시선택",
	        				width : 90,
	        				onClick : function(e){
	        					resetFeature();
	    				    	
	        					var lon = funcDegressToDMS(coordintate[0]);
	        		        	var lat = funcDegressToDMS(coordintate[1]);
	        		        	
	        		        	inputLat.dxForm("instance").getEditor("inputLatDo").option("value", lat.d);
	        		        	inputLat.dxForm("instance").getEditor("inputLatBun").option("value", lat.m);
	        		        	inputLat.dxForm("instance").getEditor("inputLatCho").option("value", lat.s);
	        		        	
	        		        	inputLon.dxForm("instance").getEditor("inputLonDo").option("value", lon.d);
	        		        	inputLon.dxForm("instance").getEditor("inputLonBun").option("value", lon.m);
	        		        	inputLon.dxForm("instance").getEditor("inputLonCho").option("value", lon.s);
	    				        
	        				}
	        			}
	        		},{
	        			name : "submitPosition",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "입력",
	        				width : 90,
	        				onClick : function(e){
	        					
	        				}
	        			}
	        		}]
	        	}).appendTo(contentElement);
	        }
		});
	}else{
		$("#popupPolygonPosition").dxPopup({
			height: 350,
	        width: 450,
	        dragEnabled: true,
	        resizeEnabled: false,
	        showCloseButton: true,
	        showTitle: true,
	        visible: true,
	        shading : false,
	        position: { at:'right', offset:'-300 0'},
	        title: "순찰구역 등록",
	        titleTemplate : function(titleElement) {
	    		createTitle(titleElement,"순찰구역 등록","popupPolygonPosition");
	        },
	        contentTemplate : function (contentElement) {
	        	positionPolygonGrid = $("<div>").dxDataGrid({
                    width: 420,
                    height: 275,
                    paging: {enabled: false},
                    noDataText: '데이터 없음',
                    showBorders : true,
                    pager: {
                        infoText: "Page {0} of {1}",
                        showInfo: false,
                        showNavigationButtons: false,
                        showPageSizeSelector: false,
                        visible: true
                    },
                    paging: {
                        enabled: false,
                        pageIndex: 0,
                        pageSize: 8
                    },
                    editing: {
                        mode: "row",
                        allowAdding: false,
                        allowUpdating: true,
                        texts: {
                            cancelAllChanges: "전체취소",
                            cancelRowChanges: "취소",
                            editRow: "편집",
                            saveRowChanges: "적용",
                            deleteRow: "삭제",
                            confirmDeleteMessage: "정말 삭제 하시겠습니까?",
                        }
                    },
                    selection: {
                        mode: "single"
                    },
                    onSelectionChanged: function (data) {
                        // deleteButton.option("disabled", !data.selectedRowsData.length)
                    },
                    columns: [
                        {
                        	caption: '번호',
    	                    alignment: "center",
    	                    width: 60,
    	                    allowSorting: true,
    	                    allowEditing: false,
    	                    cellTemplate: function(cellElement, cellInfo) {
    	                        cellElement.text(cellInfo.row.rowIndex+1);
    	                    }
                        },
                        {
                        	dataField: "style_.text_.text_",
//                        	dataField: "style_[0].text_.text_",
                            alignment: "center",
                            caption: "구역명"
                        },
//                        {
//                            dataField: "",
//                            alignment: "center",
//                            caption: "면적"
//                        }
//                        {
//                        	caption: '번호',
//    	                    alignment: "center",
//    	                    width: 60,
//    	                    allowSorting: true,
//    	                    allowEditing: false,
//    	                    cellTemplate: function(cellElement, cellInfo) {
//    	                        cellElement.text(cellInfo.row.rowIndex+1);
//    	                    }
//                        },
//                        {
//                            dataField: "latD",
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "위도(도)",
//                            validationRules: [{type: "required", message: "위도(도) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "위도(도)가 잘 못 되었습니다. ",
//                                pattern: /^(\+|-)?(?:90|(?:[0-9]|[1-8][0-9]))$/i
//                            }]
//                        },
//                        {
//                            dataField: "latM",
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "위도(분)",
//                            validationRules: [{type: "required", message: "위도(분) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "위도(분)가 잘 못 되었습니다. ex) ",
//                                pattern: /^(?:60|(?:[0-9]|[1-5][0-9]))$/i
//                            }]
//                        },
//                        {
//                            dataField: "latS",
//                            width: 105,
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "위도(초)",
//                            validationRules: [{type: "required", message: "위도(초) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "위도(초)가 잘 못 되었습니다. ",
//                                pattern: /^(?:60(?:(?:\.0{1,20})?)|(?:[0-9]|[1-5][0-9])(?:(?:\.[0-9]{1,20})?))$/i
//                            }]
//                        },
//                        {
//                            dataField: "lonD",
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "경도(도)",
//                            validationRules: [{type: "required", message: "경도(도) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "경도(도)가 잘 못 되었습니다.",
//                                pattern: /^(\+|-)?(?:180|(?:[0-9]|[1-9][0-9]|1[0-7][0-9]))$/i
//                            }]
//                        },
//                        {
//                            dataField: "lonM",
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "경도(분)",
//                            validationRules: [{type: "required", message: "경도(분) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "경도(분)가 잘 못 되었습니다.",
//                                pattern: /^(?:60|(?:[0-9]|[1-5][0-9]))$/i
//                            }]
//                        },
//                        {
//                            dataField: "lonS",
//                            width: 105,
//                            dataType: "number",
//                            alignment: "center",
//                            caption: "경도(초)",
//                            validationRules: [{type: "required", message: "경도(초) 값은 필수 값 입니다."}, {
//                                type: "pattern",
//                                message: "경도(초)가 잘 못 되었습니다.",
//                                pattern: /^(?:60(?:(?:\.0{1,20})?)|(?:[0-9]|[1-5][0-9])(?:(?:\.[0-9]{1,20})?))$/i
//                            }]
//                        }
                    ],
                    dataSource: [],
                    onRowClick : function(e) {
//                    	console.log(e.data);
//                    	e.data.setStyle(selectStyle);
                    },
                    onRowInserted: function (e) {
                    	
                    },
                    onRowInserting: function (e) {

                    },
                    onRowUpdated: function (e) {
                    	layerManager.getLayer("areaMap").layer.changed();
                    },
                    onRowUpdating: function (e) {

                    },
                    onRowRemoved: function (e) {
                    	
                    }
                }).appendTo(contentElement);
	        	
//	        	positionPolygonGrid = $("<div>").dxDataGrid({
//	        		height: 300,
//	        		width:260,
//	        		dataSource :[],
//	        		showBorders: true,
//	        		noDataText: '데이터 없음',
//	        		rowAlternationEnabled: true,
//	        		allowColumnResizing: false,
//	        		scrolling: {
//	        			mode: "stantard",
//	                    preloadEnabled: false,
//	                    scrollByContent: true,
//	                    scrollByThumb: true,
//	                    useNative: "auto",
//	                    showScrollbar: "always"
//	                       
//	        		},
//	        		editing: {
//	                    mode: "cell",
//	                    allowUpdating: true,
//	                    texts: {
//	                        cancelAllChanges: "전체취소",
//	                        cancelRowChanges: "취소",
//	                        editRow: "편집",
//	                        saveRowChanges: "적용"
//	                    }
//	                }, 
//	                onRowUpdated: function(e){
//						var updateCoord = [funcWGSToMap([geometry])];
//						coordMap_source.getFeatures()[0].getGeometry().setCoordinates(updateCoord);
//	                },
//	        		loadPanel: {
//	        			enabled: true,
//	        			height: 70,
//	                    indicatorSrc: "",
//	                    showIndicator: true,
//	                    showPane: false,
//	                    text: "",
//	                    visible: true,
//	                    width: 100
//	                    
//	        		},
//	        		paging: {enabled: true, pageSize: 20},
//	        		pager: {
//	        			infoText: "페이지 {0}/{1} ({2}개)",
//	                    showInfo: true,
//	                    showNavigationButtons: true,
//	                    visible: true,
//	                    allowPageSizes: true
//	                       
//	        		},
//	        		selection: {
//	        			mode: "single",
//	        			width: 30
//	                },
//	                onSelectionChanged: function (selectedItems) {
//	                	
//	                },
//	                onRowClick: function (e) {
//	                	
//	                },
//	                columns: [{
//	                    caption: '번호',
//	                    width : "40px",
//	                    alignment: "center",
//	                    allowSorting: true,
//	                    allowEditing: false,
//	                    cellTemplate: function(cellElement, cellInfo) {
//	                        cellElement.text(cellInfo.row.rowIndex+1);
//	                    }
//	                },{
//	                    caption: "위도",
//	                    dataField: "1",
//	                    alignment: "center",
//	                    allowSorting: false,
//	                    calculateDisplayValue : function(rowData){
//	                    	return formatLat(rowData[1],true);
//	                    },
//	                    calculateCellValue : function(cellData){
//	                    	return Number(cellData[1].toFixed(5));
//	                    }
//	                },{
//	                    caption: "경도",
//	                    dataField: "0",
//	                    alignment: "center",
//	                    allowSorting: false,
//	                    calculateDisplayValue : function(rowData){
//	                    	return formatLon(rowData[0],true);
//	                    },
//	                    calculateCellValue : function(cellData){
//	                    	return Number(cellData[0].toFixed(5));
//	                    }
//	                    
//	                }]
//	                
//	        	}).appendTo(contentElement);
//	        	
	        	controllForm = $("<div style='float:right'>").dxForm({
	                width:350,
	                colCount:4,
	        		items :[{
	        			name : "delete",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "삭제",
	        				width : 80,
	        				onClick : function(e){
	        					if (positionPolygonGrid.dxDataGrid('instance').getSelectedRowsData()[0] != null) {
	        						layerManager.getLayer("areaMap").layer.getSource().removeFeature(positionPolygonGrid.dxDataGrid('instance').getSelectedRowsData()[0]);
	        						layerManager.removeLayer("areaPointsLayer_"+positionPolygonGrid.dxDataGrid('instance').getSelectedRowsData()[0].ol_uid);
	        						
		        					positionPolygonGrid.dxDataGrid('instance').option("dataSource", layerManager.getLayer("areaMap").layer.getSource().getFeatures());
		        					positionPolygonGrid.dxDataGrid('instance').refresh();
		        					
		        					if (layerManager.getLayer("areaMap").layer.getSource().getFeatures().length==0) {
		        						controllForm.dxForm("instance").getEditor("submitPosition").option("disabled", true);
									}
								}else{
									DevExpress.ui.notify("삭제할 순찰구역을 선택해 주십시오.", "warning", 1500);
								}
	        				}
	        			}
	        		},{
	        			name : "add",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "추가",
	        				width : 80,
	        				onClick : function(e){
	        					var drawFeature = layerManager.getLayer("coordMap_vector").layer.getSource().getFeatures();
	        					
	        					if (drawFeature.length>0) {
	        						
	        						var geomPoints = drawFeature[0].getGeometry().getCoordinates()[0];
	        						var source = new ol.source.Vector();
	        						
	        						for (var i = 0; i < geomPoints.length; i++) {
	        							if (i==geomPoints.length-1) {					//마지막 포인트 라벨 표출 안되도록 break
											break;
										}
		        						var feature = new ol.Feature();
	        							var point = new ol.geom.Point(geomPoints[i]);
		        						
		        						var style = new ol.style.Style({
		        							text: new ol.style.Text({
		        								text: (i+1).toString(),
		        								scale:2,
		        								textAlign : 'right'
		        							}),
		        							image: new ol.style.Circle({
		        								radius: 3,
		        								fill: new ol.style.Fill({
		        									color: 'red'
		        								})
		        							})
		        						});
		        						
		        						feature.setGeometry(point);
		        						feature.setStyle(style);
		        						source.addFeature(feature);
									}
		        					
		        					var areaPointsLayer = new ol.layer.Vector({
		        						source : source
		        					});
		        					
		        					layerManager.addLayer({name:"areaPointsLayer_"+drawFeature[0].ol_uid, visible: true, layer:areaPointsLayer});
		        					
	        						var styles = 
//	        							[
						              new ol.style.Style({
						            	  text: new ol.style.Text({
						            		  text: "구역_"+count,
						            		  scale:3,
						            		  textAlign : 'center'
						            	  }),
						            	  fill: new ol.style.Fill({
						            		  color: '#00FFFF'
						            	  }),
						            	  stroke: new ol.style.Stroke({
						            		  color: '#000000',
						            		  width: 2
						            	  })
						              })
//						              ,new ol.style.Style({
//						            	  text: new ol.style.Text({
//						            		  text: "",
//						            		  scale:3,
//						            		  textAlign : 'center'
//						            	  }),
//						            	  image: new ol.style.Circle({
//						            		  radius: 3,
//						            		  fill: new ol.style.Fill({
//						            			  color: 'red'
//						            		  })
//						            	  }),
//						            	  geometry: function(feature) {
//						            		  var coordinates = drawFeature[0].getGeometry().getCoordinates()[0];
//						            		  return new ol.geom.MultiPoint(coordinates);
//						            	  }
//						              })
//						            ]
	        						;
						
		        					drawFeature[0].setId("구역_"+count);
		        					count++;
		        					drawFeature[0].setStyle(styles);
		        					layerManager.getLayer("areaMap").layer.getSource().addFeatures(drawFeature);
		        					
		        					if (!layerManager.getLayerVisible("areaMap")) {
		        						layerManager.setLayerVisible("areaMap", true);
									}
		        					
		        					layerManager.getLayer("coordMap_vector").layer.getSource().clear();
		        					positionPolygonGrid.dxDataGrid('instance').option("dataSource", layerManager.getLayer("areaMap").layer.getSource().getFeatures());
		        					addInteractions();
		        					controllForm.dxForm("instance").getEditor("submitPosition").option("disabled", false);
								}else{
									DevExpress.ui.notify("순찰구역을 지정해 주십시오.", "warning", 1500);
								}
	        				}
	        			}
	        		},{
	        			name : "drawClear",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "초기화",
	        				width : 80,
	        				onClick : function(e){
	        					map.removeInteraction(draw);
	    				        map.removeInteraction(snap);
	    				        layerManager.getLayer("coordMap_vector").layer.getSource().clear();
	    				        geometry_convert=[];
	    				        geometry = null;
	    				        addInteractions();
	        				}
	        			}
	        		},{
	        			name : "submitPosition",
	        			editorType : "dxButton",
	        			editorOptions : {
	        				text : "전송",
	        				width : 80,
	        				disabled : true,
	        				onClick : function(e){
	        					var sendPosition=[];
	        					var position=[];
	        					var feature = layerManager.getLayer("areaMap").layer.getSource().getFeatures();
	        					for (var i = 0; i < feature.length; i++) {
	        						var points = feature[i].getGeometry().getCoordinates()[0];
	        						for (var j = 0; j < points.length; j++) {
	        							var latC = funcDegressToDMS(funcMapToDataPos(points[j])[1]);
	        							var lonC = funcDegressToDMS(funcMapToDataPos(points[j])[0]);
	        							position.push({
//	        								label : feature[i].getStyle()[0].getText().getText(),
		        							label : feature[i].getStyle().getText().getText(),
		        							slnum : j,
		        							lat_do : latC.d,
		        							lat_min : latC.m,
		        							lat_sec : latC.s,
		        							lon_do : lonC.d,
		        							lon_min : lonC.m,
		        							lon_sec : lonC.s
		        						});
									}
	        						sendPosition.push(position);
	        						position=[];
								}
	//	        					 $.ajax({
	//	        			        type: 'POST',
	////	        			        url: WEB_ROOT_URL+'/recivedDataTest.do',
	//	        			        url: recURL,
	//	        			        data :{
	//	        			        	"accBeginPoint" : funcMapToDataPos(accPointLayer.getSource().getFeatures()[0].getGeometry().getCoordinates()),		//사고 시작위치 좌표
	//	        			        	"accEndPoint" : funcMapToDataPos(accPointLayer.getSource().getFeatures()[1].getGeometry().getCoordinates()),		//사고 종료위치 좌표
	//	        			        	"accBeginId" : accPointMap.get(0).id,
	//	        			        	"accEndId" : accPointMap.get(1).id,
	//	        			        	"preSCATIdArray" : prescatMap.keys()
	//	        			        },
	//	        			        traditional : true,
	//	        			        dataType: "json",
	//	        			        success: function (data) {
	//	        			        	window.close();
	//	        			        },
	//	        			        error: function (request, status, error) {
	//	        			            DevExpress.ui.notify("데이터 통신중 오류가 발생하였습니다..", "error", 1500);
	//	        			        }
	//	        			    });
	        					
		        				var dataJson = JSON.stringify(sendPosition);
		        				dataJson = dataJson.replace(/\"/gi,"\\");
		        				
		        				var $form = $('<form></form>');
		        			    $form.attr('action', recURL);
		        			    $form.attr('method', 'post');
		        			    $form.appendTo('body');
		        			    
		        				var idx = $('<input name="sendPosition" type="hidden" value="'+dataJson+'">');
//		        			    var accEndPoint = $('<input name="accEndPoint" type="hidden" value="'+edPoint+'">');
//		        			    var accBeginId = $('<input name="accBeginId" type="hidden" value="'+accPointMap.get(0).id+'">');
//		        			    var accEndId = $('<input name="accEndId" type="hidden" value="'+accPointMap.get(1).id+'">');
//		        			    var preSCATIdArray = $('<input name="preSCATIdArray" type="hidden" value="'+prescatMap.keys()+'">');
		        			    
		        			    $form.append(idx);
//		        			    .append(accEndPoint).append(accBeginId).append(accEndId).append(preSCATIdArray);
		        			    $form.submit();
	        				}
	        			}
	        		}]
	        	}).appendTo(contentElement);
	        }
		});
	}
});
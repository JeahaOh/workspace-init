package com.koem.vms.area.controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.koem.vms.area.dto.AreaDTO;
import com.koem.vms.area.service.AreaService;
import com.koem.vms.track.service.TrackService;

@Controller
public class AreaController {

  // 바다누리 해양정보 서비스 API 키 (sihus)
  private static final String serviceKey = "vkoF2elKs70tKbEFm0jGqQ==";

  @Autowired
  private AreaService service;

  @Autowired
  private TrackService trackService;

  @RequestMapping(value = "/insertObj.do", method = RequestMethod.POST)
  @ResponseBody
  public String insertObj(HttpServletRequest req, HttpServletResponse res) throws Exception {

    String serviceUrl =
        "http://www.khoa.go.kr/oceangrid/grid/api/ObsServiceObj/search.do?ServiceKey=" + serviceKey
            + "&ResultType=json";
    JSONObject obj = new JSONObject();

    String result = "";

    try {
      URL url = new URL(serviceUrl);
      HttpURLConnection conn = (HttpURLConnection) url.openConnection();
      System.out.println(conn.getResponseCode());

      if (conn.getResponseCode() == 200) {
        System.out.println("접속 성공");

      } else {
        System.out.println("접속 실패");
      }

      BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
      StringBuilder sb = new StringBuilder();
      String line;

      while ((line = br.readLine()) != null) {
        sb.append(line);
      }

      br.close();
      conn.disconnect();
      result = sb.toString();

    } catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  @RequestMapping(value = "/selectArea.do", method = RequestMethod.GET,
      produces = "application/json;charset=UTF-8")
  @ResponseBody
  public String selectAreaList(HttpServletRequest req, HttpServletResponse res) throws Exception {
    List<Map<String, Object>> result = service.selectAreaAll();

    JSONObject jsonObject = new JSONObject();

    jsonObject.put("result", result);


    return jsonObject.toString();
  }

  @RequestMapping(value = "/insertArea.do", method = RequestMethod.POST,
      produces = "application/json;charset=UTF-8")
  @ResponseBody
  public String insertArea(HttpServletRequest req, HttpServletResponse res, AreaDTO dto)
      throws Exception {
    String message = "";
    int result = service.insertArea(dto);

    if (result > 0) {
      message = "성공적으로 등록 되었습니다";
    } else {
      message = "등록 오류";
    }
    return message;
  }

  @RequestMapping(value = "/insertPort.do", method = RequestMethod.POST,
      produces = "application/json;charset=UTF-8")
  @ResponseBody
  public String insertPort(HttpServletRequest req, HttpServletResponse res, AreaDTO dto)
      throws Exception {
    String message = "";
    int result = service.insertPort(dto);

    if (result > 0) {
      message = "성공적으로 등록 되었습니다";
    } else {
      message = "등록 오류";
    }
    return message;
  }


  @RequestMapping(value = "/createObj.do", method = RequestMethod.POST,
      produces = "application/json;charset=UTF-8")
  @ResponseBody
  public HashMap<String,String> createObject(HttpServletRequest req, HttpServletResponse res,
      @RequestParam(value = "wkt") String wkt,
      @RequestParam(value = "id") String id,
      @RequestParam(value = "name") String name,
      @RequestParam(value = "type") String type,
      @RequestParam(value = "createDate") String createDate,
      @RequestParam(value = "creator") String creator
  ) throws Exception {
    System.out.println(new Date() + "\n");
    HashMap<String, String> result = new HashMap<String, String>();
    
    //  --> 데이터 처리정 특수문자가 포함 되어 있는지 확인하기 (_ 제외)
    Boolean valid = true;
    String where = "";
    Pattern ptn = Pattern.compile("\\w");
    Matcher mtchr;
    
    wkt = wkt.trim();
    id = id.trim();
    name = name.trim();
    type = type.trim();
    createDate = createDate.trim();
    creator = creator.trim();
    
    mtchr = ptn.matcher(wkt);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "wkt";
    
    mtchr = ptn.matcher(id);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "id";
    
    mtchr = ptn.matcher(name);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "name";
    
    mtchr = ptn.matcher(type);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "type";
    
    mtchr = ptn.matcher(createDate);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "createDate";
    
    mtchr = ptn.matcher(creator);
    valid = valid ? (mtchr.find() ? true : false) : valid;
    where = "creator";
    
    System.out.println(name);
    if( name.toLowerCase().contains("reject")) valid = false;
    
    if( !valid ) {
      result.put("id", id);
      result.put("result", "validation problem");
      result.put("where", where);
      System.out.println(result.toString());
      return result;
    }
    //  <--- 유효성 검사
    
    //  ---> 이곳에서 DB로 보내준다.
    //  <--- 이곳에서 DB로 보내준다.
    
    
    

    System.out.println(wkt);
    result.put("id", id);
    result.put("result", "success");
    System.out.println(result.toString());
    return result;
  }

}

package egovframework.mng.menu.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import egovframework.com.cmmn.EgovMessageSource;
import egovframework.com.cmmn.LoginVO;
import egovframework.mng.menu.service.MenuService;
import egovframework.mng.menu.vo.MenuVO;

@Controller
@RequestMapping(value = "/menu")
public class MenuTmplController {

  @Resource(name = "egovMessageSource")
  EgovMessageSource egovMessageSource;

  @Resource(name = "menuService")
  private MenuService menuService;

  public static final int KEY_SIZE = 1024;

  Logger logger = LoggerFactory.getLogger(this.getClass());

  /**
   * 메뉴 상단 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/header"
   * @exception Exception
   */
  @SuppressWarnings("unchecked")
  @RequestMapping(value = "/header.do")
  public String header(@ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request)
      throws Exception {
    logger.debug(
        "\n\t HEADER PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    logger.info("현재 접근한 메뉴 : {}", vo.getMenuCode());
    // 로그인 사용자 권한 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }


    // 로그인 사용자 권한 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    // 메뉴 조회 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // header menu original logic
//    List<MenuVO> gnbMenu = null;
//    if (vo.getMenuCode().length() == 0) {
//      vo.setUpperMenuCode("MNU00001");
//    } else {
//      vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
//    }
//    gnbMenu = menuService.getGnbSelectMenu(vo);
//    model.addAttribute("gnbMenu", gnbMenu);

    // menulist session 저장.
    List<MenuVO> gnbMenu = (List<MenuVO>) session.getAttribute("gnbMenu");
    //List<EgovMap> accessableMenuList = loginVO.getAccessableMenuList();
    
    if (gnbMenu == null || gnbMenu.isEmpty() || gnbMenu.size() == 0) {
      logger.info(">>>>>>>>>>> !! LOGIN VO HAS NO GNB MENUS !! <<<<<<<<<<<");
      if (vo.getMenuCode().length() == 0) {
        vo.setUpperMenuCode("MNU00001");
      } else {
        vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
      }
      
      gnbMenu = menuService.getGnbSelectMenu(vo);
//      if(loginVO.getAuthorGroupCode().contains("AG01")) {
//        vo.setUpperMenuCode("ADM00001");
//        gnbMenu.addAll(menuService.getGnbSelectMenu(vo));
//      }
      session.setAttribute("gnbMenu", gnbMenu);
//      accessableMenuList = menuService.accessAuthListToMenuByAccount(loginVO.getUserId());
//      loginVO.setAccessableMenuList(accessableMenuList);
     
      //session.setAttribute("loginVO", loginVO);
    } else {
      logger.info(">>>>>>>>>>> LOGIN VO HAS GNB MENUS <<<<<<<<<<<");
    }
//     logger.info("menus >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
//     for( MenuVO menu : gnbMenu ) {
//       logger.info(menu.toString());
//     }
//     logger.info("menus <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
    logger.debug("menu length : {}", gnbMenu.size());

    /*
     * if(gnbMenu.size() > 0) { String leaf = "1"; for(int i=0; i<gnbMenu.size(); i++) {
     * if(gnbMenu.get(i).getLeaf().equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+1).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+1).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); } } } } }
     */
    model.addAttribute("gnbMenu", gnbMenu);
    // 메뉴 조회 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    // 접근 메뉴의 CRUD 권한 조회
    // logger.info(loginVO.toString());
    // try {
    // EgovMap accessAuth = null;
    // for( EgovMap auth : accessableMenuList ) {
    // if( auth.get("menuCode").equals(vo.getMenuCode()) ) {
    // accessAuth = auth;
    // break;
    // }
    // }
    //
    // if( accessAuth == null ) {
    // logger.error("\n\n\t\t!! ACCESS AUTH IS NULL !!\n\n");
    // } else {
    // logger.info("accessAuth : {}", accessAuth.toString());
    // }
    //
    // } catch (Exception e ) {
    // logger.error( e.getMessage() );
    // logger.error( e.getCause() + "" );
    // e.printStackTrace();
    // }


    /**
     * 모든 페이지에서 사용자 비밀번호를 변경 할 수 있도록 페이지 이동시 마다 rsa를 발행했지만, 비밀 번호 변경 페이지를 따로 구성하기로 하였음.
     * 일단 주석 처리. 
     */
    // RSA MODULE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//  KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
//  generator.initialize(KEY_SIZE);
//
//  KeyPair keyPair = generator.genKeyPair();
//  KeyFactory keyFactory = KeyFactory.getInstance("RSA");
//
//  PublicKey publicKey = keyPair.getPublic();
//  PrivateKey privateKey = keyPair.getPrivate();
//
//  // 세션에 공개키의 문자열을 키로하여 개인키를 저장한다.
//  session.setAttribute("__rsaPrivateKey__", privateKey);
//
//  // 공개키를 문자열로 변환하여 JavaScript RSA 라이브러리 넘겨준다.
//  RSAPublicKeySpec publicSpec =
//      (RSAPublicKeySpec) keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);
//
//  String publicKeyModulus = publicSpec.getModulus().toString(16);
//  String publicKeyExponent = publicSpec.getPublicExponent().toString(16);
//  logger.debug("----------------------------");
//  logger.debug("publicKeyModulus : " + publicKeyModulus);
//  logger.debug("publicKeyExponent : " + publicKeyExponent);
//  logger.debug("----------------------------");
//
//  model.addAttribute("publicKeyModulus", publicKeyModulus);
//  model.addAttribute("publicKeyExponent", publicKeyExponent);
//  session.setAttribute("publicKeyModulus", publicKeyModulus);
//  session.setAttribute("publicKeyExponent", publicKeyExponent);
    // RSA MODULE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    logger.debug(
        "\n\t HEADER PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/header";
  }
  
  
  
  
  
  /**
   * 메뉴 상단 목록 (리뉴얼 디자인 테스트)
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/header"
   * @exception Exception
   */
  @SuppressWarnings("unchecked")
  @RequestMapping(value = "/testHeader.do")
  public String testHeader(@ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request)
      throws Exception {
    logger.debug(
        "\n\t HEADER PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    logger.info("현재 접근한 메뉴 : {}", vo.getMenuCode());
    
    // 로그인 사용자 권한 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }
    // 로그인 사용자 권한 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    


    // 메뉴 조회 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // header menu original logic
//    List<MenuVO> gnbMenu = null;
//    if (vo.getMenuCode().length() == 0) {
//      vo.setUpperMenuCode("MNU00001");
//    } else {
//      vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
//    }
//    gnbMenu = menuService.getGnbSelectMenu(vo);
//    model.addAttribute("gnbMenu", gnbMenu);

    // menulist session 저장.
    List<MenuVO> gnbMenu = (List<MenuVO>) session.getAttribute("gnbMenu");
    //List<EgovMap> accessableMenuList = loginVO.getAccessableMenuList();
    
    if (gnbMenu == null || gnbMenu.isEmpty() || gnbMenu.size() == 0) {
      logger.info(">>>>>>>>>>> !! LOGIN VO HAS NO GNB MENUS !! <<<<<<<<<<<");
      if (vo.getMenuCode().length() == 0) {
        vo.setUpperMenuCode("MNU00001");
      } else {
        vo.setUpperMenuCode(vo.getMenuCode().substring(0, 3) + "00001");
      }
      
      gnbMenu = menuService.getGnbSelectMenu(vo);
//      if(loginVO.getAuthorGroupCode().contains("AG01")) {
//        vo.setUpperMenuCode("ADM00001");
//        gnbMenu.addAll(menuService.getGnbSelectMenu(vo));
//      }
      session.setAttribute("gnbMenu", gnbMenu);
//      accessableMenuList = menuService.accessAuthListToMenuByAccount(loginVO.getUserId());
//      loginVO.setAccessableMenuList(accessableMenuList);
     
      //session.setAttribute("loginVO", loginVO);
      logger.debug("menu length : {}", gnbMenu.size());
    } else {
      logger.debug(">>>>>>>>>>> LOGIN VO HAS GNB {} MENUS <<<<<<<<<<<", gnbMenu.size());
    }
    
    
//    
    /*
     * if(gnbMenu.size() > 0) { String leaf = "1"; for(int i=0; i<gnbMenu.size(); i++) {
     * if(gnbMenu.get(i).getLeaf().equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+1).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+1).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); if(leaf.equals("0")) {
     * gnbMenu.get(i).setMenuUrl(gnbMenu.get(i+2).getMenuUrl());
     * gnbMenu.get(i).setMenuCodeSub(gnbMenu.get(i+2).getMenuCode()); leaf =
     * gnbMenu.get(i+1).getLeaf(); } } } } }
     */
    model.addAttribute("gnbMenu", gnbMenu);
    // 메뉴 조회 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    
    
    
    
    

    /**
     * 모든 페이지에서 사용자 비밀번호를 변경 할 수 있도록 페이지 이동시 마다 rsa를 발행했지만, 비밀 번호 변경 페이지를 따로 구성하기로 하였음.
     * 일단 주석 처리. 
     */
    // RSA MODULE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//  KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
//  generator.initialize(KEY_SIZE);
//
//  KeyPair keyPair = generator.genKeyPair();
//  KeyFactory keyFactory = KeyFactory.getInstance("RSA");
//
//  PublicKey publicKey = keyPair.getPublic();
//  PrivateKey privateKey = keyPair.getPrivate();
//
//  // 세션에 공개키의 문자열을 키로하여 개인키를 저장한다.
//  session.setAttribute("__rsaPrivateKey__", privateKey);
//
//  // 공개키를 문자열로 변환하여 JavaScript RSA 라이브러리 넘겨준다.
//  RSAPublicKeySpec publicSpec =
//      (RSAPublicKeySpec) keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);
//
//  String publicKeyModulus = publicSpec.getModulus().toString(16);
//  String publicKeyExponent = publicSpec.getPublicExponent().toString(16);
//  logger.debug("----------------------------");
//  logger.debug("publicKeyModulus : " + publicKeyModulus);
//  logger.debug("publicKeyExponent : " + publicKeyExponent);
//  logger.debug("----------------------------");
//
//  model.addAttribute("publicKeyModulus", publicKeyModulus);
//  model.addAttribute("publicKeyExponent", publicKeyExponent);
//  session.setAttribute("publicKeyModulus", publicKeyModulus);
//  session.setAttribute("publicKeyExponent", publicKeyExponent);
    // RSA MODULE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    
    
    logger.debug(
        "\n\t HEADER PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/redesign_header";
  }
  
  
  

  /**
   * 메뉴 좌측 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/left"
   * @exception Exception
   */
  @RequestMapping(value = "/left.do")
  public String left(@ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request)
      throws Exception {
    logger.debug(
        "\n\t LEFT NAVIGATOR PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    // 로그인 사용자 권한
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    MenuVO menu = new MenuVO();
    String menuCode = vo.getMenuCode();

    // 메뉴 조회
    if (vo.getMenuCode().length() == 0) {
      vo.setMenuCode("MNU00002");
    }

    List<MenuVO> menuOn = menuService.menuOn(vo);
    if (menuOn.size() > 0) {
      menuCode = menuOn.get(0).getMenuCode();
      menu.setMenuCode(menuCode);
      menu.setAuthorGroupCode(vo.getAuthorGroupCode());

      if (menuOn.size() > 1) {
        model.addAttribute("menuCode", menuOn.get(1).getMenuCode());
        for (int i = 2; i < menuOn.size(); i++) {
          model.addAttribute("menuOn" + (i - 1), menuOn.get(i).getMenuCode());
        }
      }

      List<MenuVO> subMenu = menuService.getSubSelectMenu(menu);
      /*
       * if(subMenu.size() > 0) { for(int i=0;i<subMenu.size();i++) { MenuVO m =
       * (MenuVO)subMenu.get(i); if(m.getLeaf().equals("0")) { MenuVO _vo = new MenuVO();
       * _vo.setMenuCode(m.getMenuCode()); _vo.setAuthorGroupCode(vo.getAuthorGroupCode());
       * List<MenuVO> _subMenu = menuService.getSubSelectMenu(_vo); if(_subMenu.size() > 0) {
       * m.setMenuUrl(_subMenu.get(0).getMenuUrl());
       * m.setMenuCodeSub(_subMenu.get(0).getMenuCode());
       * if(m.getMenuCode().equals(m.getMenuCodeSub())) {
       * m.setMenuUrl(_subMenu.get(1).getMenuUrl());
       * m.setMenuCodeSub(_subMenu.get(1).getMenuCode()); }
       * 
       * _vo.setMenuCode(m.getMenuCodeSub()); List<MenuVO> __subMenu =
       * menuService.getSubSelectMenu(_vo); if(__subMenu.size() > 0) {
       * if(__subMenu.get(0).getLeaf().equals("0")) { m.setMenuUrl(__subMenu.get(1).getMenuUrl());
       * m.setMenuCodeSub(__subMenu.get(1).getMenuCode()); } } } } subMenu.set(i, m); } }
       */
      model.addAttribute("subMenu", subMenu);
    }

    model.addAttribute("menuOn", menuOn);

    logger.debug(
        "\n\t LEFT NAVIGATOR PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/left";
  }

  
  @SuppressWarnings("unchecked")
  @RequestMapping(value = "/middle.do")
  public String middleBar(
      @ModelAttribute("vo") MenuVO vo, ModelMap model, HttpServletRequest request ) throws Exception {
    logger.debug("CURRENT MENU CODE : {}", vo.getMenuCode());
    
    logger.debug(
        "\n\t MIDDLE NAVIGATOR START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    // 로그인 사용자 권한
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    MenuVO menu = new MenuVO();
    String menuCode = vo.getMenuCode();
    String menuLocationCode = "";
    List<MenuVO> subMenu = null;
    List<MenuVO> lvl2List = new ArrayList<>();
    List<MenuVO> lvl3List = new ArrayList<>();
    List<MenuVO> lvl4List = new ArrayList<>();
    List<MenuVO> lvl5List = new ArrayList<>();

    // 메뉴 조회
    if (vo.getMenuCode().length() == 0) {
      vo.setMenuCode("MNU00002");
    }

    List<MenuVO> menuOn = menuService.menuOn(vo);
    if (menuOn.size() > 0) {
      
      menuCode = menuOn.get(0).getMenuCode();
      menu.setMenuCode(menuCode);
      menu.setAuthorGroupCode(vo.getAuthorGroupCode());
      
      // 메뉴 title, location
      for (int i = 0; i < menuOn.size(); i++) {
        if (i == menuOn.size() - 1) {
          menuLocationCode += menuOn.get(i).getMenuCode();
        } else {
          menuLocationCode += menuOn.get(i).getMenuCode() + " , ";
        }
      }
      
      logger.debug("menuLocationCode : {}", menuLocationCode);

      for( MenuVO mn : menuOn ) {
        logger.debug("menu name : {}, lvl : {} -> {}", mn.getMenuNm(), mn.getLvl(), menuOn.size() - Integer.parseInt(mn.getLvl()));
        logger.debug("menuCode : {}, url : {}", mn.getMenuCode(), mn.getMenuUrl());
        //  curDepth_0 -> current depth index
        model.addAttribute("curDepth_" + (menuOn.size() - Integer.parseInt(mn.getLvl())), mn);
      }
      
      //subMenu = menuService.getSubSelectMenu(menu);
      List<MenuVO> gnbMenu = (List<MenuVO>) session.getAttribute("gnbMenu");

//      for( MenuVO mn : subMenu ) {
      for( MenuVO mn : gnbMenu ) {
        //logger.debug("menuLocationCode.contains(mn.getUpperMenuCode()) : {}", menuLocationCode.contains(mn.getUpperMenuCode()));
        if(menuLocationCode.contains(mn.getUpperMenuCode()) ) {
          switch(mn.getLvl()) {
            case "2" :
              lvl2List.add(mn);
              break;
            case "3" :
              lvl3List.add(mn);
              break;
            case "4" :
              lvl4List.add(mn);
              break;
            case "5" :
              lvl5List.add(mn);
              break;
          }
        }
      }
    }

    model.addAttribute("lvl2List", lvl2List);
    model.addAttribute("lvl3List", lvl3List);
    model.addAttribute("lvl4List", lvl4List);
    model.addAttribute("lvl5List", lvl5List);

    logger.debug(
        "\n\t MIDDLE NAVIGATOR END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    
    return "/menu/redesign_middle";
  }
  /**
   * 메뉴 좌측 목록
   * 
   * @param menuVO - vo MenuVO
   * @param model
   * @return "/menu/left"
   * @exception Exception
   */
  @RequestMapping(value = "/location.do")
  public String location(@ModelAttribute("vo") MenuVO vo, ModelMap model,
      HttpServletRequest request) throws Exception {

    logger.debug(
        "\n\t LOCATION PROGRESS START :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    logger.debug("MenuVO : {}", vo.toString());
    // 로그인 사용자 권한
    HttpSession session = request.getSession();
    LoginVO loginVO = (LoginVO) session.getAttribute("loginVO");
    if (loginVO != null) {
      vo.setUserId(loginVO.getUserId());
      if (StringUtils.isNotEmpty(loginVO.getAuthorGroupCode())) {
        vo.setAuthorGroupCode("'" + loginVO.getAuthorGroupCode().replaceAll(",", "','") + "'");
      } else {
        vo.setAuthorGroupCode("'AG99'");
      }
    } else {
      vo.setAuthorGroupCode("'AG99'");
    }

    MenuVO menu = new MenuVO();
    String menuCode = vo.getMenuCode();
    String menuLocation = "";
    String menuName = "";

    // 메뉴 조회
    if (vo.getMenuCode().length() == 0) {
      vo.setMenuCode("MNU00002");
    }

    List<MenuVO> menuOn = menuService.menuOn(vo);
    if (menuOn.size() > 0) {
      menuCode = menuOn.get(0).getMenuCode();
      menu.setMenuCode(menuCode);
      menu.setAuthorGroupCode(vo.getAuthorGroupCode());
      // 메뉴 title, location
      for (int i = 0; i < menuOn.size(); i++) {
        if (i == menuOn.size() - 1) {
          menuLocation += menuOn.get(i).getMenuNm();
          menuName = menuOn.get(i).getMenuNm();
        } else {
          menuLocation += menuOn.get(i).getMenuNm() + " &gt; ";
        }
      }
      for( MenuVO mn : menuOn ) {
        logger.debug("menu name : {}, lvl : {} -> {}", mn.getMenuNm(), mn.getLvl(), menuOn.size() - Integer.parseInt(mn.getLvl()));
        logger.debug("menuCode : {}, url : {}", mn.getMenuCode(), mn.getMenuUrl());
        model.addAttribute("location_node_" + (menuOn.size() - Integer.parseInt(mn.getLvl())), mn);
      }
    }
    
    logger.debug("menuName : {}, menuLocation : {}", menuName, menuLocation);
    model.addAttribute("menuName", menuName);
    model.addAttribute("menuLocation", menuLocation);

    logger.debug(
        "\n\t LOCATION PROGRESS END :: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");

    return "/menu/location";
  }
}

/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package egovframework.prvntn.fcltyCpctAcmslt.web;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springmodules.validation.commons.DefaultBeanValidator;
import egovframework.com.cmmn.LoginVO;
import egovframework.com.cmmn.service.EgovFileMngService;
import egovframework.com.cmmn.service.EgovFileMngUtil;
import egovframework.com.cmmn.util.EgovCommonUtil;
import egovframework.com.cmmn.util.EgovStringUtil;
import egovframework.com.cmmn.web.CmmnAbstractController;
import egovframework.prvntn.fcltyCpctAcmslt.service.fcltyCpctAcmsltService;
import egovframework.prvntn.fcltyCpctAcmslt.vo.fcltyCpctAcmsltCommonVo;
import egovframework.prvntn.fcltyCpctAcmslt.vo.fcltyCpctAcmsltSearchVo;
import egovframework.rte.psl.dataaccess.util.EgovMap;

@SuppressWarnings("deprecation")
@Controller
public class fcltyCpctAcmsltController extends CmmnAbstractController {
  @Resource(name = "EgovFileMngUtil")
  private EgovFileMngUtil fileUtil;

  @Resource(name = "EgovCommonUtil")
  private EgovCommonUtil EgovCommonUtil;

  @Resource(name = "EgovFileMngService")
  private EgovFileMngService fileMngService;

  @Resource(name = "fcltyCpctAcmsltService")
  private fcltyCpctAcmsltService fcltyCpctAcmsltService;

  @Resource(name = "beanValidator")
  protected DefaultBeanValidator beanValidator;

  // 오염예방 > 지도점검 > 시설실적관리 list
  //@RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltList.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltList.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltList.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltList.do")
  public String aqrmList(ModelMap model, HttpServletRequest request,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {

    // 해경서명 자동으로 표출
    LoginVO insttVO = (LoginVO) request.getSession().getAttribute("insttVO");
    if (insttVO != null) {
      if (fcltyCpctAcmsltSearchVo.getNmpaOfeCode() == null) {
        fcltyCpctAcmsltSearchVo.setSearchNmpaOfeCodeNm(insttVO.getUserInsttNM());
        fcltyCpctAcmsltSearchVo.setSearchLcltyGrcNm(insttVO.getUpInsttNM());
        fcltyCpctAcmsltSearchVo.setNmpaOfeCode(insttVO.getUserInsttCD());
      }
    }

    if (fcltyCpctAcmsltSearchVo.getRegistDtF() == null) {



      String toDate = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date());

      String fromDate = "";

      int year = Integer.parseInt(toDate.substring(0, 4));

      int month = Integer.parseInt(toDate.substring(5, 7));

      int date = Integer.parseInt(toDate.substring(8, 10));

      Calendar cal = Calendar.getInstance();

      cal.set(year, month - 1, date);

      cal.add(Calendar.DATE, -7); // 일주일 전

      SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");

      fromDate = dateFormatter.format(cal.getTime());

      fcltyCpctAcmsltSearchVo.setRegistDtF(fromDate);

      fcltyCpctAcmsltSearchVo.setRegistDtT(toDate);
    }

    if (!EgovStringUtil.ObjEmptyChk(fcltyCpctAcmsltSearchVo)) {
      model.addAttribute("fcltyCpctAcmsltSearchVo", fcltyCpctAcmsltSearchVo);
    } ;


    return "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltList";
  };

  //@RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltInsert.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltInsert.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltInsert.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltInsert.do")
  public String aqrmInsert(ModelMap model, HttpServletRequest request,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {

    LoginVO insttVO = (LoginVO) request.getSession().getAttribute("insttVO");
    if (insttVO != null) {
      fcltyCpctAcmsltSearchVo.setSearchNmpaOfeCodeNm(insttVO.getUserInsttNM());
      fcltyCpctAcmsltSearchVo.setSearchLcltyGrcNm(insttVO.getUpInsttNM());
      fcltyCpctAcmsltSearchVo.setNmpaOfeCode(insttVO.getUserInsttCD());
    }
    // 해경서 정보 session!
    request.getSession().setAttribute("fcltyCpctAcmsltSearchVoSession", fcltyCpctAcmsltSearchVo);
    return "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltWrite";
  };

  // 수정화면
  //@RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltUpdate.do")
  @SuppressWarnings("rawtypes")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltUpdate.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltUpdate.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltUpdate.do")
  public String aqrmUpdate(ModelMap model, HttpServletRequest request,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {
    EgovMap returnMap = new EgovMap();
//    EgovMap ret = null;
    returnMap = fcltyCpctAcmsltService.aqrmViewSelect(fcltyCpctAcmsltSearchVo);
    if (!EgovStringUtil.ObjEmptyChk(returnMap)) {
//      ret = (EgovMap) returnMap.get("ret");
      Set key = returnMap.keySet();
      for (Iterator iterator = key.iterator(); iterator.hasNext();) {
        String keyName = (String) iterator.next();
        model.addAttribute(keyName, returnMap.get(keyName));
      } ;
    }
    return "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltUpdate";
  };

  // 상세보기
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltView.do")
  @SuppressWarnings("rawtypes")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltView.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltView.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltView.do")
  public String refrnrelmView(ModelMap model, HttpServletRequest request,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {
    String popupChk = request.getParameter("popupChk");
    if ("".equals(popupChk) || popupChk == null) {
      popupChk = "off";
    }
    EgovMap returnMap = new EgovMap();
//    EgovMap ret = null;
    returnMap = fcltyCpctAcmsltService.aqrmViewSelect(fcltyCpctAcmsltSearchVo);
    if (!EgovStringUtil.ObjEmptyChk(returnMap)) {
//      ret = (EgovMap) returnMap.get("ret");
      Set key = returnMap.keySet();
      for (Iterator iterator = key.iterator(); iterator.hasNext();) {
        String keyName = (String) iterator.next();
        model.addAttribute(keyName, returnMap.get(keyName));
        model.addAttribute("popupChk", (Object) popupChk);
      } ;
    }

    return "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltDetail";
  };

  // 수정Ajax
  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/updatefcltyCpctAcmslt.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/updatefcltyCpctAcmslt.do", "/ext/fcltyCpctAcmslt/updatefcltyCpctAcmslt.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/updatefcltyCpctAcmslt.do")
  public ModelAndView updateAqrm(HttpServletRequest request, ModelMap model,
      @ModelAttribute fcltyCpctAcmsltCommonVo fcltyCpctAcmsltCommonVo,
      MultipartHttpServletRequest req) throws Exception {
    EgovMap ret = new EgovMap();
    ModelAndView mav = EgovCommonUtil.getModelAndViewforAjax(fcltyCpctAcmsltCommonVo.getVerEx());
    Map<String, Object> aqrmSuperData = new HashMap<String, Object>();
    aqrmSuperData.put("fcltyCpctAcmsltCommonVo", fcltyCpctAcmsltCommonVo);
    aqrmSuperData.put("Multipart", req);
    ret = fcltyCpctAcmsltService.updateaqrm(aqrmSuperData);
    mav.addObject("data", ret);
    return mav;
  };

  // 삭제Ajax
  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltDelete.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltDelete.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltDelete.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltDelete.do")
  public EgovMap refrnrelmDelete(ModelMap model, HttpServletRequest request) throws Exception {
    EgovMap ret = new EgovMap();
    Map<String, String> preDat = new HashMap<String, String>();
    String sn = request.getParameter("sn");
    if (!EgovStringUtil.ObjEmptyChk(sn)) {
      preDat.put("sn", sn);
      ret = fcltyCpctAcmsltService.aqrmDelete(preDat);
    } ;
    return ret;
  };

  // 저장
  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/insertfcltyCpctAcmsltData.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/insertfcltyCpctAcmsltData.do", "/ext/fcltyCpctAcmslt/insertfcltyCpctAcmsltData.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/insertfcltyCpctAcmsltData.do")
  public ModelAndView insertPrefrmrelmData(HttpServletRequest request, ModelMap model,
      @ModelAttribute fcltyCpctAcmsltCommonVo fcltyCpctAcmsltCommonVo,
      MultipartHttpServletRequest req) throws Exception {
    EgovMap ret = new EgovMap();
    ModelAndView mav = EgovCommonUtil.getModelAndViewforAjax(fcltyCpctAcmsltCommonVo.getVerEx());
    // request.getSession().setAttribute("fcltyCpctAcmsltSearchVoSession", null);
    if (!EgovStringUtil.ObjEmptyChk(fcltyCpctAcmsltCommonVo)) {
      Map<String, Object> aqrmSuperData = new HashMap<String, Object>();
      aqrmSuperData.put("fcltyCpctAcmsltCommonVo", fcltyCpctAcmsltCommonVo);
      aqrmSuperData.put("Multipart", req);
      ret = fcltyCpctAcmsltService.insertaqrmData(aqrmSuperData);
    } ;
    mav.addObject("data", ret);
    return mav;
  };

  // 전체 리스트 카운트
  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltfirstDataListCnt.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltfirstDataListCnt.do", "/ext/fcltyCpctAcmslt/fcltyCpctAcmsltfirstDataListCnt.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/fcltyCpctAcmsltfirstDataListCnt.do")
  public EgovMap firstDataListCnt(HttpServletRequest request, ModelMap model,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {

    EgovMap cntF = new EgovMap();

    if (!EgovStringUtil.ObjEmptyChk(fcltyCpctAcmsltSearchVo)) {
      cntF = fcltyCpctAcmsltService.aqrmfirstDataListCnt(fcltyCpctAcmsltSearchVo);
    } ;

    return cntF;
  };

  // 조회
  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/searchfcltyCpctAcmsltListP.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/searchfcltyCpctAcmsltListP.do", "/ext/fcltyCpctAcmslt/searchfcltyCpctAcmsltListP.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/searchfcltyCpctAcmsltListP.do")
  public List<EgovMap> searchRefrnrelmListP(HttpServletRequest request, ModelMap model,
      @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception {

    List<EgovMap> list = new ArrayList<EgovMap>();

    if (!EgovStringUtil.ObjEmptyChk(fcltyCpctAcmsltSearchVo)) {
      list = fcltyCpctAcmsltService.searchaqrmListP(fcltyCpctAcmsltSearchVo);
    } ;
    return list;
  };

  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/getfcltyKndCodeSelectBox.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/getfcltyKndCodeSelectBox.do", "/ext/fcltyCpctAcmslt/getfcltyKndCodeSelectBox.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/getfcltyKndCodeSelectBox.do")
  public EgovMap getfcltyKndCodeSelectBox(HttpServletRequest request) throws Exception {
    EgovMap ret = new EgovMap();
    if (!EgovStringUtil.ObjEmptyChk(request.getParameter("fcltyKndCodeUpperCode"))) {
      ret.put("fcltyKndCodeUpperCode", request.getParameter("fcltyKndCodeUpperCode"));
    } ;
    if (!EgovStringUtil.ObjEmptyChk(request.getParameter("sttemntInsttCodeUpperCode"))) {
      ret.put("sttemntInsttCodeUpperCode", request.getParameter("sttemntInsttCodeUpperCode"));
    } ;
    ret = fcltyCpctAcmsltService.getfcltyKndCodeSelectBox(ret);

    return ret;
  };

  @ResponseBody
//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/getfcltyKndCodeSelectBoxDetail.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/getfcltyKndCodeSelectBoxDetail.do", "/ext/fcltyCpctAcmslt/getfcltyKndCodeSelectBoxDetail.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/getfcltyKndCodeSelectBoxDetail.do")
  public EgovMap getfcltyKndCodeSelectBoxDetail(HttpServletRequest request) throws Exception {
    EgovMap ret = new EgovMap();
    String upperCode = "";
    if (!EgovStringUtil.ObjEmptyChk(request.getParameter("upperCode"))) {
      upperCode = request.getParameter("upperCode");
      ret = fcltyCpctAcmsltService.getfcltyKndCodeSelectBoxDetail(upperCode);
    } ;
    return ret;
  };

  // 조회 엑셀
  /*
   * @RequestMapping(value = "/ext/fcltyCpctAcmslt/searchfcltyCpctAcmsltListPForExcel.do") public
   * String searchfcltyCpctAcmsltListPForExcel(HttpServletRequest request , ModelMap model
   * , @ModelAttribute fcltyCpctAcmsltSearchVo fcltyCpctAcmsltSearchVo) throws Exception{
   * fcltyCpctAcmsltSearchVo.setFirstRecordIndex("1");
   * fcltyCpctAcmsltSearchVo.setLastRecordIndex("9999999"); List<EgovMap> list=new
   * ArrayList<EgovMap>(); list=fcltyCpctAcmsltService.searchaqrmListP(fcltyCpctAcmsltSearchVo);
   * model.addAttribute("listForExcelLastVer",list);
   * model.addAttribute("listForExcelLastVerType","Y"); return
   * "fcltyCpctAcmslt/fcltyCpctAcmsltList"; };
   */

//  @RequestMapping(value = "/ext/fcltyCpctAcmslt/searchfcltyCpctAcmsltListPForExcel.do")
  //@RequestMapping(value = {"/prvntn/fcltyCpctAcmslt/searchfcltyCpctAcmsltListPForExcel.do", "/ext/fcltyCpctAcmslt/searchfcltyCpctAcmsltListPForExcel.do"})
  @RequestMapping(value = "/prvntn/fcltyCpctAcmslt/searchfcltyCpctAcmsltListPForExcel.do")
  public void searchfcltyCpctAcmsltListPForExcel(ModelMap model, HttpServletRequest request,
      HttpServletResponse response, @ModelAttribute("searchVO") fcltyCpctAcmsltSearchVo searchVO)
      throws Exception {
    ServletOutputStream sos = null;
    List<EgovMap> fcltyCpctAcmsltList =
        fcltyCpctAcmsltService.searchfcltyCpctAcmsltListPForExcel(searchVO);



    // Workbook 생성
    XSSFWorkbook work = new XSSFWorkbook(); // Excel 2007 이상

    // *** Sheet-------------------------------------------------
    // Sheet 생성
    XSSFSheet sheet = work.createSheet("시설 실적관리");


    sheet.setColumnWidth(1, 5000);
    sheet.setColumnWidth(2, 5000);
    sheet.setColumnWidth(3, 5000);
    sheet.setColumnWidth(4, 5000);
    sheet.setColumnWidth(5, 5000);
    sheet.setColumnWidth(6, 5000);
    sheet.setColumnWidth(7, 5000);
    sheet.setColumnWidth(8, 5000);
    sheet.setColumnWidth(9, 5000);
    sheet.setColumnWidth(10, 5000);
    sheet.setColumnWidth(11, 5000);
    sheet.setColumnWidth(12, 10000);
    sheet.setColumnWidth(13, 5000);
    sheet.setColumnWidth(14, 10000);
    sheet.setColumnWidth(15, 10000);
    sheet.setColumnWidth(16, 5000);
    sheet.setColumnWidth(17, 5000);
    sheet.setColumnWidth(18, 5000);
    sheet.setColumnWidth(19, 5000);
    sheet.setColumnWidth(20, 5000);
    sheet.setColumnWidth(21, 10000);


    // ----------------------------------------------------------
    XSSFRow row = null;
    XSSFCell cell = null;
    // ----------------------------------------------------------

    sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 5));

    CellStyle style = work.createCellStyle();
    style.setAlignment(XSSFCellStyle.ALIGN_CENTER);

    row = sheet.createRow(0);
    cell = row.createCell(0);
    cell.setCellValue("시설 실적관리");
    cell.setCellStyle(style);

    row = sheet.createRow(1);
    cell = row.createCell(0);
    cell.setCellValue("연번");
    cell.setCellStyle(style);

    cell = row.createCell(1);
    cell.setCellValue("검사목적");
    cell.setCellStyle(style);

    cell = row.createCell(2);
    cell.setCellValue("작성일시");
    cell.setCellStyle(style);

    cell = row.createCell(3);
    cell.setCellValue("검사일시");
    cell.setCellStyle(style);

    cell = row.createCell(4);
    cell.setCellValue("검사장소");
    cell.setCellStyle(style);

    cell = row.createCell(5);
    cell.setCellValue("검사원직책1");
    cell.setCellStyle(style);

    cell = row.createCell(6);
    cell.setCellValue("검사원1");
    cell.setCellStyle(style);

    cell = row.createCell(7);
    cell.setCellValue("검사원직책2");
    cell.setCellStyle(style);

    cell = row.createCell(8);
    cell.setCellValue("검사원2");
    cell.setCellStyle(style);

    cell = row.createCell(9);
    cell.setCellValue("입회인직책");
    cell.setCellStyle(style);

    cell = row.createCell(10);
    cell.setCellValue("입회인");
    cell.setCellStyle(style);

    cell = row.createCell(11);
    cell.setCellValue("작성자");
    cell.setCellStyle(style);

    cell = row.createCell(12);
    cell.setCellValue("시설명");
    cell.setCellStyle(style);

    cell = row.createCell(13);
    cell.setCellValue("시설종류");
    cell.setCellStyle(style);

    cell = row.createCell(14);
    cell.setCellValue("시설세부종류");
    cell.setCellStyle(style);

    cell = row.createCell(15);
    cell.setCellValue("시설주소");
    cell.setCellStyle(style);

    cell = row.createCell(16);
    cell.setCellValue("시설전화번호");
    cell.setCellStyle(style);

    cell = row.createCell(17);
    cell.setCellValue("시설대표자");
    cell.setCellStyle(style);

    cell = row.createCell(18);
    cell.setCellValue("시설신고기관");
    cell.setCellStyle(style);

    cell = row.createCell(19);
    cell.setCellValue("시설등록번호");
    cell.setCellStyle(style);

    cell = row.createCell(20);
    cell.setCellValue("시설등록일자");
    cell.setCellStyle(style);

    cell = row.createCell(21);
    cell.setCellValue("점검자의견");
    cell.setCellStyle(style);

    int rowIndex = 0;
    String InsertedSerialNumber = "";
    for (int r = 0; r < fcltyCpctAcmsltList.size(); r++) {
      int next = r + 1;

      if (r >= fcltyCpctAcmsltList.size()) { // 마지막 번호라 가정하고
        r = fcltyCpctAcmsltList.size() - 1;
      }
      if (next >= fcltyCpctAcmsltList.size()) { // 마지막 번호라 가정하고
        next = fcltyCpctAcmsltList.size() - 1;
      }
      String SerialNumber = String.valueOf(fcltyCpctAcmsltList.get(r).get("sn"));
      String nextSerialNumber = String.valueOf(fcltyCpctAcmsltList.get(next).get("sn"));
      if (!InsertedSerialNumber.equals(SerialNumber)) {
        row = sheet.createRow(rowIndex + 2);
        rowIndex++;
        for (short c = 0; c < 22; c++) {
          cell = row.createCell(c);
          if (c == 0) {
            // cell.setCellValue(String.valueOf(r+1));
            cell.setCellValue(String.valueOf(rowIndex));
            cell.setCellStyle(style);
          } else if (c == 1) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctPurpsNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctPurpsNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 2) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("writngDt1")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("writngDt1")));
            }
            cell.setCellStyle(style);
          } else if (c == 3) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctDt")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctDt")));
            }
            cell.setCellStyle(style);
          } else if (c == 4) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctPlace")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("inspctPlace")));
            }
            cell.setCellStyle(style);
          } else if (c == 5) {

            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("wtchmanRspofcNm1")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("wtchmanRspofcNm1")));
            }
            cell.setCellStyle(style);
          } else if (c == 6) {

            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("wtchmanNm1")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("wtchmanNm1")));
            }
            cell.setCellStyle(style);
          } else if (c == 7) {
            if (SerialNumber.equals(nextSerialNumber)) {
              if (String.valueOf(fcltyCpctAcmsltList.get(next).get("wtchmanRspofcNm1"))
                  .equals("null")) {
                cell.setCellValue("");
              } else {
                cell.setCellValue(
                    String.valueOf(fcltyCpctAcmsltList.get(next).get("wtchmanRspofcNm1")));
              }
            } else {
              cell.setCellValue("");
            }
            cell.setCellStyle(style);
          } else if (c == 8) {
            if (SerialNumber.equals(nextSerialNumber)) {
              if (String.valueOf(fcltyCpctAcmsltList.get(next).get("wtchmanNm1")).equals("null")) {
                cell.setCellValue("");
              } else {
                cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(next).get("wtchmanNm1")));
              }
            } else {
              cell.setCellValue("");
            }

            cell.setCellStyle(style);
          } else if (c == 9) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("obsrverClsfNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("obsrverClsfNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 10) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("obsrverNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("obsrverNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 11) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("wrterNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("wrterNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 12) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 13) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyKndNmU")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyKndNmU")));
            }
            cell.setCellStyle(style);
          } else if (c == 14) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyKndNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("fcltyKndNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 15) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("adres")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("adres")));
            }
            cell.setCellStyle(style);
          } else if (c == 16) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("rprsntvTelno")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("rprsntvTelno")));
            }
            cell.setCellStyle(style);
          } else if (c == 17) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("rprsntvNm")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("rprsntvNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 18) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("sttemntInsttCodeNm"))
                .equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(
                  String.valueOf(fcltyCpctAcmsltList.get(r).get("sttemntInsttCodeNm")));
            }
            cell.setCellStyle(style);
          } else if (c == 19) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("sttemntNo")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("sttemntNo")));
            }
            cell.setCellStyle(style);
          } else if (c == 20) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("writngDt2")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("writngDt2")));
            }
            cell.setCellStyle(style);
          } else if (c == 21) {
            if (String.valueOf(fcltyCpctAcmsltList.get(r).get("insctrOpinionCn")).equals("null")) {
              cell.setCellValue("");
            } else {
              cell.setCellValue(String.valueOf(fcltyCpctAcmsltList.get(r).get("insctrOpinionCn")));
            }
            cell.setCellStyle(style);
          }
        }
      }
      if (SerialNumber.equals(nextSerialNumber)) {
        r++;
      }
      InsertedSerialNumber = SerialNumber;
    }


    // excel 파일 저장

    try {

      response.setHeader("Content-Disposition",
          "attachment;filename=" + URLEncoder.encode("시설 실적관리.xlsx", "UTF-8"));
      response.setContentType("application/vnd.ms.excel");

      sos = response.getOutputStream();
      work.write(sos);
      sos.flush();
      sos.close();

    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } catch (IOException e1) {
      e1.printStackTrace();
    }
  }


};

package com.gmtc.inipay;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.inicis.std.util.HttpUtil;
import com.inicis.std.util.ParseUtil;
import com.inicis.std.util.SignatureUtil;
import egovframework.com.cmm.ComDefaultCodeVO;
import egovframework.com.cmm.service.CmmnDetailCode;
import egovframework.com.cmm.service.EgovCmmUseService;
import egovframework.com.cmm.service.EgovProperties;
import egovframework.com.cmm.service.impl.CmmUseDAO;
import egovframework.com.cop.ems.service.EgovMultiPartEmail;
import egovframework.let.uss.umt.service.UserDefaultVO;

@Controller
public class PayController {
  @Resource(name = "PayManageDAO")
  private PayManageDAO payManageDAO;
  
  @Resource(name = "EgovCmmUseService")
  private EgovCmmUseService cmmUseService;
  
  @Resource(name = "cmmUseDAO")
  private CmmUseDAO cmmUseDAO;
  
  @RequestMapping(value = "/com/gmtc/inipay/selectProductList.do")
  public String selectProductList(@ModelAttribute("userSearchVO") UserDefaultVO userSearchVO, ModelMap model, HttpSession session) throws Exception {
    System.out.println("/com/gmtc/inipay/selectProductList.do");
    return "inipay/INIStdPayBill";
  }
  
  /* 2019.05.30 김홍진
   * 이메일 주소를 받아서 참가신청 한 사람인지 확인,
   * 이미 등록한 사람이라면 step02_info로 보내고
   * 등록하지 않은 사람이라면 step02로 보냄.
   * Step01. 신청테이블에서 체크
   * Step02. 신청테이블에 없으면 회원테이블에서 체크 => 회원이고 Chairman 이나 Speaker 면 참가의사를 묻는 페이지로 이동
   */
  @RequestMapping(value = "/com/gmtc/inipay/checkRegisterEmail.do")
  public String checkRegisterEmail(HttpServletRequest request, @ModelAttribute("payManage") PayManage payManage, ModelMap model, HttpSession session)
      throws Exception {
    System.out.println("\n\tPayController.checkRegisterEmail() START");
    // 0:신규 , 1:등록완료, 2:결재완료, 3:환불됨
    // 등록완료 : 수정, 결재, 결재완료 : 환불요청 , 환불:수정, 재결재
    String returnpage = "/asiapacific/asiaregistration_step02";
    
    ComDefaultCodeVO vo = new ComDefaultCodeVO();
    CmmnDetailCode cmmnDetailCode = new CmmnDetailCode();
    SimpleDateFormat mSimpleDateFormat = new SimpleDateFormat ( "yyyyMMdd", Locale.KOREA );
    Date currentTime = new Date ();
    String mTime = mSimpleDateFormat.format ( currentTime );
    
    vo.setCodeId("COM041"); // 참가자 유형
    List<?> type = cmmUseService.selectCmmCodeDetail(vo); //참가자 유형 목록 가져오기.
    
    vo.setCodeId("COM035"); // 국가 관련 정보
    List<?> country = cmmUseService.selectCmmCodeDetail(vo);    //  국가 목록
    
    // -> 2019.07.01 이후에 code_id가 com35, code가 022인 코드의 useYn을 Y로 바꾼다.
    if(Integer.parseInt(mTime) >= 20190701) {
      cmmnDetailCode.setUseAt("Y");
      cmmnDetailCode.setCodeId("COM035");
      cmmnDetailCode.setCode("022");
      payManageDAO.updateCodeUseYn(cmmnDetailCode);
    }
    // <- 코드의 useYn update.
    
//    // Pass Group
//    String[] passGroup = {
//        "APHoMSA member representative", "IMO TC participant", "Supporting organization representative"
//        , "Exhibition representative", "Capacity building participant", "Organizer", "Speaker", "Chair"
//    };
//    //  이메일 값으로  그룹아이디를 가져와서, ..? 
//    String groupNm = payManageDAO.selectPayUserInfo(payManage.getEmail());
//    if(groupNm != null && groupNm.length() > 0){
//      for( String group : passGroup ) {
//        if(groupNm.equals(group)){
//          model.addAttribute("groupNm", "paid");
//          break;
//        } else {
//          model.addAttribute("groupNm", "pay");
//        }
//      }
//    }else{
//      model.addAttribute("groupNm", "pay");
//    }

    // 받아온 이메일 주소로 신청정보가 있는지 확인하기.
    PayManage selectResult = payManageDAO.selectPayInfo(payManage);
    PayManage selectSubResult = new PayManage(); 

    if(selectResult!=null){
      selectSubResult = payManageDAO.selectSubInfo(selectResult); // 동반참가자 정보 가져오기라눼....
      //selectResult.getGroup_id();
      // 이미 결재가 된거면 정보보기 페이지로 이동
      if(selectResult.getOrdr_pass().equals("2")){
        returnpage = "/asiapacific/asiaregistration_step02_info";
      }
    }
    
    // 현재 날짜 받아오기
    String selectCurDate = payManageDAO.selectCurDate(payManage);
    
    // 결재정보 결과가 없으면 사용자정보 테이블에 있는지 확인.
    if(selectResult==null){
      //회원이면 면제니까 등록정보만 넣자. GROUP_00000000000011
      selectResult = payManageDAO.selectMBRInfo(payManage);
    }
    
    //사용자 정보테이블에도 없으면 최초등록 사용자
    if(selectResult==null){
      selectResult=payManage; // 여기에 받아온 이메일 주소가 있다.
      selectResult.setOrdr_pass("0");
    }
    
    //  -> 가격 산출 logic
    String apptitle=""; //  early-bird인지 아닌지 가져오는 flag
    int price = 0;
    if(selectCurDate!=null&&selectCurDate.length()==8){
      //  환경 변수에 있는 날짜에 맞춰 원가를 가져온다.
      if(Integer.parseInt(selectCurDate)<Integer.parseInt(EgovProperties.getProperty("Globals.ap.price.earlybird.limit"))){
        price = Integer.parseInt(EgovProperties.getProperty("Globals.ap.price.earlybird"));
        apptitle="(Early Bird)";
      } else {
        price = Integer.parseInt(EgovProperties.getProperty("Globals.ap.price.normal"));
      }  //  if
      // 등록 유형에 따라 할인율이 다르고, 결제 금액이 다르므로,
      // 위에서 가져온 환경 변수에 있는 가격에서 DB에 저장 된 할인율로 최종 결제 금액을 계산한다.
      cmmnDetailCode.setCodeId("COM041");
      cmmnDetailCode.setCode(selectResult.getType());
      //  할인율 %
      String discRateStr = payManageDAO.getCodeEtc(cmmnDetailCode);
      if( discRateStr == null ){
        selectResult.setPrice(String.valueOf(price));
      } else {
        int discRate = Integer.parseInt(discRateStr);
        Double discount = (double) discRate / 100;
        price = (int) (price - (price * discount));
        selectResult.setPrice(String.valueOf(price));
      }
    } //  if
    //  <- 가격 산출 logic
    
    model.addAttribute("apptitle", apptitle);
    model.addAttribute("selectCurDate", selectCurDate);
    model.addAttribute("type", type);
    model.addAttribute("country", country);
    model.addAttribute("selectResult", selectResult);
    model.addAttribute("selectSubResult", selectSubResult);
    System.out.println("\n\tPayController.approvalPrice() END");
    return returnpage;
  }
  
  @RequestMapping(value = "/com/gmtc/inipay/approvalCancel.do")
  public String approvalCancel(HttpServletRequest request, @ModelAttribute("payManage") PayManage payManage, ModelMap model, HttpSession session) throws Exception {
    return "/asiapacific/close";
  }
  
  /**
   * asiaregiatration_step02.jsp 에서 
   * 사용자 정보 등록하면 여기서 입력. 
   * @param request
   * @param payManage
   * @param groupNm
   * @param model
   * @param session
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/com/gmtc/inipay/approvalPrice.do")
  public String approvalPrice(
        HttpServletRequest request,
        @ModelAttribute("payManage") PayManage payManage,
        String groupNm,
        ModelMap model,
        HttpSession session,
        Boolean isMobile
      ) throws Exception {
    System.out.println("\n\tPayController.approvalPrice() START");

    //해당 이메일 주소로 저장된 데이터가 있는지 다시한번 확인
    PayManage selectResult = payManageDAO.selectBEMasterNo(payManage);
    if(payManage.getExb_quantity().equals("")||payManage.getExb_quantity()==null){
      payManage.setExb_quantity("0");
    }

    System.out.println("payManage.getEmail() :"+payManage.getEmail());
    
    String master_no="";
    
    if(selectResult==null){
      System.out.println("selectResult is null");
      // 신청내역이 없으면 신규 저장. master_no는.... 제네레이터 쓰지말고 그냥 가져오자 귀찮다. 
      master_no = payManageDAO.selectMasterNo();
      payManage.setMaster_no(master_no);
      payManage.setMaster_no_sub(master_no);
      System.out.println("comment : master_no is "+master_no);
      
      // 등록 시킨다?
      if(groupNm.equals("paid")){
        payManage.setOrdr_pass("2");  
      }else{
        payManage.setOrdr_pass("1");
      }
      
      //신청자 정보 정보 인서트 하기. - 
      payManageDAO.insertORDRMaster(payManage);
      //동반자 정보 정보 인서트 하기.
      payManageDAO.insertORDRSub(payManage);
      

    }else{
      System.out.println("comment : selectResult is not null, so we have to update information");
      master_no = selectResult.getMaster_no();
      payManage.setMaster_no(master_no);
      System.out.println("comment : master_no of update data is "+master_no);
      payManageDAO.updateORDRMaster(payManage);
      // 있으면 selectResult 맵안에 GROUP_ID 를 가지고 업데이트
      payManageDAO.updateORDRSub(payManage);
    }
    
    String clang="en"; // 카드결제창 띄워줄때 어떤 언어를 사용할까 결정
    String currency="USD"; // 원화인지, 달러인지 구분
    
    
    //  -> 소속 국가가 한국이면 결재창은 한글로, 결제 금액은 원화로
    if(payManage.getCountry().equals("207")){ //소속 국가가 한국이면 
      clang="ko"; //결재창 한국어로
      currency="WON"; //화폐단위 원으로 변경
    }
    //  <- 소속 국가
    
    // 코드정보 불러오기 위한 VO객체
    ComDefaultCodeVO vo = new ComDefaultCodeVO();
    // 소속 국가코드 넣고 이름 가져오기
    vo.setCodeId("COM035");
    vo.setCode(payManage.getCountry());
    payManage.setCountry_nm(cmmUseDAO.selectCmmCodeDetailValue(vo).getCodeNm());
    
    //  동반자 정보(출신 국가)가 없다면 데이터에 넣지 않음.
    if(Integer.valueOf(payManage.getCountry_sub()) > 0){
      vo.setCode(payManage.getCountry_sub());
      payManage.setCountry_nm_sub(cmmUseDAO.selectCmmCodeDetailValue(vo).getCodeNm());
    }
    
    // 참가자 유형코드 넣고 이름 가져오기
    vo.setCodeId("COM041");
    vo.setCode(payManage.getType());
    payManage.setType_nm(cmmUseDAO.selectCmmCodeDetailValue(vo).getCodeNm());
    
    /*
     * 
     * JSP 에서 지워야 함.
    String type_nm = payManage.getType_nm();
    String type_flag = "";
    String[] freeList = {"Exhibition representative", "Supporting organization representative", "IMO TC participant", "APHoMSA member representative"};//  비교 무료 할 리스트
    
    for( String free : freeList){
      if(type_nm.equals(free)){
        type_flag = "free";
      }
    }
    
    //model.addAttribute("type_flag", type_flag);

    */
    
    //  -> 결제할 금액
    CmmnDetailCode cmmnDetailCode = new CmmnDetailCode();
    cmmnDetailCode.setCodeId("COM041");
    cmmnDetailCode.setCode(payManage.getType());
    int price = Integer.parseInt(payManage.getPrice());
    String discRateStr = payManageDAO.getCodeEtc(cmmnDetailCode);
    if( discRateStr == null ){
      payManage.setPrice(String.valueOf(price));
    } else {
      int discRate = Integer.parseInt(discRateStr);
      Double discount = (double) discRate / 100;
      price = (int) (price - (price * discount));
      payManage.setPrice(String.valueOf(price));
    }
    
    //  결제할 금액이 0 이라면 업데이트 시키고 등록 확인 페이지로 넘긴다.
    if(price <= 0) {
      groupNm = "paid";
      payManage.setOrdr_pass("2");
      payManage.setGroup_nm("paid");
      //신청자 정보 정보
      payManageDAO.updateORDRMaster(payManage);
      //동반자 정보 정보
      payManageDAO.updateORDRSub(payManage);
    } else {
      groupNm = "pay";
    }
    //  <- 결제할 금액

    
    vo.setCodeId("COM035");
    List<?> nationCode = cmmUseService.selectCmmCodeDetail(vo); //  국가 번호
    model.addAttribute("country", nationCode);
    model.addAttribute("groupNm", groupNm);
    model.addAttribute("currency", currency);
    model.addAttribute("clang", clang);
    model.addAttribute("payManage", payManage);
    model.addAttribute("selectResult", payManage);
    model.addAttribute("exb_price", EgovProperties.getProperty("Globals.ap.price.exb"));
    model.addAttribute("exb_price_kor", EgovProperties.getProperty("Globals.ap.price.exbKor"));
    
    if(isMobile){
      model.addAttribute("isMobile", "true");
      System.out.println("\ton Mobile");
    } else {
      model.addAttribute("isMobile", "false");
      System.out.println("\tOn PC");
    }
    
    
    System.out.println("\n\tPayController.approvalPrice() END");
    if(groupNm.equals("paid")){
      //  등록 완료 메일을 보냄.
      EgovMultiPartEmail eem = new EgovMultiPartEmail();
      eem.sendApprovalMail(payManage);
      
      //  step-2_info로 갈 경우, 변수 이름 문제로 한번 더 넣어줌....
      model.addAttribute("selectSubResult", payManage);
      
      
      return  "/asiapacific/asiaregistration_step02_info";
    }
    return  "/asiapacific/asiaregistration_step03";
  }
  
  @RequestMapping(value = "/com/gmtc/inipay/getApprovalResult.do")
  public String getApprovalResult(HttpServletRequest request, @ModelAttribute("payManage") PayManage payManage, ModelMap model, HttpSession session) throws Exception {
    System.out.println("getApprovalResult is recieved <=========================================================");
    
    StringBuffer sb = new StringBuffer(); // 인증 결과값 넣을 페이지
    Map<String,String> paramMap = new Hashtable<String,String>();
    Enumeration elems = request.getParameterNames();

    int iresult = 0;
    
    //#############################
    // 인증결과 파라미터 일괄 수신
    //#############################
    String temp = "";
    while( elems.hasMoreElements() ) {
      temp = (String) elems.nextElement();
      paramMap.put(temp, request.getParameter(temp));
    }
    String tmp = request.getParameter("orderNumber"); // master_no 추출을 위한 임시 값

    tmp = tmp.substring(tmp.indexOf("-") + 1, tmp.length());
    payManage.setMaster_no(tmp);
    
    //#####################
    // 인증이 성공일 경우만
    //#####################
    if( "0000".equals( paramMap.get("resultCode") ) ) {
      System.out.println("####인증성공/승인요청####");
      System.out.println("<br/>");
      //############################################
      // 1.전문 필드 값 설정(***가맹점 개발수정***)
      //############################################
      String mid     = paramMap.get("mid");                       // 가맹점 ID 수신 받은 데이터로 설정
      //String signKey  = "SU5JTElURV9UUklQTEVERVNfS0VZU1RS";       // TEST : 가맹점에 제공된 키(이니라이트키) (가맹점 수정후 고정) !!!절대!! 전문 데이터로 설정금지
      String signKey  = "emsxMmpneDVQV0FRc09IKzA5K0lrZz09";     // REAL : 가맹점에 제공된 키(이니라이트키) (가맹점 수정후 고정) !!!절대!! 전문 데이터로 설정금지
      String timestamp= SignatureUtil.getTimestamp();             // util에 의해서 자동생성
      String charset   = "UTF-8";                                 // 리턴형식[UTF-8,EUC-KR](가맹점 수정후 고정)
      String format   = "JSON";                                   // 리턴형식[XML,JSON,NVP](가맹점 수정후 고정)
      String authToken= paramMap.get("authToken");                // 취소 요청 tid에 따라서 유동적(가맹점 수정후 고정)
      String authUrl  = paramMap.get("authUrl");                  // 승인요청 API url(수신 받은 값으로 설정, 임의 세팅 금지)
      String netCancel= paramMap.get("netCancelUrl");             // 망취소 API url(수신 받은 값으로 설정, 임의 세팅 금지)
      String ackUrl   = paramMap.get("checkAckUrl");              // 가맹점 내부 로직 처리후 최종 확인 API URL(수신 받은 값으로 설정, 임의 세팅 금지)    
      String merchantData = paramMap.get("merchantData");         // 가맹점 관리데이터 수신
      
      //#####################
      // 2.signature 생성
      //#####################
      Map<String, String> signParam = new HashMap<String, String>();

      signParam.put("authToken",  authToken);    // 필수
      signParam.put("timestamp",  timestamp);    // 필수

      // signature 데이터 생성 (모듈에서 자동으로 signParam을 알파벳 순으로 정렬후 NVP 방식으로 나열해 hash)
      String signature = SignatureUtil.makeSignature(signParam);
      String price = "";  // 가맹점에서 최종 결제 가격 표기 (필수입력아님)
      
      // 1. 가맹점에서 승인시 주문번호가 변경될 경우 (선택입력) 하위 연결.  
      // String oid = "";
      
      //#####################
      // 3.API 요청 전문 생성
      //#####################
      Map<String, String> authMap = new Hashtable<String, String>();

      authMap.put("mid"          ,mid);        // 필수
      authMap.put("authToken"    ,authToken);  // 필수
      authMap.put("signature"    ,signature);  // 필수
      authMap.put("timestamp"    ,timestamp);  // 필수
      authMap.put("charset"      ,charset);    // default=UTF-8
      authMap.put("format"      ,format);      // default=XML
      //authMap.put("price"     ,price);        // 가격위변조체크기능 (선택사용)
      
      System.out.println("##승인요청 API 요청##");

      HttpUtil httpUtil = new HttpUtil();

      //#####################
      // 4.API 통신 시작
      //#####################

      String authResultString = "";

      authResultString = httpUtil.processHTTP(authMap, authUrl);
        
      //############################################################
      //5.API 통신결과 처리(***가맹점 개발수정***)
      //############################################################
      System.out.println("## 승인 API 결과 ##");
      
      String appstring = authResultString.replace(",", "&").replace(":", "=").replace("\"", "").replace(" ","").replace("\n", "").replace("}", "").replace("{", "");
      
      //out.println("<pre>"+authResultString.replaceAll("<", "&lt;").replaceAll(">", "&gt;")+"</pre>");
      
      Map<String, String> resultMap = new HashMap<String, String>();
      
      resultMap = ParseUtil.parseStringToMap(appstring); //문자열을 MAP형식으로 파싱
              

      
      /*************************  결제보안 강화 2016-05-18 START ****************************/ 
      Map<String , String> secureMap = new HashMap<String, String>();
      secureMap.put("mid"      , mid);                //mid
      secureMap.put("tstamp"    , timestamp);            //timestemp
      secureMap.put("MOID"    , resultMap.get("MOID"));      //MOID
      secureMap.put("TotPrice"  , resultMap.get("TotPrice"));    //TotPrice
      
      // signature 데이터 생성 
      String secureSignature = SignatureUtil.makeSignatureAuth(secureMap);

      
      payManage.setResultcode(resultMap.get("resultCode"));
      payManage.setResultmsg(resultMap.get("resultMsg"));
      payManage.setTid(resultMap.get("tid"));
      payManage.setPaymethod(resultMap.get("payMethod"));
      payManage.setTotprice(resultMap.get("TotPrice"));
      payManage.setMoid(resultMap.get("MOID"));
      payManage.setAppldate(resultMap.get("applDate"));
      payManage.setAppltime(resultMap.get("applTime"));
      payManage.setVactnum(resultMap.get("VACT_Num"));
      payManage.setVactbankcode(resultMap.get("VACT_BankCode"));
      payManage.setVactbankname(resultMap.get("vactBankName"));
      payManage.setVactname(resultMap.get("VACT_Name"));
      payManage.setVactinputname(resultMap.get("VACT_InputName"));
      payManage.setVactdate(resultMap.get("VACT_Date"));
      payManage.setVacttime(resultMap.get("VACT_Time"));
      payManage.setAcctbankcode(resultMap.get("ACCT_BankCode"));
      payManage.setCshrresultcode(resultMap.get("CSHR_ResultCode"));
      payManage.setCshrtype(resultMap.get("CSHR_Type"));
      payManage.setHppcorp(resultMap.get("HPP_Corp"));
      payManage.setPaydevice(resultMap.get("payDevice"));
      payManage.setHppnum(resultMap.get("HPP_Num"));
      payManage.setGamgapplprice(resultMap.get("GAMG_ApplPrice"));
      payManage.setGamgcnt(resultMap.get("GAMG_Cnt"));
      payManage.setGamgnum1(resultMap.get("GAMG_Num1"));
      payManage.setGamgprice1(resultMap.get("GAMG_Price1"));
      payManage.setGamgnum2(resultMap.get("GAMG_Num2"));
      payManage.setGamgprice2(resultMap.get("GAMG_Price2"));
      payManage.setGamgnum3(resultMap.get("GAMG_Num3"));
      payManage.setGamgprice3(resultMap.get("GAMG_Price3"));
      payManage.setGamgnum4(resultMap.get("GAMG_Num4"));
      payManage.setGamgprice4(resultMap.get("GAMG_Price4"));
      payManage.setGamgnum5(resultMap.get("GAMG_Num5"));
      payManage.setGamgprice5(resultMap.get("GAMG_Price5"));
      payManage.setGamgnum6(resultMap.get("GAMG_Num6"));
      payManage.setGamgprice6(resultMap.get("GAMG_Price6"));
      payManage.setPayoption(resultMap.get("PayOption"));
      payManage.setOcbnum(resultMap.get("OCB_Num"));
      payManage.setOcbsaveapplnum(resultMap.get("OCB_SaveApplNum"));
      payManage.setOcbpayapplnum(resultMap.get("OCB_PayApplNum"));
      payManage.setOcbpayprice(resultMap.get("OCB_PayPrice"));
      payManage.setGsptapplprice(resultMap.get("GSPT_ApplPrice"));
      payManage.setGsptsaveprice(resultMap.get("GSPT_SavePrice"));
      payManage.setGsptpayprice(resultMap.get("GSPT_PayPrice"));
      payManage.setUpointnum(resultMap.get("UPoint_Num"));
      payManage.setUpointusablepoint(resultMap.get("UPoint_usablePoint"));
      payManage.setUpointapplprice(resultMap.get("UPoint_ApplPrice"));
      payManage.setPrice(resultMap.get("price"));
      payManage.setCultuserid(resultMap.get("CULT_UserID"));
      payManage.setTeenapplnum(resultMap.get("TEEN_ApplNum"));
      payManage.setTeenuserid(resultMap.get("TEEN_UserID"));
      payManage.setTeenapplprice(resultMap.get("TEEN_ApplPrice"));
      payManage.setBcshapplnum(resultMap.get("BCSH_ApplNum"));
      payManage.setBcshuserid(resultMap.get("BCSH_UserID"));
      payManage.setBcshapplprice(resultMap.get("BCSH_ApplPrice"));
      payManage.setPhnbnum(resultMap.get("PHNB_Num"));
      payManage.setCardbillkey(resultMap.get("CARD_BillKey"));
      payManage.setGoodname(resultMap.get("goodName"));
      payManage.setEventcode(resultMap.get("EventCode"));
      payManage.setCardnum(resultMap.get("CARD_Num"));
      payManage.setApplnum(resultMap.get("applNum"));
      payManage.setCardquota(resultMap.get("CARD_Quota"));
      payManage.setCardinterest(resultMap.get("CARD_Interest"));
      payManage.setPoint(resultMap.get("point"));
      payManage.setCardcode(resultMap.get("CARD_Code"));
      payManage.setCardbankcode(resultMap.get("CARD_BankCode"));
      payManage.setGsptnum(resultMap.get("GSPT_Num"));
      payManage.setGsptremains(resultMap.get("GSPT_Remains"));
      payManage.setUnptcardnum(resultMap.get("UNPT_CardNum"));
      payManage.setUpntusablepoint(resultMap.get("UPNT_UsablePoint"));
      payManage.setUpntpayprice(resultMap.get("UPNT_PayPrice"));
      
      // 수신결과를 파싱후 resultCode가 "0000"이면 승인성공 이외 실패
      // 가맹점에서 스스로 파싱후 내부 DB 처리 후 화면에 결과 표시

      // payViewType을 popup으로 해서 결제를 하셨을 경우
      // 내부처리후 스크립트를 이용해 opener의 화면 전환처리를 하세요

      //throw new Exception("강제 Exception");
      
      // 완료된 결재정보입력
      /* 
       * 
       * 1.결재에 성공했는가?!! 그럼 ordr_pass=2 
       * 
       * 
       * */
      PayManage tmpPayManage = payManageDAO.selectMasterInfo(payManage);
      
      if("0000".equals(resultMap.get("resultCode")) && secureSignature.equals(resultMap.get("authSignature")) ){  //결제보안 강화 2016-05-18
        // 결재에 성공했으면 데이터를 넣자. 이전 데이터가 있으면.....그냥 삭제하고 넣자.
        tmpPayManage.setOrdr_pass("2");
        payManage.setOrdr_pass("2");
        
        // 이전데이터 삭제
        payManageDAO.deleteApprovalAP(payManage);
        
        //데이터 입력
        payManageDAO.insertApprovalAP(payManage);
        
        //결재 결과 업데이트 ordr_pass가 2이면 결재가 완료된 것이므로 차후 재접속시 조회/수정만 가능하게 : 결재로 넘어가면 암됨.
        payManageDAO.updateOrdrPass(payManage);
        
        //메일 보내기.
        EgovMultiPartEmail eem = new EgovMultiPartEmail();
        eem.sendApprovalMail(tmpPayManage);
        
        sb.append(eem.getApprovalMessage(tmpPayManage));
        sb.append("<form name='frm' method='post'>"); 
        sb.append("<input type='hidden' name='tid' value='"+resultMap.get("tid")+"'/>");
        sb.append("</form>");
        
      }else{
        
        sb.append("<tr><th class='td01'><p>Result</p></th>");
        sb.append("<td class='td02'><p>Failed</p></td></tr>");
        sb.append("<tr><th class='td01'><p>Result Code</p></th>");
        sb.append("<td class='td02'><p>" +resultMap.get("resultCode")+"</p></td></tr>");
        sb.append("<tr><th class='td01'><p>Couse</p></th>");
        sb.append("<td class='td02'><p>" +resultMap.get("resultMsg")+"</p></td></tr>");
        //결제보안키가 다른 경우
        if ( !secureSignature.equals(resultMap.get("authSignature")) && "0000".equals(resultMap.get("resultCode")) ) {
          //결과정보
          sb.append("<tr><th class='line' colspan='2'><p></p></th></tr>");
          sb.append("<tr><th class='td01'><p>Result</p></th>");
          sb.append("<td class='td02'><p>* Data Forgery Check Failed</p></td></tr>");  
          //망취소
          if ("0000".equals(resultMap.get("resultCode"))) {
            throw new Exception("Data Forgery Check Failed");
          }
        }
      }
    } else {
      //#############
      // 인증 실패시
      //#############
      sb.append("<br/>");
      sb.append("####인증실패####");
      sb.append("<p>"+paramMap.toString()+"</p>");
    }

    model.addAttribute("payManage", payManage);
    model.addAttribute("appresult", sb);
    
    return  "/asiapacific/asiaregistration_step04";
  }
  
  @RequestMapping(value = "/pay_next_url.do")
  public String getPayNextUrl(HttpServletRequest request, @ModelAttribute("payManage") PayManage payManage, ModelMap model, HttpSession session) throws Exception {
    // 이니시스에서 받은 value
    System.out.println("/pay_next_url.do");
    String P_STATUS  = request.getParameter("P_STATUS");
    String P_RMESG1  = request.getParameter("P_RMESG1");
    String P_TID     = request.getParameter("P_TID");
    String P_REQ_URL  = request.getParameter("P_REQ_URL");
    String P_NOTI    = request.getParameter("P_NOTI");
    String P_AMT    = request.getParameter("P_AMT");
    //String P_MID       = "INIpayTest";  //  TEST
    String P_MID       = "innatekmsa";  //  REAL
    // 승인신청 결과값 받아오기.
    
    // HTTP-SOCKET이 뭔데 도대체... HTTP면 HTTP고 SOCKET면 SOCKET 이지 WebSocket은 들어봤어도 HTTP-SOCKET는 첨들어보네 시바
    
    // 최종승인 URL만들기.
    String P_PARAM = "?P_TID="+P_TID+"&P_MID="+P_MID;
    P_REQ_URL = P_REQ_URL+P_PARAM;
    System.out.println("P_REQ_URL :"+P_REQ_URL);
   
    // URL 호출하기.
    URL url = new URL(P_REQ_URL);
    InputStream in = url.openStream();
    
    // 결과값 받아오기.
    Reader r = new InputStreamReader(in, "EUC-KR");
    int data = -1;
    String resultString = "";
    while( (data = r.read()) != -1){
      // System.out.println((char)data);
      resultString +=(char)data;
    }
    r.close();
    
    System.out.println("resultString :"+resultString);
  
    StringBuffer sb = new StringBuffer(); // 인증 결과값 넣을 페이지
  
    String[] resultArray = null;
    //결과값이 있으면 받아서 처리하기. 00 이면 승인 아니면 에러메세지를 리턴함. 01이던가.
    if(resultString != null && resultString.length() > 0){
      resultArray = resultString.split("\\&");
      if(resultArray != null){
        for(int i = 0; i < resultArray.length; i++){
          System.out.println("resultArray["+i+"] :"+resultArray[i]);
        }
      }
      //  결제가 완료 되었다면.
      String resultcode = resultArray[0].substring(resultArray[0].indexOf('=') + 1);
      if( resultcode.equalsIgnoreCase("00") ){
        System.out.println("RESULTCODE : " + resultcode);
        //  OID 값에 MASTER_NO 값 (ORDR_MASTER_AP)의 INDEX 값이 있으므로 가져옴.
        String master_no = resultArray[11].substring(resultArray[11].indexOf('-') + 1);
        
        payManage.setMaster_no(master_no);
        payManage = payManageDAO.selectPayInfoByMasterNo(payManage);
        
        System.out.println("\tPayManaget.getMaster_no() : " + payManage.getMaster_no());
        
        
        payManage.setResultcode(resultcode);
        
        String appldate = resultArray[1].substring(resultArray[1].indexOf('=') + 1);
        payManage.setAppldate(appldate);
        
        String applnum = resultArray[2].substring(resultArray[2].indexOf('=') + 1);
        payManage.setApplnum(applnum);
        
        String resultmsg = resultArray[3].substring(resultArray[3].indexOf('=') + 1);
        payManage.setResultmsg(resultmsg);
        
        String tid = resultArray[5].substring(resultArray[5].indexOf('=') + 1);
        payManage.setTid(tid);
        
        String totprice = resultArray[7].substring(resultArray[7].indexOf('=') + 1);
        payManage.setTotprice(totprice);
        payManage.setPrice(totprice);
        
        String paymethod = resultArray[8].substring(resultArray[8].indexOf('=') + 1);
        payManage.setPaymethod(paymethod);
        
        String moid = resultArray[11].substring(resultArray[11].indexOf('=') + 1);
        payManage.setMoid(moid);
        
        String gamgnum1 = resultArray[17].substring(resultArray[17].indexOf('=') + 1);
        payManage.setGamgnum1(gamgnum1);
        
        String cardinterest = resultArray[21].substring(resultArray[21].indexOf('=') + 1);
        payManage.setCardinterest(cardinterest);
        
        String appltime = appldate.substring(8);
        payManage.setAppltime(appltime);
        
        
        payManage.setPaydevice("MOBILE");
        payManage.setOrdr_pass("2");
        
        //  DB에 update 함.
        payManageDAO.updateOrdrPass(payManage);
        payManageDAO.insertApprovalAP(payManage);
        
        //메일 보내기.
        EgovMultiPartEmail eem = new EgovMultiPartEmail();
        eem.sendApprovalMail(payManage);
        
        //  결제 완료 메세지 화면에 띄우기.
        sb.append(eem.getApprovalMessage(payManage));
      } else {
        //  결제가 실패한다면 resultmsg 띄우기.
        sb.append( resultArray[3].substring(resultArray[3].indexOf('=') + 1) );
        sb.append("<tr><th class='td01'><p>Result</p></th>");
        sb.append("<td class='td02'><p>Failed</p></td></tr>");
        sb.append("<tr><th class='td01'><p>Result Code</p></th>");
        sb.append("<td class='td02'><p>" + resultArray[0].substring(resultArray[0].indexOf('=') + 1) +"</p></td></tr>");
        sb.append("<tr><th class='td01'><p>Couse</p></th>");
        sb.append("<td class='td02'><p>" +payManage.getTid()+"</p></td></tr>");
        sb.append("<tr><th class='td01'><p>Error Message</p></th>");
        sb.append("<td class='td02'><p>" + resultArray[3].substring(resultArray[3].indexOf('=') + 1) +"</p></td></tr>");
        sb.append("<tr><th class='line' colspan='2'><p></p></th></tr>");
        sb.append("<tr><th class='td01'><p>Result</p></th>");
        sb.append("<td class='td02'><p>* Data Forgery Check Failed</p></td></tr>");
      }
    } else {
      sb.append("<tr><th class='td01'><p>Result</p></th>");
      sb.append("<td class='td02'><p>Failed</p></td></tr>");
      sb.append("<tr><th class='td01'><p>Result Code</p></th>");
      sb.append("<td class='td02'><p>" +payManage.getTid()+"</p></td></tr>");
      sb.append("<tr><th class='td01'><p>Couse</p></th>");
      sb.append("<td class='td02'><p>" +payManage.getTid()+"</p></td></tr>");
      sb.append("<tr><th class='line' colspan='2'><p></p></th></tr>");
      sb.append("<tr><th class='td01'><p>Result</p></th>");
      sb.append("<td class='td02'><p>* Data Forgery Check Failed</p></td></tr>");
    }

    model.addAttribute("payManage", payManage);
    model.addAttribute("appresult", sb);
    return "/asiapacific/asiaregistration_step04";
  }
  
  @RequestMapping(value = "/payCheck.do")
  public @ResponseBody Boolean getPayCheck(HttpServletRequest request, int master_no, HttpSession session) throws Exception {
    System.out.println("\ngetPayCheck.do :");
    System.out.println("\tMASTER_NO : " + master_no);
    
    Boolean result = payManageDAO.payCheck(master_no);
    if(result == null){
      result = false;
    }
    System.out.println("result: " + result);
    
    return result;
  }
  
  public static void main(String[] args){
//    String result = "P_STATUS=00&P_AUTH_DT=20190701081952&P_AUTH_NO=30002703&P_RMESG1=성공적으로 처리 하였습니다.&P_RMESG2=00&P_TID=INIMX_ISP_innatekmsa20190701081952455623&P_FN_CD1=06&P_AMT=1000&P_TYPE=CARD&P_UNAME=Jin  Kim&P_MID=innatekmsa&P_OID=innatekmsa_1561936352379-12&P_NOTI=&P_NEXT_URL=http://192.168.0.110:8080/pay_next_url.do&P_MNAME=62c8e8369529abc3bd8061e0fae4c7fd1b741bda1e9b67e881186c2ff4df4023&P_NOTEURL=&P_CARD_MEMBER_NUM=&P_CARD_NUM=53651003****&P_CARD_ISSUER_CODE=04&P_CARD_PURCHASE_CODE=06&P_CARD_PRTC_CODE=1&P_CARD_INTEREST=0&P_CARD_CHECKFLAG=1&P_CARD_ISSUER_NAME=&P_CARD_PURCHASE_NAME=&P_FN_NM=국민계열&P_ISP_CARDCODE=050204900094141&P_CARD_APPLPRICE=1000";
//    String[] resultArray =result.split("\\&");
//    if(resultArray!=null){
//      for(int i = 0; i < resultArray.length; i++){
//        System.out.println("resultArray["+i+"] :" + resultArray[i]);
//      }
//    }
  }
}


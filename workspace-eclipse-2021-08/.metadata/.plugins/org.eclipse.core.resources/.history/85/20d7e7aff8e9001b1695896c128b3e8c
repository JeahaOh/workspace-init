/************************************************************************************************
 * 금청구청 통합예약 - 일반사용자 > 수강신청 > 전체 강좌 관련 Controller
 *
 * @author  (주)한신정보기술 개발3팀
 * @since    2019.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일            수정자        수정내용
 *  -------------      --------    ---------------------------
 *  2019.04.10 개발3팀     최초 생성
 *  2021.04.22 운영이랑 일치하지 않음 주의.
 * </pre>
 ***************************************************************************************************/

package kr.co.hanshinit.NeoEdu.cop.edcLctre.web;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springmodules.validation.commons.DefaultBeanValidator;
import kr.co.hanshinit.NeoCMS.cmm.service.CmmUseService;
import kr.co.hanshinit.NeoCMS.cmm.service.PaginationModel;
import kr.co.hanshinit.NeoCMS.cmm.service.ResponseJSON;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.AccesType;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.Interceptor;
import kr.co.hanshinit.NeoCMS.cmm.util.DateUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCode;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCodeService;
import kr.co.hanshinit.NeoCMS.tag.pagination.NeoPaginationInfo;
import kr.co.hanshinit.NeoCMS.uat.uia.service.LoginUtil;
import kr.co.hanshinit.NeoCMS.uss.umt.service.UserInfo;
import kr.co.hanshinit.NeoCMS.uss.umt.service.UserInfoService;
import kr.co.hanshinit.NeoCop.cop.resveAddField.service.ResveAddField;
import kr.co.hanshinit.NeoCop.cop.resveAddField.service.ResveAddFieldService;
import kr.co.hanshinit.NeoCop.cop.resveAddField.service.ResveAddFieldVO;
import kr.co.hanshinit.NeoCop.cop.resveAtchmnfl.service.ResveAtchmnfl;
import kr.co.hanshinit.NeoCop.cop.resveAtchmnfl.service.ResveAtchmnflService;
import kr.co.hanshinit.NeoCop.cop.resveAtchmnfl.service.ResveAtchmnflVO;
import kr.co.hanshinit.NeoCop.cop.resveOption.service.ResveOption;
import kr.co.hanshinit.NeoCop.cop.resveOption.service.ResveOptionService;
import kr.co.hanshinit.NeoCop.cop.resveOption.service.ResveOptionVO;
import kr.co.hanshinit.NeoEdu.cop.cmm.service.CodeCmmVO;
import kr.co.hanshinit.NeoEdu.cop.cmm.service.EdcCmmCodeService;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcMngr.service.EdcAtnlcMngr;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcMngr.service.EdcAtnlcMngrService;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcMngr.service.EdcAtnlcMngrVO;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcUser.service.EdcAtnlcUser;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcUser.service.EdcAtnlcUserBndl;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcUser.service.EdcAtnlcUserService;
import kr.co.hanshinit.NeoEdu.cop.edcAtnlcUser.service.EdcAtnlcUserVO;
import kr.co.hanshinit.NeoEdu.cop.edcInsttMngr.service.EdcInsttMngr;
import kr.co.hanshinit.NeoEdu.cop.edcInsttMngr.service.EdcInsttMngrService;
import kr.co.hanshinit.NeoEdu.cop.edcInsttMngr.service.EdcInsttMngrVO;
import kr.co.hanshinit.NeoEdu.cop.edcInsttPlace.service.EdcInsttPlaceService;
import kr.co.hanshinit.NeoEdu.cop.edcLctre.service.EdcLctre;
import kr.co.hanshinit.NeoEdu.cop.edcLctre.service.EdcLctreActpln;
import kr.co.hanshinit.NeoEdu.cop.edcLctre.service.EdcLctreService;
import kr.co.hanshinit.NeoEdu.cop.edcLctre.service.EdcLctreVO;
import kr.co.hanshinit.NeoEdu.cop.edcLctreInstrctr.service.EdcLctreInstrctr;
import kr.co.hanshinit.NeoEdu.cop.edcLctreInstrctr.service.EdcLctreInstrctrService;
import kr.co.hanshinit.NeoEdu.cop.edcLctreInstrctr.service.EdcLctreInstrctrVO;
import kr.co.hanshinit.NeoEdu.cop.edcRefndRegltn.service.EdcRefndRegltnService;
import net.sf.json.JSONObject;

@Controller
public class EdcLctreWebController {

	@Resource(name="cmmUseService")
	private CmmUseService cmmUseService;

	@Resource(name="cmmnDetailCodeService")
	private CmmnDetailCodeService cmmnDetailCodeService;

	@Resource(name="beanValidator")
	protected DefaultBeanValidator beanValidator;

	@Resource(name="edcLctreService")
	private EdcLctreService edcLctreService;

	/** 교육 관련 코드 조회 서비스 **/
	@Resource(name = "edcCmmCodeService")
	private EdcCmmCodeService edcCmmCodeService;

	/** 교육 장소 관련 서비스 **/
	@Resource(name="edcInsttPlaceService")
	private EdcInsttPlaceService edcInsttPlaceService;

	/** 회원 정보 관련 서비스 **/
	@Resource(name="userInfoService")
	private UserInfoService userInfoService;

	/** 교육 강좌 [강사 관련 서비스] **/
	@Resource(name="edcLctreInstrctrService")
	private EdcLctreInstrctrService edcLctreInstrctrService;

	/** 수강생 저장 관련 서비스 **/
	@Resource(name="edcAtnlcMngrService")
	private EdcAtnlcMngrService edcAtnlcMngrService;

	/** 환불규정 서비스 **/
	@Resource(name="edcRefndRegltnService")
	private EdcRefndRegltnService edcRefndRegltnService;

	/** 첨부파일 관련 서비스  **/
	@Resource(name="resveAtchmnflService")
	private ResveAtchmnflService resveAtchmnflService;

	/** 기관 조회 서비스  **/
	@Resource(name="edcInsttMngrService")
	private EdcInsttMngrService edcInsttMngrService;

	/** 교육대상, 할인대상 조회 서비스 **/
	@Resource(name="resveOptionService")
	private ResveOptionService resveOptionService;

	/** 프로그램 신청양신 추가 서비스 **/
	@Resource(name="resveAddFieldService")
	private ResveAddFieldService resveAddFieldService;

	@Resource(name="edcAtnlcUserService")
	private EdcAtnlcUserService edcAtnlcUserService;


	@ModelAttribute("list")
	EdcLctreVO getSessionModelAttribute(HttpServletRequest request, @RequestParam(value="rep", required=false) String rep) throws Exception{

		EdcLctreVO edcLctreVO = new EdcLctreVO();
		if("1".equals(rep))
			request.getSession().setAttribute("edcLctre", edcLctreVO);

		edcLctreVO = (EdcLctreVO)request.getSession().getAttribute("edcLctre");

		if(edcLctreVO != null){
			Map<String, String> map = new HashMap<String, String>();
			map = PaginationModel.modelExtractMap(edcLctreVO, map);
	        List<NameValuePair> paramList = PaginationModel.convertParam(map);
	        request.getSession().setAttribute("mparam", "&" + URLEncodedUtils.format(paramList, "UTF-8"));
		}

		return edcLctreVO;
	}

	/**
	 * 교육강좌 분류정보 및 강좌정보 - 목록(사용자)
	 * @param edcLctreVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
  	@Interceptor(value = {"templateBinding"}, type=AccesType.REJECT, code="LIST", progrm=0)
	@RequestMapping("/{siteId}/webEdcLctreList.do")
	public String webEdcLctreList(
							   @PathVariable("siteId") String siteId
							,  @ModelAttribute("list") EdcLctreVO edcLctreVO
							, HttpServletRequest request
							, ModelMap model) throws Exception {

  	  if( null == edcLctreVO ) {
  	    edcLctreVO = new EdcLctreVO();
  	  }

  		if(null == edcLctreVO.getSearchLctreGroup() || "".equals(StringUtil.strTrim(edcLctreVO.getSearchLctreGroup()))){
  			edcLctreVO.setSearchLctreGroup("0");
  		}

  		if(null == edcLctreVO.getSearchRceptSttus() || "".equals(StringUtil.strTrim(edcLctreVO.getSearchRceptSttus()))){
  			edcLctreVO.setSearchRceptSttus("");
  		}

  		/** 기관 목록 조회 (코드 값 조회) **/
		CodeCmmVO vo = new CodeCmmVO();
		vo.setSearchDeleteAt("N");
		vo.setSearchInsttGubun("EC");
		vo.setSearchUseAt("Y");
		List<CodeCmmVO> insttList = edcCmmCodeService.selectEdcCmmInsttCode(request, vo, siteId);

		/** 코드 값 조회LEC_CATGY **/
		// 강좌분류(대분류)
		vo.setSearchCodeType("'LEC_CATGY','LCTRE_GROUP'");
		HashMap<String, List<CodeCmmVO>> listCodeMap = new HashMap<>();
		listCodeMap = edcCmmCodeService.selectEdcCmmMap(vo);

		/** 오늘일자 **/
		String nowDateBefore = DateUtil.getDateAddDay(-90, "yyyy-MM-dd");
		String nowDateAfter = DateUtil.getDateAddDay(90, "yyyy-MM-dd");
		//String nowDate = DateUtil.getNowDateTime("yyyy-MM-dd");

		model.addAttribute("listCodeMap", listCodeMap);
		model.addAttribute("nowDateBefore", nowDateBefore); 	// 조회조건 3개월전 예시
		model.addAttribute("nowDateAfter", nowDateAfter); 		// 조회조건 3개원후 예시
		model.addAttribute("insttList", insttList); 			// 기관 목록

		//  20210422 만들다 만 코드 주석처리.
//		if(edcLctreVO != null){
//			if("".equals(StringUtil.strTrim(edcLctreVO.getSearchStartDate()))){}
//		}else{
//			edcLctreVO = new EdcLctreVO();
//		}

		if(!"".equals(StringUtil.strTrim(edcLctreVO.getSearchStartDate())))
			edcLctreVO.setSearchStartDate(StringUtil.strReplaceALL(edcLctreVO.getSearchStartDate(), "\\-", "") + "0000");

		if(!"".equals(StringUtil.strTrim(edcLctreVO.getSearchEndDate())))
			edcLctreVO.setSearchEndDate(StringUtil.strReplaceALL(edcLctreVO.getSearchEndDate(), "\\-", "") + "2359");

		edcLctreVO.setSearchGubun(checkSearch(edcLctreVO));

		/** 강좌 목록 조회 **/
		edcLctreVO.setSearchUseAt("Y");
		int totCnt = edcLctreService.webLctreListTotCnt(request, edcLctreVO);

		NeoPaginationInfo neoPaginationInfo = edcLctreVO.getNeoPaginationInfo(totCnt);
		List<EdcLctreVO> edcLctreList = edcLctreService.webLctreSelectList(request, edcLctreVO);

		if(!"".equals(StringUtil.strTrim(edcLctreVO.getSearchStartDate())))
			edcLctreVO.setSearchStartDate(DateUtil.toDateFormat(edcLctreVO.getSearchStartDate(), "yyyyMMddHHmm", "yyyy-MM-dd"));

		if(!"".equals(StringUtil.strTrim(edcLctreVO.getSearchEndDate())))
			edcLctreVO.setSearchEndDate(DateUtil.toDateFormat(edcLctreVO.getSearchEndDate(), "yyyyMMddHHmm", "yyyy-MM-dd"));

		EdcInsttMngrVO edcInsttMngrVO = new EdcInsttMngrVO();
  		edcInsttMngrVO.setSearchDeleteAt("N");
  		edcInsttMngrVO.setSearchInsttDstrct("EC");
  		edcInsttMngrVO.setSearchUseAt("Y");
  		edcInsttMngrVO.setFirstIndex(0);
  		edcInsttMngrVO.setLastIndex(999999);

  		List<CmmnDetailCode> jobGroupList = cmmnDetailCodeService.selectCmmnDetailCodeLIstByCodeId("JOB_GROUP");
  		model.addAttribute("jobGroupList", jobGroupList);

		List<EdcInsttMngr> edcInsttMngrList = edcInsttMngrService.webSelectEdcInsttMngrList(request, edcInsttMngrVO, jobGroupList);

		model.addAttribute("totCnt", totCnt);
		model.addAttribute("edcInsttMngrList", edcInsttMngrList);


		model.addAttribute("totCnt", totCnt);
		model.addAttribute("edcLctreList", edcLctreList);
		model.addAttribute("paginationInfo", neoPaginationInfo);

		return "NeoEdu/cop/edcLctre/webEdcLctreList";
	}

	/**
	 * 교육강좌 분류정보 및 강좌정보 - 조회(사용자)
	 * @param edcLctreVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
  	@Interceptor(value = {"templateBinding"}, type=AccesType.REJECT, code="VIEW", progrm=0)
	@RequestMapping("/{siteId}/edcLctreView.do")
	public String edcLctreView(
							 @PathVariable("siteId") String siteId
							, @RequestParam(value="key") String key
							, @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO
							, @ModelAttribute("edcLctreActpln") EdcLctreActpln edcLctreActpln
							, HttpServletRequest request
							, ModelMap model
			) throws Exception {


  		try
  		{
	  		/** 강좌 정보 & 신청인원 확인 **/
			EdcLctreVO edcLctreData = edcLctreService.webSelectEdcLctreDetail(request, edcLctreVO);
			model.addAttribute("edcLctre", edcLctreData);

			if("N".equals(StringUtil.strTrim(edcLctreData.getUseAt()))){
				return cmmUseService.redirectMsg(model, "미개설된 강좌입니다.",
	  					"./webEdcLctreList.do?key="+key
	  								+"&pageUnit=" + edcLctreVO.getPageUnit()
	  								+ "&searchCnd=" + edcLctreVO.getSearchCnd()
	  								+ "&searchKrwd=" + edcLctreVO.getSearchKrwd()
	  								+ "&pageIndex=" + edcLctreVO.getPageIndex());
			}

			/** 강사 정보 조회 **/
			EdcLctreInstrctrVO edcLctreInstrctrVO = new EdcLctreInstrctrVO();
			edcLctreInstrctrVO.setSearchLctreKey(edcLctreVO.getSearchLctreKey());
			edcLctreInstrctrVO.setSearchDeleteAt("N");
			edcLctreInstrctrVO.setSearchUseAt("Y");
			edcLctreInstrctrVO.setSearchInstrctreOthbcYn("Y");

			List<EdcLctreInstrctr> listEdcLctreInstrctr = edcLctreInstrctrService.selectEdcLctreInstrctrDataList(request, edcLctreInstrctrVO);
			model.addAttribute("listEdcLctreInstrctr", listEdcLctreInstrctr);

			/** 강의 계획서 조회 **/
			edcLctreActpln.setLctreKey(StringUtil.strToInt(edcLctreVO.getSearchLctreKey()));
			edcLctreActpln.setDeleteAt("N");
			List<EdcLctreActpln> actplnList = edcLctreService.selectEdcLctreActplnData(request, edcLctreActpln);
			model.addAttribute("actplnList", actplnList);

			/** 강의자료 조회(첨부파일 조회) **/
			ResveAtchmnflVO resveAtchmnflVO = new ResveAtchmnflVO();
			resveAtchmnflVO.setSearchManageNo(edcLctreVO.getSearchLctreKey());
			resveAtchmnflVO.setJobSe("EC");
			resveAtchmnflVO.setSearchUseAt("Y");
			resveAtchmnflVO.setSearchDeleteAt("N");

			List<ResveAtchmnfl> resveAtchmnflList =  resveAtchmnflService.selectResveAtchmnflListAll(resveAtchmnflVO);
			model.addAttribute("resveAtchmnflList", resveAtchmnflList);

			/** 기관명 조회 **/
			EdcInsttMngrVO edcInsttMngrVO = new EdcInsttMngrVO();
			edcInsttMngrVO.setSearchInsttCode(edcLctreData.getInsttCode()+"");
			EdcInsttMngr edcInsttMngr = edcInsttMngrService.selectEdcInsttNm(edcInsttMngrVO);
			model.addAttribute("edcInsttMngr", edcInsttMngr);

	  	}catch (Exception e){
	  		e.printStackTrace();
	  	}

		return "NeoEdu/cop/edcLctre/webEdcLctreView";
	}

  	/**
  	 * 개인정보 수집 동의 페이지
  	 * @param request
  	 * @param edcLctreVO
  	 * @param edcLctreActpln
  	 * @param model
  	 * @return
  	 * @throws Exception
  	 */
  	@Interceptor(value = {"loginAuthorInterceptor", "templateBinding"}, type=AccesType.REJECT, code="ADD", progrm=0)
	@RequestMapping("/{siteId}/webEdcLctreAgree.do")
	public String webEdcLctreAgree(
			 				@PathVariable("siteId") String siteId
			 				, @RequestParam(value="key") String key
							, @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO
							, @ModelAttribute("edcAtnlcMngrVO") EdcAtnlcMngrVO edcAtnlcMngrVO
							, @ModelAttribute("edcAtnlcUserVO") EdcAtnlcUserVO edcAtnlcUserVO
							, @ModelAttribute("edcAtnlcUserBndl") EdcAtnlcUserBndl edcAtnlcUserBndl
							, @ModelAttribute("edcLctreActpln") EdcLctreActpln edcLctreActpln
							, HttpServletRequest request
							, ModelMap model
			) throws Exception {

  		// 체크로직 적용
  		// 수강신청 가능여부 체크

    	String userId = LoginUtil.getLoginId(request.getSession());
    	String userNm = LoginUtil.getLoginNm(request.getSession());
    	String diCode = LoginUtil.getDplctCode(request.getSession());

    	edcLctreVO.setLoginUserId(userId);
    	edcLctreVO.setLoginUserNm(userNm);

    	EdcLctreVO rtnEdcVO = edcAtnlcMngrService.checkBooking(request, edcLctreVO, diCode);

    	String msg = rtnEdcVO.getReturnMsg();
    	if(rtnEdcVO.getCheckBooking()){
    		return "NeoEdu/cop/edcLctre/webEdcLctreAgree";
    	}else{
    		return cmmUseService.redirectMsg(model, msg,
  					"./webEdcLctreList.do?key="+key
  								+"&pageUnit=" + edcLctreVO.getPageUnit()
  								+ "&searchCnd=" + edcLctreVO.getSearchCnd()
  								+ "&searchKrwd=" + edcLctreVO.getSearchKrwd()
  								+ "&pageIndex=" + edcLctreVO.getPageIndex());
    	}

	}

  	
  	
  /**
   * [사용자] 교육강좌 분류정보 및 강좌정보 - 등록 페이지
   */
  @Interceptor(value = {"loginAuthorInterceptor", "templateBinding"}, type = AccesType.REJECT, code = "ADD", progrm = 0)
  @RequestMapping("/{siteId}/addEdcLctreView.do")
  public String addEdcLctreView(
    @RequestParam("key") int key,
    HttpServletRequest request,
    @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO,
    ModelMap model
  ) throws Exception {

    // 사용자 아이디 조회
    // String userId = LoginUtil.getLoginId(request.getSession());
    // String nowDate = DateUtil.getNowDateTime();

    // 강좌 기초 정보 조회
    edcLctreVO.setSearchLctreKey(StringUtil.intToStr(edcLctreVO.getLctreKey()));
    EdcLctreVO edcLctre = edcLctreService.webSelectEdcLctreDetail(request, edcLctreVO);

//    if ("N".equals(StringUtil.strTrim(edcLctre.getUseAt()))) {
//      return cmmUseService.redirectMsg(model, "미개설된 강좌입니다.",
//          "./webEdcLctreList.do?key=" + key
//              + "&pageUnit=" + edcLctreVO.getPageUnit()
//              + "&searchCnd=" + edcLctreVO.getSearchCnd()
//              + "&searchKrwd=" + edcLctreVO.getSearchKrwd()
//              + "&pageIndex=" + edcLctreVO.getPageIndex());
//    }

    // 폐강 체크
    if ("Y".equals(edcLctre.getCancelYn())) {
      return cmmUseService.redirectMsg(model, "폐강된 강좌 입니다.",
          "./webEdcLctreList.do?key=" + key
              + "&pageUnit=" + edcLctreVO.getPageUnit()
              + "&searchCnd=" + edcLctreVO.getSearchCnd()
              + "&searchKrwd=" + edcLctreVO.getSearchKrwd()
              + "&pageIndex=" + edcLctreVO.getPageIndex());
    }

    // 모집 기간 체크
    EdcLctreVO checkEdcLctreVO = new EdcLctreVO();
    checkEdcLctreVO.setPriorRceptBgnde(edcLctre.getPriorRceptBgnde().replace("-", "")
        + edcLctre.getPriorRceptBgndeTime() + edcLctre.getPriorRceptBgndeMinute());
    checkEdcLctreVO.setPriorRceptEndde(edcLctre.getPriorRceptEndde().replace("-", "")
        + edcLctre.getPriorRceptEnddeTime() + edcLctre.getPriorRceptEnddeMinute());
    checkEdcLctreVO.setRceptBgnde(edcLctre.getRceptBgnde());
    checkEdcLctreVO.setRceptEndde(edcLctre.getRceptEndde());
    checkEdcLctreVO.setAditRceptBgnde(edcLctre.getAditRceptBgnde());
    checkEdcLctreVO.setAditRceptEndde(edcLctre.getAditRceptEndde());



    if (!edcAtnlcMngrService.selectCheckEdcAtnlcDate(checkEdcLctreVO)) {
      return cmmUseService.redirectMsg(model, "현재 수강 신청 기간이 아닙니다.",
          "./webEdcLctreList.do?key=" + key
              + "&pageUnit=" + edcLctreVO.getPageUnit()
              + "&searchCnd=" + edcLctreVO.getSearchCnd()
              + "&searchKrwd=" + edcLctreVO.getSearchKrwd()
              + "&pageIndex=" + edcLctreVO.getPageIndex());
    }

    // 강좌 상태값 확인
    if ("R01".equals(edcLctre.getRceptSttus()) ||
        "RC1".equals(edcLctre.getRceptSttus()) ||
        "W01".equals(edcLctre.getRceptSttus()) ||
        "AC1".equals(edcLctre.getRceptSttus()) ||
        "PC1".equals(edcLctre.getRceptSttus())) {
      return cmmUseService.redirectMsg(model, "모집이 마감되었습니다.",
          "./webEdcLctreList.do?key=" + key
              + "&pageUnit=" + edcLctreVO.getPageUnit()
              + "&searchCnd=" + edcLctreVO.getSearchCnd()
              + "&searchKrwd=" + edcLctreVO.getSearchKrwd()
              + "&pageIndex=" + edcLctreVO.getPageIndex());
    }



    // 정원 정보
    int rcritNmpr = edcLctre.getRcritNmpr() + edcLctre.getWaitNmpr();
    // 신청자 카운트 (취소 제외)
    int rcritCnt = edcLctre.getSttus00() + edcLctre.getSttus01() + edcLctre.getSttus02()
        + edcLctre.getSttus09() + edcLctre.getSttus10();
    String rceptMth = "";

    if ("PR1".equals(edcLctre.getRceptSttus())) {
      rceptMth = edcLctre.getPriorRceptMth();
      rcritCnt = edcLctre.getSttus01a() + edcLctre.getSttus02a();
      // 정시 접수 및 추가 접수 기간
      if ("0".equals(rceptMth)) {
        rcritNmpr = edcLctre.getPriorRceptNmpr() + edcLctre.getPriorRceptWaitNmpr();
      } else {
        rcritNmpr = edcLctre.getPriorRceptNmpr() + edcLctre.getPriorRceptWaitNmpr();
      }
    } else {
      rceptMth = edcLctre.getRceptMth();
      rcritCnt = edcLctre.getSttus01b() + edcLctre.getSttus02b();
      // 정시 접수 및 추가 접수 기간
      if ("0".equals(rceptMth)) {
        rcritNmpr = edcLctre.getRcritNmpr() + edcLctre.getWaitNmpr();
      } else {
        rcritNmpr = edcLctre.getRcritNmpr() + edcLctre.getWaitNmpr();
      }
    }


    // 정원 체크
    if (rcritNmpr <= rcritCnt) {
      return cmmUseService.redirectMsg(model, "모집정원이 마감되었습니다.",
          "./webEdcLctreList.do?key=" + key
              + "&pageUnit=" + edcLctreVO.getPageUnit()
              + "&searchCnd=" + edcLctreVO.getSearchCnd()
              + "&searchKrwd=" + edcLctreVO.getSearchKrwd()
              + "&pageIndex=" + edcLctreVO.getPageIndex());
    }

    model.addAttribute("edcLctre", edcLctre);

    // 로그인 사용자 정보 조회
    // UserInfoVO userInfoVO = new UserInfoVO();
    // userInfoVO.setUserId(userId);
    // UserInfo userInfo = userInfoService.selectUserInfo(userInfoVO);

    // 세션에서 로그인 정보를 가져 온다 (SSO 세션)
    // 와 이거 완전 메모리 낭비에 가독성 낭비 아니냐? 대다나다....
    UserInfo userInfo = new UserInfo();
    userInfo.setUserId(LoginUtil.getLoginId(request.getSession()));
    userInfo.setUserNm(LoginUtil.getLoginNm(request.getSession()));
    userInfo.setSex(LoginUtil.getSex(request.getSession()));
    userInfo.setBirth(LoginUtil.getBirthday(request.getSession()));
    userInfo.setZipcode(LoginUtil.getZipCode(request.getSession()));
    userInfo.setAddress1(LoginUtil.getAddress(request.getSession()));
    userInfo.setAddress2(LoginUtil.getAddress2(request.getSession()));
    userInfo.setPhone(LoginUtil.getUserPhone(request.getSession()));
    userInfo.setMobile(LoginUtil.getUserMobile(request.getSession()));

    String email = LoginUtil.getUserEmail(request.getSession());

    if (!"".equals(StringUtil.strTrim(email))) {
      String[] emailArr = email.split("\\@");

      if (emailArr.length > 1) {
        userInfo.setEmailBefore(emailArr[0]);
        userInfo.setEmailAfter(emailArr[1]);
      }
    }
    userInfo.setEmail(LoginUtil.getUserEmail(request.getSession()));

    model.addAttribute("userInfo", userInfo);

    EdcAtnlcMngr edcAtnlcMngr = new EdcAtnlcMngr();
    if (userInfo != null) {
      edcAtnlcMngr.setUserBrthdyYear(StringUtil.strSubString(userInfo.getBirth(), 0, 4));
      edcAtnlcMngr.setUserBrthdyMonth(StringUtil.strSubString(userInfo.getBirth(), 4, 6));
      edcAtnlcMngr.setUserBrthdyDay(StringUtil.strSubString(userInfo.getBirth(), 6, 8));
    }
    model.addAttribute("edcAtnlcMngr", edcAtnlcMngr);

    // 할인대상 및 할인률
    ResveOptionVO resveOptionVO = new ResveOptionVO();
    resveOptionVO.setSearchMngrKey(edcLctreVO.getSearchLctreKey());
    resveOptionVO.setSearchJobSe("L");
    resveOptionVO.setSearchTrgetCode("D");
    List<ResveOption> optionList = resveOptionService.selectResveOptionListAll(resveOptionVO);

    model.addAttribute("optionList", optionList);

    // 프로그램 신청양식 추가 조회
    ResveAddFieldVO resveAddFieldVO = new ResveAddFieldVO();
    resveAddFieldVO.setSearchManagerSeq(edcLctreVO.getSearchLctreKey());
    resveAddFieldVO.setSearchDeleteAt("N");
    resveAddFieldVO.setSearchJobSe("EC");
    List<ResveAddField> resveAddFieldList =
        resveAddFieldService.selectResveAddFieldListAll(resveAddFieldVO);

    HashMap<String, String> addFieldMap = resveAddFieldService.makeAddFieldHtml(resveAddFieldList);
    model.addAttribute("resveAddFieldList", resveAddFieldList);
    model.addAttribute("addFieldMap", addFieldMap);

    return "NeoEdu/cop/edcLctre/webEdcLctreRegist";
  }
	
	
	
	

  /**
   * 교육강좌 분류정보 및 강좌정보 - 등록처리(사용자)
   * 
   * @param multiPartRequest
   * @param edcLctreVO
   * @param request
   * @param bindingResult
   * @param model
   * @return
   * @throws Exception
   */
  @Interceptor(value = {"loginAuthorInterceptor"}, type = AccesType.REJECT, code = "ADD", progrm = 0)
  @RequestMapping("/{siteId}/insertDbEdcAtnlc.do")
  public synchronized void addEdcLctre (
    @PathVariable("siteId") String siteId,
    @RequestParam(value = "key") String key,
    @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO,
    @ModelAttribute("edcAtnlcMngrVO") EdcAtnlcMngrVO edcAtnlcMngrVO,
    @ModelAttribute("edcAtnlcUserVO") EdcAtnlcUserVO edcAtnlcUserVO,
    @ModelAttribute("edcAtnlcUserBndl") EdcAtnlcUserBndl edcAtnlcUserBndl,
    BindingResult bindingResult,
    HttpServletRequest request,
    HttpServletResponse response,
    ModelMap model
  ) throws Exception {

    JSONObject obj = new JSONObject();
    PrintWriter out = null;

    try {
      response.setCharacterEncoding("utf-8");
      out = response.getWriter();

      // 수강신청 가능여부 체크
      String userId = LoginUtil.getLoginId(request.getSession());
      String userNm = LoginUtil.getLoginNm(request.getSession());
      String diCode = LoginUtil.getDplctCode(request.getSession());

      EdcLctreVO rtnEdcVO = edcAtnlcMngrService.checkBooking(
        request, edcLctreVO, edcAtnlcMngrVO,
        edcAtnlcUserVO, edcAtnlcUserBndl, userId
      );

      int atnclKey = 0;
      if (rtnEdcVO.getCheckBooking()) {
        edcAtnlcUserVO.setSttus(rtnEdcVO.getSttus());
        edcAtnlcUserVO.setUserNm(edcAtnlcMngrVO.getUserNm());
        edcAtnlcUserVO
            .setUserBrthdy(StringUtil.strReplaceALL(edcAtnlcMngrVO.getUserBrthdy(), "-", ""));

        edcAtnlcMngrVO.setUserId(userId);
        edcAtnlcMngrVO.setUserRceptSttus(rtnEdcVO.getSttus());
        edcAtnlcMngrVO.setRceptMth("01");
        edcAtnlcMngrVO.setUserId(userId);
        edcAtnlcMngrVO.setDiCode(diCode);
        edcAtnlcMngrVO.setEtcCt(rtnEdcVO.getEtcCt() + "");
        edcAtnlcMngrVO.setMberSe("0");
        edcAtnlcMngrVO.setLoginUserId(userId);
        edcAtnlcMngrVO.setLoginUserNm(userNm);
        edcAtnlcMngrVO.setUserNm(userNm);

        atnclKey = edcAtnlcMngrService.insUpEdcAtnlcMngr(request, edcAtnlcMngrVO, edcAtnlcUserVO,
            edcAtnlcUserBndl, rtnEdcVO);

        obj.put("result", "S");
        obj.put("atnclKey", atnclKey + "");

        EdcAtnlcMngrVO checkAtnlcMngrVo = new EdcAtnlcMngrVO();
        checkAtnlcMngrVo.setSearchLctreKey(edcAtnlcMngrVO.getSearchLctreKey());

        // 정원 마감여부 확인
        // 정원
        int rcritNmpr = rtnEdcVO.getRcritNmpr() + rtnEdcVO.getWaitNmpr();
        // 신청자 카운트 (취소, 대기 제외)
        int rcritCnt = rtnEdcVO.getSttus01b();
        int waitCnt = rtnEdcVO.getSttus02b();

        if ((rcritCnt + waitCnt + 1) >= rcritNmpr) {
          // 정원 + 대기 + 현신청인원 일명 더하여 비교
          // 예약 인원이 크거나 같을때 모집 마감으로 상태값 변경 처리
          edcLctreVO.setRceptSttus("RC1");
          edcLctreVO.setRceptSttusNm("접수 마감");

          edcLctreService.updateEdcLctreSttus(request, edcLctreVO);
        }
      } else {
        obj.put("result", "F");
      }

      obj.put("resultMsg", rtnEdcVO.getReturnMsg());
      obj.put("resultCode", rtnEdcVO.getReturnCode());

    } catch (Exception e) {
      obj.put("result", "F");
      obj.put("resultMsg", "등록중 오류가 발생하였습니다.");

      e.printStackTrace();
    } finally {
      out.write(obj.toString());
      out.flush();
      out.close();
    }
  }

	@Interceptor(value = {"templateBinding"}, type=AccesType.REJECT, code="ADD", progrm=0)
	@RequestMapping("/{siteId}/webEdcLctreFinish.do")
	public String webEdcLctreFinish(
							@RequestParam("key") int key
							, HttpServletRequest request
							, @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO
							, @ModelAttribute("erdcAtnlcMngrVO") EdcAtnlcMngrVO edcAtnlcMngrVO
							, ModelMap model) throws Exception {

		EdcAtnlcMngrVO rtnAtnlcMngrVO = new EdcAtnlcMngrVO();
		boolean checkUser = false;

		if(!"".equals(StringUtil.strTrim(edcAtnlcMngrVO.getSearchAtnclKey()))){
		  		// 사용자 아이디 조회
		  		String userId = LoginUtil.getLoginId(request.getSession());
		  		rtnAtnlcMngrVO = edcAtnlcMngrService.selectReservationFinish(edcAtnlcMngrVO);

		  		if(userId.equals(rtnAtnlcMngrVO.getUserId())){
		  			checkUser = true;
		  		}
		}

		if(!checkUser){
			return cmmUseService.redirectMsg(model, "로그인 사용자와 수강자 정보가 일치하지 않습니다.",
						"./webEdcLctreList.do?key="+key
									+"&pageUnit=" + edcLctreVO.getPageUnit()
									+ "&searchCnd=" + edcLctreVO.getSearchCnd()
									+ "&searchKrwd=" + edcLctreVO.getSearchKrwd()
									+ "&pageIndex=" + edcLctreVO.getPageIndex());
		}else{
			// 강좌 정보 조회
			EdcLctreVO rtnEdcLctreVO = new EdcLctreVO();
	  		rtnEdcLctreVO.setSearchLctreKey(rtnAtnlcMngrVO.getLctreKey()+"");
	  		EdcLctre edcLctre = edcLctreService.selectEdcLctreDetail(request, rtnEdcLctreVO);
	  		model.addAttribute("edcLctre", edcLctre);

	  		// 신청 정보 및 상태값 조회
	  		EdcAtnlcMngr edcAtnlcMngr =  edcAtnlcMngrService.selectEdcAtnlcMngrData(request, edcAtnlcMngrVO);
			model.addAttribute("edcAtnlcMngr", edcAtnlcMngr);

			// 수강생 정보 조회
			EdcAtnlcUserVO edcAtnlcUserVO = new EdcAtnlcUserVO();
			edcAtnlcUserVO.setLastIndex(100);
			edcAtnlcUserVO.setFirstIndex(0);
			edcAtnlcUserVO.setAtnclKey(edcAtnlcMngr.getAtnclKey());

			List<EdcAtnlcUser> userList = edcAtnlcUserService.selectEdcAtnlcUserList(edcAtnlcUserVO);
			model.addAttribute("userList", userList);

			// 추가입력 필드 조회
			ResveAddFieldVO resveAddFieldVO = new ResveAddFieldVO();
			resveAddFieldVO.setSearchManagerSeq(edcAtnlcMngr.getLctreKey()+"");
			resveAddFieldVO.setSearchJobSe("EC");
			resveAddFieldVO.setSearchMngrSeq(edcAtnlcMngrVO.getSearchAtnclKey());
			resveAddFieldVO.setSearchDeleteAt("N");
			List<ResveAddField> resveAddFieldList =   resveAddFieldService.selectResveInputAddFieldData(resveAddFieldVO);

			//HashMap<String, String> addFieldMap = resveAddFieldService.makeAddFieldHtml(resveAddFieldList);
	  		model.addAttribute("resveAddFieldList", resveAddFieldList);

			model.addAttribute("rtnAtnlcMngrVO", rtnAtnlcMngrVO);

			boolean mobileYn = StringUtil.isMobile(request);

			if(mobileYn){
				return "NeoEdu/cop/edcLctre/webEdcLctreFinishMobile";
			}else{
				return "NeoEdu/cop/edcLctre/webEdcLctreFinish";
			}

		}
	}


	@Interceptor(value = {"templateBinding"}, type=AccesType.REJECT, code="ADD", progrm=0)
	@RequestMapping("/{siteId}/webEdcLctreBookingCheck.do")
	public String webEdcLctreBookingCheck(
							@RequestParam("key") int key
							, HttpServletRequest request
							, @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO
							, @ModelAttribute("erdcAtnlcMngrVO") EdcAtnlcMngrVO erdcAtnlcMngrVO
							, ModelMap model) throws Exception {

  		// 사용자 아이디 조회
  		String userId = LoginUtil.getLoginId(request.getSession());
  		EdcAtnlcMngrVO rtnAtnlcMngrVO = edcAtnlcMngrService.selectReservationFinish(erdcAtnlcMngrVO);

  		if(!userId.equals(rtnAtnlcMngrVO.getUserId())){
  			return cmmUseService.redirectMsg(model, "로그인 사용자와 수강자 정보가 일치하지 않습니다.",
  					"./webEdcLctreList.do?key="+key
  								+"&pageUnit=" + edcLctreVO.getPageUnit()
  								+ "&searchCnd=" + edcLctreVO.getSearchCnd()
  								+ "&searchKrwd=" + edcLctreVO.getSearchKrwd()
  								+ "&pageIndex=" + edcLctreVO.getPageIndex());
  		}

  		model.addAttribute("rtnAtnlcMngrVO", rtnAtnlcMngrVO);

  		return "NeoEdu/cop/edcLctre/webEdcLctreFinish";
	}


	/**
	 * 교육강좌 분류정보 및 강좌정보 - 수정(사용자)
	 * @param edcLctreVO
	 * @param model
	 * @return "NeoEdu/cop/edcLctre/webEdcLctreUpdt"
	 * @throws Exception
	 */
	@Interceptor(value = {"templateBinding"}, type=AccesType.REJECT, code="UPDATE", progrm=0)
	@RequestMapping("/{siteId}/updateEdcLctreView.do")
	public String updateEdcLctreView(HttpServletRequest request, @ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO,
			ModelMap model) throws Exception {

		EdcLctre edcLctreData = edcLctreService.selectEdcLctreData(request, edcLctreVO);
		model.addAttribute("edcLctre", edcLctreData);

		return "NeoEdu/cop/edcLctre/webEdcLctreView";
	}


	/**
	 * 교육강좌 분류정보 및 강좌정보 - 수정처리(사용자)
	 * @param edcLctreVO
	 * @param request
	 * @param model
	 * @return "NeoEdu/cop/edcLctre/webEdcLctreUpdt"
	 * @throws Exception
	 */
//	@Interceptor(value = "progrmAuthorBinding", type=AccesType.REJECT, code="UPDATE", progrm=0)
	@ResponseBody
	@RequestMapping("/{siteId}/updateedcLctre.do")
	public ResponseJSON updateEdcLctre(
			@ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO, BindingResult bindingResult,
			final MultipartHttpServletRequest multiPartRequest,HttpServletRequest request,  ModelMap model) throws Exception {

		ResponseJSON rs = new ResponseJSON();

		beanValidator.validate(edcLctreVO, bindingResult);
		if (bindingResult.hasErrors()) {
			model.addAttribute("edcLctreVO", edcLctreVO);
//			return "NeoEdu/cop/edcLctre/webEdcLctreUpdt";
		}

		try {

			edcLctreService.updateEdcLctre(request, edcLctreVO);

		} catch(Exception e) {
			model.addAttribute("edcLctreVO", edcLctreVO);
			model.addAttribute("isValidate", true);
			model.addAttribute("message", e.getMessage());
			e.printStackTrace();
			rs.setMsg(e.getMessage());
			rs.setResult(0);
			return rs;
		}

		rs.setResult(1);
		return rs;

	}

	/**
	 * 교육강좌 분류정보 및 강좌정보 - 삭제처리(사용자)
	 * @param edcLctreVO
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/{siteId}/edcLctreDel.do")
	public String edcLctreDel(
			@RequestParam("key") int key,
			@ModelAttribute("edcLctreVO") EdcLctreVO edcLctreVO,
			HttpServletRequest request,
			ModelMap model) throws Exception {

		try {
			edcLctreService.deleteEdcLctre(request, edcLctreVO);

		} catch(Exception e) {
			model.addAttribute("edcLctre", edcLctreVO);
			model.addAttribute("isValidate", true);
			model.addAttribute("message", e.getMessage());
			e.printStackTrace();
			return "NeoEdu/cop/edcLctre/edcLctreList";
		}

		return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.",
				"./webEdcLctreList.do?key="+key
							+"&pageUnit=" + edcLctreVO.getPageUnit()
							+ "&searchCnd=" + edcLctreVO.getSearchCnd()
							+ "&searchKrwd=" + edcLctreVO.getSearchKrwd()
							+ "&pageIndex=" + edcLctreVO.getPageIndex());
	}


	/**
	 * 검색 구분을 위한 확인 함수
	 * @param edcLctreVo
	 * @return
	 */
	public String checkSearch(EdcLctreVO edcLctreVo){
		String rtnStr = "R";

		if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchStartDate()))){
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchEndDate()))){
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchSunDay()))){
			// 일요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchMonDay()))){
			// 월요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchTueDay()))){
			// 화요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchWedDay()))){
			// 수요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchThuDay()))){
			// 목요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchFriDay()))){
			// 금요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchSatDay()))){
			// 토요일
			rtnStr = "D";
		}else if(!"".equals(StringUtil.strTrim(edcLctreVo.getSearchLctreCtgryList()))){
			rtnStr = "D";
		}else{
			rtnStr = "R";
		}

		return rtnStr;
	}

}



const getDepthDataAtLine = function() {
  console.group('getDepthDataAtLine');
  let drawRangeForDepthData = new ol.interaction.Draw({
    source : null,
    type : 'LineString',
    maxPoints : 2
  });
  map.addInteraction(drawRangeForDepthData);

  snap = new ol.interaction.Snap({
    source : source
  });
  map.addInteraction(snap);

  drawRangeForDepthData.on('drawend', function(evt) {
    console.group('drawRangeForDepthData End');

    let feature = evt.feature;
    // console.log(`feature : `);
    // console.log(feature);

    // --> feature를 3미터 띄운 feature'를 만든다
    console.group('Duplicate Line');
    feature.getGeometry().transform('EPSG:3857', 'EPSG:4326');

    let clone = turf.lineString(feature.getGeometry().getCoordinates());
    //  line 사이의 거리와 단위를 지정한다.
    clone = turf.lineOffset(clone, 3, {
      units : 'meters'
    });

    clone = new ol.format.GeoJSON().readFeatures(clone)[0];
    // console.log( clone );

    clone.getGeometry().transform('EPSG:4326', 'EPSG:3857');
    feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
    console.groupEnd('Duplicate Line');
    // <-- feature를 3미터 띄운 feature'를 만든다

    let range = [ feature.getGeometry().getCoordinates()[0],
        clone.getGeometry().getCoordinates()[0],
        clone.getGeometry().getCoordinates()[1],
        feature.getGeometry().getCoordinates()[1],
        feature.getGeometry().getCoordinates()[0] ];
    // console.log(range);

    //  --> Polygon으로 바꾼다.
    console.group('Lines To Polygon');
    range = new ol.Feature({
      geometry : new ol.geom.Polygon([ range ]),
      name : 'Point Collector'
    });
    console.groupEnd('Lines To Polygon');
    //  <-- Polygon으로 바꾼다.

    let area = toWKT(range);
//    console.log( area );
    source.addFeature(range);

    // range = range.getGeometry().getCoordinates();
    // console.log(range);

    range.setStyle(new ol.style.Style({
      stroke : new ol.style.Stroke({
        color : 'rgba(0, 0, 0, 0.2)',
        width : 1
      })
    }));
    range.setProperties({
      'category' : 'Point Collector'
    });

    //  Draw End Finally End.
    map.removeInteraction(drawRangeForDepthData);
    map.removeInteraction(snap);
    console.groupEnd('drawRangeForDepthData End');

    function getData(area) {
      return new Promise(function(resolve, reject) {
        console.group('GET DATA');
        area = {
          'area' : area
        };
        //  console.log( area );
        $.ajax({
          type : "POST",
          url : "/reqWaterDepth.do",
          data : area,
          dataType : 'json',
          beforeSend : function(xhr, opts) {
            console.log("before send");
            // when validation is false
            if (false) {
              xhr.abort();
            }
          },
          success : function(res) {
            console.log("SUCCESS");
//            console.log(res);
            if (res.length === 0
                && JSON.stringify(res) === JSON.stringify([])) {
              alert('해당 영역에 수심데이터가 없습니다.');
              return;
            } else {
              resolve(res);
            }
          },
          error : function(err) {
            console.log("ERR");
            console.error(err.statusText);
            alert('데이터를 처리 하던중 에러가 발생했습니다.\n' + err.statusText + ' : ' + err.status);
            reject(err);
          }
        });
        console.groupEnd('GET DATA');
      })
    }
    getData(area).then(function(data) {
      console.group('THEN');
//      console.log(data);
//      console.log( JSON.stringify(data) );
      drawDepthDataChart(data);
      console.groupEnd('THEN');
    });
  }); //  drawend
  console.groupEnd('getDepthDataAtLine');
} //  lineToSquare
/*
 * source.addFeatures(rw.readFeatures( turf.randomPoint( 5000, {bbox:[-180, -90, 180, 90]} ) ));
 * source.addFeatures( ( new ol.format.GeoJSON()).readFeatures( turf.randomPoint( 5000, {bbox:[-180, -90, 180, 90]} ) ))
 */

var envSurvWmsSrc = new ol.source.TileWMS({
  url : 'http://118.220.143.150:8081/geoserver/EnvironmentSurvey/wms?',
  params : {
    'LAYERS' : 'EnvironmentSurvey:tb_depth_data',
    'TILED' : false,
  },
  serverType : 'geoserver',
  projection : 'EPSG:3857',
  transition : 0
});

var envSurvLyr = new ol.layer.Tile({
  source : envSurvWmsSrc
});

map.addLayer(envSurvLyr);
//map.addLayer(wmsLayer2);
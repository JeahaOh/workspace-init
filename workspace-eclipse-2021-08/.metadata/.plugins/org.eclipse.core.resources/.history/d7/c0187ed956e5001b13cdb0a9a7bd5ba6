package kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import kr.co.hanshinit.NeoCMS.cmm.service.FileMngUtil;
import kr.co.hanshinit.NeoCMS.cmm.service.FileVO;
import kr.co.hanshinit.NeoCMS.cmm.util.DateUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.FileUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.ImageUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.cop.bbs.bfm.service.BbsField;
import kr.co.hanshinit.NeoCMS.cop.bbs.bfm.service.BbsFieldService;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfo;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfoService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnfl;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnflService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAuthorService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNtt;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttRdcnt;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttRdcntService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttVO;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.Bbs;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsService;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsVO;
import kr.co.hanshinit.NeoCMS.cop.sms.service.MsgDataService;
import kr.co.hanshinit.NeoCMS.cop.sms.service.MsgDataVO;
import kr.co.hanshinit.NeoCMS.uat.uia.service.LoginUtil;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;
/**
 * 게시물을 관리하기 위한 서비스 구현 클래스
 * @author (주)한신정보기술 연구개발팀 최관형
 * @since 2014.06.04
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일           수정자     수정내용
 *  ------------- -------- ---------------------------
 *  2014.06.04 최관형     최초 생성
 *  2014.07.03 최관형     통합 게시판을 미니보드 형태로 조회 추가
 *  2015.04.01 최관형     표준프레임워크 3.1 업그레이드 : AbstractServiceImpl -> EgovAbstractServiceImpl
 *  2015.04.01 최관형     표준프레임워크 3.1 업그레이드 : log 방식 변경
 *
 * </pre>
 */
@Service("bbsNttService")
public class BbsNttServiceImpl extends EgovAbstractServiceImpl implements BbsNttService {


	/** smsService */
	@Resource(name="msgDataService")
	private MsgDataService msgDataService;

	/** bbsService */
	@Resource(name="bbsService")
	private BbsService bbsService;

	/** bbsFieldService */
	@Resource(name="bbsFieldService")
	private BbsFieldService bbsFieldService;

	/** bbsInfoService */
	@Resource(name="bbsInfoService")
	private BbsInfoService bbsInfoService;

	/** bbsNttDAO */
	@Resource(name="bbsNttDAO")
	private BbsNttDAO bbsNttDAO;

	/** bbsAtchmnflService */
	@Resource(name="bbsAtchmnflService")
	private BbsAtchmnflService bbsAtchmnflService;

	/** bbsFieldService */
	@Resource(name="FileMngUtil")
	private FileMngUtil fileMngUtil;

	/** bbsNttRdcntService */
	@Resource(name="bbsNttRdcntService")
	private BbsNttRdcntService bbsNttRdcntService;

	/** bbsAuthorService */
	@Resource(name="bbsAuthorService")
	private BbsAuthorService bbsAuthorService;

  @Override
  public void insertBbsNtt(
        MultipartHttpServletRequest multiRequest
        , HttpServletRequest request
        , BbsNttVO bbsNttVO
      ) throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    // 게시판 정보
    Bbs bbs = bbsService.selectBbs(bbsNttVO.getBbsNo());

    // 게시물 번호
    int nttNo = bbsNttDAO.selectBbsNttNoNextVal();
    bbsNttVO.setNttNo(nttNo);
    // 등록일
    String frstRegisterPnttm = DateUtil.getNowDateTime("yyyyMMddHHmmss");
    String frstRegisterId = LoginUtil.getLoginId(request.getSession());
    // 이름
    bbsNttVO.setWriterNm(bbsAuthorService.getUserName(request.getSession()));

    // 공지사항 여부 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    /*
    if ((38 == bbsNttVO.getBbsNo()) || (42 == bbsNttVO.getBbsNo()) || (43 == bbsNttVO.getBbsNo())) {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield2());
    } else if (44 == bbsNttVO.getBbsNo()) {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield4());
    } else {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield1());
    }
    */

    switch( bbsNttVO.getBbsNo() ) {
      case 44 :
        bbsNttVO.setNoticeAt(bbsNttVO.getAditfield4());
        break;
      case 38 :
      case 42 :
      case 43 :
        bbsNttVO.setNoticeAt(bbsNttVO.getAditfield2());
        break;
      default :
        if( !StringUtil.isEmpty(bbsNttVO.getAditfield1()) ) {
          bbsNttVO.setNoticeAt(bbsNttVO.getAditfield1());
        } else {
          // TN_BBS_NTT 테이블의 NOTICE_AT 컬럼은 not null 이므로 null 일시 n으로 세팅
          bbsNttVO.setNoticeAt("N");
        }
    }

    // TN_BBS_NTT 테이블의 NOTICE_AT 컬럼은 not null 이므로 null 일시 n으로 세팅
//    if (StringUtil.isEmpty(bbsNttVO.getNoticeAt())) {
//      bbsNttVO.setNoticeAt("N");
//    }
    // 공지사항 여부 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    // 중복코드
    bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
    // 상위 게시물 번호
    bbsNttVO.setUpperNttNo(0);
    // 게시물 레벨
    bbsNttVO.setNttLevel(0);
    // 게시물 순번
    bbsNttVO.setNttOrdr(-1);
    // 삭제여부
    bbsNttVO.setDeleteAt("N");
    // 조회수
    bbsNttVO.setRdcnt(0);
    // 작성자 IP
    bbsNttVO.setWriterIp(request.getRemoteAddr());
    bbsNttVO.setFrstRegisterPnttm(frstRegisterPnttm);
    bbsNttVO.setFrstRegisterId(frstRegisterId);
    // 에디터 사용여부
    bbsNttVO.setHtmlUseAt(bbsInfo.getEditorUseAt());

    if (StringUtil.isEmpty(bbsNttVO.getOthbcAt()))
      bbsNttVO.setOthbcAt("Y"); // 공개여부가 없다면 공개로
    if ("Y".equals(bbsInfo.getClsdrUseAt())) { // 비공개 게시판이면 무조건 비공개 처리
      bbsNttVO.setOthbcAt("N");
    }
    if (!StringUtil.isEmpty(bbsNttVO.getDeptCode())) { // 부서코드가 있다면 부서명 가져오기
      // bbsNttVO.setDeptNm(organizationService.selectOrganization(bbsNttVO.getDeptCode()).getDeptName());
    }

    // 게시물 등록
    bbsNttDAO.insertBbsNtt(bbsNttVO);

    // 게시물이 146번 민원/신고 -> 민원신청 및 결과조회 -> 민원방문 상담예약 시 문자 발송을 한다
    if (bbsNttVO.getBbsNo() == 146) {
      try {
        List<MsgDataVO> msgDataList = new ArrayList<MsgDataVO>();
        MsgDataVO msgDataVO = new MsgDataVO();
        msgDataVO.setCurState(0);
        String decPhone = "01052434967";
        // String decPhone = "01095943674";
        msgDataVO.setCallTo(decPhone);
        msgDataVO.setCallFrom("0317906062");
        msgDataVO.setSmsTxt("민원방문 상담예약 게시글이 접수되었습니다.");
        msgDataVO.setMsgType(4);
        msgDataList.add(msgDataVO);
        msgDataService.insertMsgDataStaff(msgDataList);
      } catch (Exception e) {
        StringUtil.printException(e);
      }
    }



    // 게시물 순번
    bbsNttDAO.updateNttOrdrPlus(bbsNttVO.getBbsNo());

    /* 첨부파일 등록 */
    String BBS_STORE_PATH = "/DATA/bbs/";
    String BBS_NTT_STORE_PATH = BBS_STORE_PATH + bbsNttVO.getBbsNo();
    String BBS_NTT_THUMB_STORE_PATH = BBS_NTT_STORE_PATH + "/thumb";
    String bbsDir = fileMngUtil.realPath(request, BBS_STORE_PATH);
    String bbsNttDir = fileMngUtil.realPath(request, BBS_NTT_STORE_PATH);
    String bbsNttThumnDir = fileMngUtil.realPath(request, BBS_NTT_THUMB_STORE_PATH);
    fileMngUtil.mkdir(bbsDir);
    fileMngUtil.mkdir(bbsNttDir);
    fileMngUtil.mkdir(bbsNttThumnDir);


    String[] arrFileType = bbsInfo.getPosblAtchmnflExtsn().split(",");
    long maxFileSize = bbsInfo.getPosblAtchmnflSize() * 1024 * 1024;
    // 유효성 검사 및 저장
    List<FileVO> fileVOList = fileMngUtil.parseFileInfMulti(multiRequest.getFiles("atchmnfl"),
        bbsNttDir, maxFileSize, arrFileType, null, "", null);

    for (int i = 0; i < fileVOList.size(); i++) {
      BbsAtchmnfl bbsAtchmnfl = new BbsAtchmnfl();
      bbsAtchmnfl.setBbsNo(bbsNttVO.getBbsNo()); // 게시판 번호
      bbsAtchmnfl.setNttNo(nttNo); // 게시물 번호
      bbsAtchmnfl.setStorePath(BBS_STORE_PATH + bbsNttVO.getBbsNo()); // 저장경로
      bbsAtchmnfl.setFileNm(fileVOList.get(i).getOrignlFileNm()); // 파일명
      bbsAtchmnfl.setStoreFileNm(fileVOList.get(i).getStreFileNm()); // 저장파일명
      // 대체텍스트
      bbsAtchmnfl.setReplcText( StringUtil.htmlSpecialChars( bbsNttVO.getReplcText()[i] ) );
      bbsAtchmnfl.setFrstRegisterPnttm(frstRegisterPnttm);
      bbsAtchmnfl.setFrstRegisterId(frstRegisterId);
      bbsAtchmnfl.setFileExtsn(fileVOList.get(i).getFileExtsn());
      if ("photo".equals(bbs.getSkinId())) { // 포토게시판인경우 무조건 본문삽입
        bbsAtchmnfl.setBdtInsrtAt("Y"); // 본분삽입여부
      } else {
        bbsAtchmnfl.setBdtInsrtAt("N"); // 본분삽입여부
        if (null != bbsNttVO.getBdtInsrtAt()) {
          for (int j = 0; j < bbsNttVO.getBdtInsrtAt().length; j++) {
            if (String.valueOf(i).equals(bbsNttVO.getBdtInsrtAt()[j])) {
              bbsAtchmnfl.setBdtInsrtAt("Y"); // 본분삽입여부
              break;
            }
          }
        }
      }
      bbsAtchmnflService.insertBbsAtchmnfl(bbsAtchmnfl);

      // 이미지 변환이면 -> 운영에서 이 부분 에러 로그 찍힘.
      if ("Y".equals(bbsInfo.getImageUseAt())) {
        ImageUtil.createThumb(
            fileMngUtil.realPath(request, BBS_NTT_STORE_PATH + "/" + bbsAtchmnfl.getStoreFileNm()),
            fileMngUtil.realPath(request,
                BBS_NTT_THUMB_STORE_PATH + "/t_" + bbsAtchmnfl.getStoreFileNm()),
            bbsInfo.getThumbSizeWidth(), bbsInfo.getThumbSizeHeight(), "FIX");
      }

    }

    // 하남 티비의 경우 영상을 올림.
    if ("hanamtv".equals(bbs.getSkinId())) {
      // 영상이 있을 경우 -> tlqkf djEjs qudtlsdl whrjsdmf dlfjgrp Emldnsi gk....
      // /data/was2/hanam/WEB//dext5uploaddata/
      if (
      bbsNttVO.getOriginalFileName() != null && !bbsNttVO.getOriginalFileName().equals("")
          && bbsNttVO.getUploadFile() != null && !bbsNttVO.getUploadFile().equals("")
          ) {
        // 기본 설정은 /data/web2/hanam/hanam/WEB/common/dext5upload/handler/otherFile.jsp 에서 확인 가능
        // "/data/was2/hanam/WEB/dext5uploaddata"
        String orgnlUploadPath = fileMngUtil.realPath(request, "/dext5uploaddata");
        // = orgnlUploadPath + File.separator + "C_" + uploadFileName;
        String orgMediaFile = orgnlUploadPath + File.separator + bbsNttVO.getUploadFile();
        String movMediaFile = fileMngUtil.realPath(request,
            BBS_STORE_PATH + bbsNttVO.getBbsNo() + File.separator + bbsNttVO.getUploadFile());
        FileUtil.copyFile(orgMediaFile, movMediaFile);
        BbsAtchmnfl bbsAtchmnfl = new BbsAtchmnfl();
        bbsAtchmnfl.setBbsNo(bbsNttVO.getBbsNo()); // 게시판 번호
        bbsAtchmnfl.setNttNo(nttNo); // 게시물 번호
        bbsAtchmnfl.setStorePath(BBS_STORE_PATH + bbsNttVO.getBbsNo()); // 저장경로
        bbsAtchmnfl.setFileNm(bbsNttVO.getOriginalFileName()); // 파일명
        bbsAtchmnfl.setStoreFileNm(bbsNttVO.getUploadFile()); // 저장파일명
        bbsAtchmnfl.setFrstRegisterPnttm(frstRegisterPnttm);
        bbsAtchmnfl.setFrstRegisterId(frstRegisterId);
        bbsAtchmnfl.setFileExtsn(FileMngUtil.getFileExt(bbsNttVO.getOriginalFileName()));
        bbsAtchmnfl.setBdtInsrtAt("N"); // 본분삽입여부
        bbsAtchmnflService.insertBbsAtchmnfl(bbsAtchmnfl);
      }
    }
  }

	@Override
	public void insertBbsNttReply(MultipartHttpServletRequest multiRequest, HttpServletRequest request, BbsNttVO bbsNttVO) throws Exception {

		/* 게시물 계층형 구조 ****************************************************************/

		int upperNttNo = bbsNttVO.getNttNo();
		int nttOrdr = -1;
		int nttLevel = 0;

		// 상위 게시물 정보
		BbsNtt bbsNtt = this.selectBbsNtt(bbsNttVO.getNttNo());

		// 조회 파라미터
		BbsNtt tmpBbsNtt = new BbsNtt();
		tmpBbsNtt.setBbsNo(bbsNttVO.getBbsNo());
		tmpBbsNtt.setNttNo(bbsNttVO.getNttNo());
		tmpBbsNtt.setUpperNttNo(bbsNttVO.getNttNo());

		// 게시물 레벨
		nttLevel = bbsNtt.getNttLevel() + 1;

		// 하위 게시물중 가장 마지막 게시물 번호
		Integer lwprtLastIdxNttNo = bbsNttDAO.selectBbsNttLwprtLastOrdr(tmpBbsNtt);

		lwprtLastIdxNttNo = ( null == lwprtLastIdxNttNo ) ? tmpBbsNtt.getNttNo() : lwprtLastIdxNttNo;

		tmpBbsNtt.setUpperNttNo(lwprtLastIdxNttNo);

		Integer lwprtMaxIdx = bbsNttDAO.selectBbsNttLwprtMaxOrdr(tmpBbsNtt);

		if( null == lwprtMaxIdx ) {
			tmpBbsNtt.setNttNo(lwprtLastIdxNttNo);
			nttOrdr = bbsNttDAO.selectBbsNttOrdr(tmpBbsNtt);
		} else {
			nttOrdr = lwprtMaxIdx;
		}

		nttOrdr = nttOrdr + 1;

		// 상위 게시물
		bbsNttVO.setUpperNttNo(upperNttNo);
		// 게시물 순번
		bbsNttVO.setNttOrdr(nttOrdr);
		// 게시물 레벨
		bbsNttVO.setNttLevel(nttLevel);
		/*****************************************************************************/

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		// 게시판 정보
		Bbs bbs = bbsService.selectBbs(bbsNttVO.getBbsNo());

		int nttNo = bbsNttDAO.selectBbsNttNoNextVal();  // 게시물 번호
		String frstRegisterPnttm = DateUtil.getNowDateTime("yyyyMMddHHmmss");  // 등록일
		String frstRegisterId = LoginUtil.getLoginId(request.getSession());
		bbsNttVO.setNttNo(nttNo);
		bbsNttVO.setWriterNm(bbsAuthorService.getUserName(request.getSession()));  // 이름
		bbsNttVO.setNoticeAt("N");  // 공지사항 여부
		bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));  // 중복코드
		bbsNttVO.setDeleteAt("N");  // 삭제여부
		bbsNttVO.setRdcnt(0);  // 조회수
		bbsNttVO.setWriterIp(request.getRemoteAddr());  // 작성자 IP
		bbsNttVO.setFrstRegisterPnttm(frstRegisterPnttm);
		bbsNttVO.setFrstRegisterId(frstRegisterId);
		bbsNttVO.setHtmlUseAt(bbsInfo.getEditorUseAt());  // 에디터 사용여부
		if( StringUtil.isEmpty(bbsNttVO.getOthbcAt()) ) bbsNttVO.setOthbcAt("Y");  // 공개여부가 없다면 공개로
		if( "Y".equals(bbsInfo.getClsdrUseAt()) ) {  // 비공개 게시판이면 무조건 비공개 처리
			bbsNttVO.setOthbcAt("N");
		}
		if( !StringUtil.isEmpty(bbsNttVO.getDeptCode()) ) {  // 부서코드가 있다면 부서명 가져오기
//			bbsNttVO.setDeptNm(organizationService.selectOrganization(bbsNttVO.getDeptCode()).getDeptName());
		}

		// 게시물 등록
		bbsNttDAO.insertBbsNtt(bbsNttVO);

		// 게시물 순번
		bbsNttDAO.updateNttReplyOrdrPlus(bbsNttVO);

		/* 첨부파일 등록 */
		String BBS_STORE_PATH = "/DATA/bbs/";
		String BBS_NTT_STORE_PATH = BBS_STORE_PATH + bbsNttVO.getBbsNo();
		String BBS_NTT_THUMB_STORE_PATH = BBS_NTT_STORE_PATH + "/thumb";
		String bbsDir = fileMngUtil.realPath(request, BBS_STORE_PATH);
		String bbsNttDir = fileMngUtil.realPath(request, BBS_NTT_STORE_PATH);
		String bbsNttThumnDir = fileMngUtil.realPath(request, BBS_NTT_THUMB_STORE_PATH);
		fileMngUtil.mkdir(bbsDir);
		fileMngUtil.mkdir(bbsNttDir);
		fileMngUtil.mkdir(bbsNttThumnDir);

		String[] arrFileType = bbsInfo.getPosblAtchmnflExtsn().split(",");
		long maxFileSize = bbsInfo.getPosblAtchmnflSize() * 1024 * 1024;
		// 유효성 검사 및 저장
		List<FileVO> fileVOList = fileMngUtil.parseFileInfMulti(multiRequest.getFiles("atchmnfl"), bbsNttDir, maxFileSize, arrFileType, null, "", null);

		for( int i=0; i<fileVOList.size(); i++ ) {
			BbsAtchmnfl bbsAtchmnfl = new BbsAtchmnfl();
			bbsAtchmnfl.setBbsNo(bbsNttVO.getBbsNo());  // 게시판 번호
			bbsAtchmnfl.setNttNo(nttNo);  // 게시물 번호
			bbsAtchmnfl.setStorePath(BBS_STORE_PATH + bbsNttVO.getBbsNo());  // 저장경로
			bbsAtchmnfl.setFileNm(fileVOList.get(i).getOrignlFileNm());  // 파일명
			bbsAtchmnfl.setStoreFileNm(fileVOList.get(i).getStreFileNm());  // 저장파일명
			bbsAtchmnfl.setReplcText(bbsNttVO.getReplcText()[i]);  // 대체텍스트
			bbsAtchmnfl.setFrstRegisterPnttm(frstRegisterPnttm);
			bbsAtchmnfl.setFrstRegisterId(frstRegisterId);
			bbsAtchmnfl.setFileExtsn(fileVOList.get(i).getFileExtsn());
			if( "photo".equals(bbs.getSkinId()) ) {  // 포토게시판인경우 무조건 본문삽입
				bbsAtchmnfl.setBdtInsrtAt("Y");  // 본분삽입여부
			} else {
				bbsAtchmnfl.setBdtInsrtAt("N");  // 본분삽입여부
				if( null != bbsNttVO.getBdtInsrtAt() ) {
					for( int j=0; j<bbsNttVO.getBdtInsrtAt().length; j++ ) {
						if( String.valueOf(i).equals(bbsNttVO.getBdtInsrtAt()[j]) ) {
							bbsAtchmnfl.setBdtInsrtAt("Y");  // 본분삽입여부
							break;
						}
					}
				}
			}
			bbsAtchmnflService.insertBbsAtchmnfl(bbsAtchmnfl);

			// 이미지 변환이면
			if( "Y".equals(bbsInfo.getImageUseAt()) ) {
				ImageUtil.createThumb(fileMngUtil.realPath(request, BBS_NTT_STORE_PATH + "/" + bbsAtchmnfl.getStoreFileNm()),
						fileMngUtil.realPath(request, BBS_NTT_THUMB_STORE_PATH + "/t_" + bbsAtchmnfl.getStoreFileNm()),
						bbsInfo.getThumbSizeWidth(), bbsInfo.getThumbSizeHeight(), "FIX");
			}

		}

	}

	@Override
	public void updateBbsNtt(MultipartHttpServletRequest multiRequest, HttpServletRequest request, BbsNttVO bbsNttVO) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		// 게시판 정보
		Bbs bbs = bbsService.selectBbs(bbsNttVO.getBbsNo());

		String frstRegisterPnttm = DateUtil.getNowDateTime("yyyyMMddHHmmss");  // 수정일
		String frstRegisterId = LoginUtil.getLoginId(request.getSession());

    // 공지사항 여부 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    /*
    if ((38 == bbsNttVO.getBbsNo()) || (42 == bbsNttVO.getBbsNo()) || (43 == bbsNttVO.getBbsNo())) {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield2());
    } else if (44 == bbsNttVO.getBbsNo()) {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield4());
    } else {
      bbsNttVO.setNoticeAt(bbsNttVO.getAditfield1());
    }
    */

    switch( bbsNttVO.getBbsNo() ) {
      case 44 :
        bbsNttVO.setNoticeAt(bbsNttVO.getAditfield4());
        break;
      case 38 :
      case 42 :
      case 43 :
        bbsNttVO.setNoticeAt(bbsNttVO.getAditfield2());
        break;
      default :
        if( !StringUtil.isEmpty(bbsNttVO.getAditfield1()) ) {
          bbsNttVO.setNoticeAt(bbsNttVO.getAditfield1());
        } else {
          // TN_BBS_NTT 테이블의 NOTICE_AT 컬럼은 not null 이므로 null 일시 n으로 세팅
          bbsNttVO.setNoticeAt("N");
        }
    }

    // TN_BBS_NTT 테이블의 NOTICE_AT 컬럼은 not null 이므로 null 일시 n으로 세팅
//    if (StringUtil.isEmpty(bbsNttVO.getNoticeAt())) {
//      bbsNttVO.setNoticeAt("N");
//    }
    // 공지사항 여부 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



		bbsNttVO.setWriterIp(request.getRemoteAddr());  // 작성자 IP
		bbsNttVO.setLastUpdusrPnttm(frstRegisterPnttm);
		bbsNttVO.setLastUpdusrId(frstRegisterId);
		if( !StringUtil.isEmpty(bbsNttVO.getDeptCode()) ) {  // 부서코드가 있다면 부서명 가져오기
//			bbsNttVO.setDeptNm(organizationService.selectOrganization(bbsNttVO.getDeptCode()).getDeptName());
		}

		// 게시물 수정
		bbsNttDAO.updateBbsNtt(bbsNttVO);

		if( !"photo".equals(bbs.getSkinId()) ) {  // 포토게시판인경우 무조건 본문삽입
			/* 본문삽입 처리 */
			bbsAtchmnflService.updateBbsAtchmnflBdtInsrtAtAllN(bbsNttVO.getNttNo());
			for( int i=0; i<bbsInfo.getPosblAtchmnflCo(); i++ ) {
				String bdtInsrtAtTy = request.getParameter("bdtInsrtAtTy" + i);
				if( !StringUtil.isEmpty(bdtInsrtAtTy) ) {
					bbsAtchmnflService.updateBbsAtchmnflBdtInsrtAtY(Integer.valueOf(bdtInsrtAtTy));
				}
			}
		}
		//하남tv의 경우 썸네일을 하나 올리지만 첨부파일은 2개로 강제 지정
		int posblAtchmnflCo = bbsInfo.getPosblAtchmnflCo();

		if( "hanamtv".equals(bbs.getSkinId()) ) {
			posblAtchmnflCo++;
		}

		/* 첨부파일 삭제 */
		for( int i=0; i<posblAtchmnflCo; i++ ) {
			String fileProcTy = request.getParameter("fileProcTy" + i);
			if( !StringUtil.isEmpty(fileProcTy) ) {
				if( !"U".equals(fileProcTy) ) {
					bbsAtchmnflService.deleteBbsAtchmnfl(Integer.valueOf(fileProcTy));
				}
			}
		}

		/* 첨부파일 등록 */
		String BBS_STORE_PATH = "/DATA/bbs/";
		String BBS_NTT_STORE_PATH = BBS_STORE_PATH + bbsNttVO.getBbsNo();
		String BBS_NTT_THUMB_STORE_PATH = BBS_NTT_STORE_PATH + "/thumb";
		String bbsDir = fileMngUtil.realPath(request, BBS_STORE_PATH);
		String bbsNttDir = fileMngUtil.realPath(request, BBS_NTT_STORE_PATH);
		String bbsNttThumnDir = fileMngUtil.realPath(request, BBS_NTT_THUMB_STORE_PATH);
		fileMngUtil.mkdir(bbsDir);
		fileMngUtil.mkdir(bbsNttDir);
		fileMngUtil.mkdir(bbsNttThumnDir);

		String[] arrFileType = bbsInfo.getPosblAtchmnflExtsn().split(",");
		long maxFileSize = bbsInfo.getPosblAtchmnflSize() * 1024 * 1024;
		// 유효성 검사 및 저장
		List<FileVO> fileVOList = fileMngUtil.parseFileInfMulti(multiRequest.getFiles("atchmnfl"), bbsNttDir, maxFileSize, arrFileType, null, "", null);

		for( int i=0; i<fileVOList.size(); i++ ) {
			BbsAtchmnfl bbsAtchmnfl = new BbsAtchmnfl();
			bbsAtchmnfl.setBbsNo(bbsNttVO.getBbsNo());  // 게시판 번호
			bbsAtchmnfl.setNttNo(bbsNttVO.getNttNo());  // 게시물 번호
			bbsAtchmnfl.setStorePath(BBS_STORE_PATH + bbsNttVO.getBbsNo());  // 저장경로
			bbsAtchmnfl.setFileNm(fileVOList.get(i).getOrignlFileNm());  // 파일명
			bbsAtchmnfl.setStoreFileNm(fileVOList.get(i).getStreFileNm());  // 저장파일명
			bbsAtchmnfl.setReplcText(bbsNttVO.getReplcText()[i]);  // 대체텍스트
			bbsAtchmnfl.setFrstRegisterPnttm(frstRegisterPnttm);
			bbsAtchmnfl.setFrstRegisterId(frstRegisterId);
			bbsAtchmnfl.setFileExtsn(fileVOList.get(i).getFileExtsn());
			if( "photo".equals(bbs.getSkinId()) ) {  // 포토게시판인경우 무조건 본문삽입
				bbsAtchmnfl.setBdtInsrtAt("Y");  // 본분삽입여부
			} else {
				bbsAtchmnfl.setBdtInsrtAt("N");  // 본분삽입여부
				if( null != bbsNttVO.getBdtInsrtAt() ) {
					for( int j=0; j<bbsNttVO.getBdtInsrtAt().length; j++ ) {
						if( String.valueOf(i).equals(bbsNttVO.getBdtInsrtAt()[j]) ) {
							bbsAtchmnfl.setBdtInsrtAt("Y");  // 본분삽입여부
							break;
						}
					}
				}
			}
			bbsAtchmnflService.insertBbsAtchmnfl(bbsAtchmnfl);

			// 이미지 변환이면
			if( "Y".equals(bbsInfo.getImageUseAt()) ) {
				ImageUtil.createThumb(fileMngUtil.realPath(request, BBS_NTT_STORE_PATH + "/" + bbsAtchmnfl.getStoreFileNm()),
						fileMngUtil.realPath(request, BBS_NTT_THUMB_STORE_PATH + "/t_" + bbsAtchmnfl.getStoreFileNm()),
						bbsInfo.getThumbSizeWidth(), bbsInfo.getThumbSizeHeight(), "FIX");
			}
		}

		//하남 티비의 경우 영상을 올림.
		if( "hanamtv".equals(bbs.getSkinId()) ) {
			//영상이 있을 경우
			// /data/was2/hanam/WEB//dext5uploaddata/
			if(

					bbsNttVO.getOriginalFileName() != null && !bbsNttVO.getOriginalFileName().equals("")
					&&
					bbsNttVO.getUploadFile() != null && !bbsNttVO.getUploadFile().equals("")
				)
			{
				//기본 설정은 /data/web2/hanam/hanam/WEB/common/dext5upload/handler/otherFile.jsp 에서 확인 가능
				// "/data/was2/hanam/WEB/dext5uploaddata"
				String orgnlUploadPath = fileMngUtil.realPath(request, "/dext5uploaddata");
				//= orgnlUploadPath + File.separator + "C_" + uploadFileName;
				String orgMediaFile =  orgnlUploadPath +File.separator+ bbsNttVO.getUploadFile();
				String movMediaFile = fileMngUtil.realPath(request, BBS_STORE_PATH + bbsNttVO.getBbsNo()  +File.separator+
						bbsNttVO.getUploadFile());
				FileUtil.copyFile(orgMediaFile, movMediaFile);
				BbsAtchmnfl bbsAtchmnfl = new BbsAtchmnfl();
				bbsAtchmnfl.setBbsNo(bbsNttVO.getBbsNo());  // 게시판 번호
				bbsAtchmnfl.setNttNo(bbsNttVO.getNttNo());  // 게시물 번호
				bbsAtchmnfl.setStorePath(BBS_STORE_PATH + bbsNttVO.getBbsNo());  // 저장경로
				bbsAtchmnfl.setFileNm(bbsNttVO.getOriginalFileName());  // 파일명
				bbsAtchmnfl.setStoreFileNm(bbsNttVO.getUploadFile());  // 저장파일명
				bbsAtchmnfl.setFrstRegisterPnttm(frstRegisterPnttm);
				bbsAtchmnfl.setFrstRegisterId(frstRegisterId);
				bbsAtchmnfl.setFileExtsn(FileMngUtil.getFileExt(bbsNttVO.getOriginalFileName()));
				bbsAtchmnfl.setBdtInsrtAt("N");  // 본분삽입여부
				bbsAtchmnflService.insertBbsAtchmnfl(bbsAtchmnfl);
			}

		}
	}

	@Override
	public String[] validateBbsNtt(BbsNttVO bbsNttVO) throws Exception {

		String[] arrValidate = new String[3];
		arrValidate[0] = "0";       // 오류여부
		arrValidate[1] = "";         // 필드명
		arrValidate[2] = "";         // 메시지

		// 입력 목록
		List<BbsField> bbsFieldInputList = bbsFieldService.selectInputShowList(bbsNttVO.getBbsNo());

		int bbsFieldInputListCnt = bbsFieldInputList.size();
		for( int i=0; i<bbsFieldInputListCnt; i++ ) {
			// 필드 정보
			BbsField bbsField = bbsFieldInputList.get(i);
			// 필드코드
			String fieldCode = bbsField.getFieldCode();
			// 자동입력 건너띄기
			if( "NO".equals(fieldCode) || "WRTER".equals(fieldCode) || "FILE".equals(fieldCode) || "RDCNT".equals(fieldCode) || "RGSDE".equals(fieldCode) || "WRITERIP".equals(fieldCode) ) continue;
			// 메시지 타입
			String msgType = "INPUT";
			// 필드 데이터
			String fieldValue = "";
			// 필드 명
			String fieldNm = "";
			// 필수 인 것만
			if( "1".equals(bbsField.getEssntlAt()) || "3".equals(bbsField.getEssntlAt()) ) {
				// 카테고리, 부서, 공개여부
				if( "CTGRY".equals(fieldCode) || "DEPT".equals(fieldCode) || "OTHBCAT".equals(fieldCode) ) {
					msgType = "SELECT";
				}
				if( "N".equals(bbsField.getAditFieldAt()) ) {
					// 필드 값, 필드명
					if( "CTGRY".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getCtgryNm();
						fieldNm = "ctgryNm";
					} else if( "DEPT".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getDeptCode();
						fieldNm = "deptCode";
					} else if( "OTHBCAT".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getOthbcAt();
						fieldNm = "othbcAt";
					} else if( "ADRES".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getZip();
						fieldNm = "";
					} else if( "CN".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getNttCn();
						fieldNm = "nttCn";
					} else if( "BGNDE".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getBgnde();
						fieldNm = "bgnde";
					} else if( "ENDDE".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getEndde();
						fieldNm = "endde";
					} else if( "SJ".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getNttSj();
						fieldNm = "nttSj";
					} else if( "CTTPC".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getTelno();
						fieldNm = "telno";
					} else if( "MOBLPHON".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getMoblphon();
						fieldNm = "moblphon";
					} else if( "EMAIL".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getEmail();
						fieldNm = "email";
					} else if( "HMPG".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getHmpg();
						fieldNm = "hmpg";
					}
				} else {
					// 추가필드중 radio, select, checkbox
					if( "FESE04".equals(bbsField.getFieldSe()) || "FESE05".equals(bbsField.getFieldSe()) || "FESE06".equals(bbsField.getFieldSe()) || "FESE09".equals(bbsField.getFieldSe()) ) {
						msgType = "SELECT";
					}
					if( "ADITFIELD1".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield1();
						fieldNm = "aditfield1";
					} else if( "ADITFIELD2".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield2();
						fieldNm = "aditfield2";
					} else if( "ADITFIELD3".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield3();
						fieldNm = "aditfield3";
					} else if( "ADITFIELD4".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield4();
						fieldNm = "aditfield4";
					} else if( "ADITFIELD5".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield5();
						fieldNm = "aditfield5";
					} else if( "ADITFIELD6".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield6();
						fieldNm = "aditfield6";
					} else if( "ADITFIELD7".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield7();
						fieldNm = "aditfield7";
					} else if( "ADITFIELD8".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield8();
						fieldNm = "aditfield8";
					} else if( "ADITFIELD9".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield9();
						fieldNm = "aditfield9";
					} else if( "ADITFIELD10".equals(bbsField.getFieldCode()) ) {
						fieldValue = bbsNttVO.getAditfield10();
						fieldNm = "aditfield10";
					}
					// radio, checkbox 는 focus없음
					if( "FESE04".equals(bbsField.getFieldSe()) || "FESE06".equals(bbsField.getFieldSe()) ) {
						fieldNm = "";
					}
				}
				// 입력값이 없다면
				if( StringUtil.isEmpty(fieldValue) ) {
					arrValidate[0] = "1";
					arrValidate[1] = fieldNm;
					if( "SELECT".equals(msgType) ) {
						arrValidate[2] = bbsField.getFieldUseNm() + " (을)를 선택 해주세요.";
					} else {
						arrValidate[2] = bbsField.getFieldUseNm() + " (을)를 입력 해주세요.";
					}
					break;
				}
			}

		}

		return arrValidate;

	}





	//selectBbsNttListRss
	@Override
	public List<BbsNttVO> selectBbsNttListRss(BbsInfo bbsInfo, BbsNttVO bbsNttVO) throws Exception {

		// 게시물 순번
		String sortSql = "";
		if( "SOFL01".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.FRST_REGISTER_PNTTM ";
		} else if( "SOFL02".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.LAST_UPDUSR_PNTTM ";
		} else if( "SOFL03".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.NTT_SJ ";
		} else if( "SOFL04".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.CTGRY_NM ";
		} else if( "SOFL05".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.RDCNT ";
		} else if( "SOFL06".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.NTT_ORDR ";
		}
		if( !StringUtil.isEmpty(sortSql) ) {
			sortSql+=bbsInfo.getSortMth();
		}
		bbsNttVO.setSortSql(sortSql);

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsNttListRss(bbsNttVO);

		// new아이콘 표시
		if( "Y".equals(bbsInfo.getNewIconShowAt()) ) {
			long newIconDateRange = Long.parseLong(DateUtil.getDateAddDay(-bbsInfo.getNewIconCnd()));
			for( int i=0; i<bbsNttList.size(); i++ ) {
				Long dataDate = Long.parseLong(bbsNttList.get(i).getFrstRegisterPnttm());
				bbsNttList.get(i).setNewIcon( newIconDateRange < dataDate ? true : false );
			}
		}

		// cool아이콘
		if ("Y".equals(bbsInfo.getCoolIconShowAt())) {
			for( int i=0; i<bbsNttList.size(); i++ ) {
				bbsNttList.get(i).setCoolIcon( bbsNttList.get(i).getRdcnt() >= bbsInfo.getCoolIconCnd() ? true : false );
			}
		}

		// FAQ이면 내용을 HTML -> TEXt로 변환
		for( int i=0; i<bbsNttList.size(); i++ ) {
			if( "N".equals(bbsNttList.get(i).getHtmlUseAt()) ) {
				String nttCn = bbsNttList.get(i).getNttCn();
				bbsNttList.get(i).setNttCn(StringUtil.html2text(nttCn));
			}
		}

		return bbsNttList;

	}



	@Override
	public List<BbsNttVO> selectBbsNttMiniListNewsMain(BbsNttVO bbsNttVO, int listSize) throws Exception {
		bbsNttVO.setFirstIndex(0);
		bbsNttVO.setLastIndex(listSize);
		return  bbsNttDAO.selectBbsNttMiniListNewsMain(bbsNttVO);
	}

	@Override
	public List<BbsNttVO> selectBbsNttList(BbsInfo bbsInfo, BbsNttVO bbsNttVO) throws Exception {

		// 게시물 순번
		String sortSql = "";
		if( "SOFL01".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.FRST_REGISTER_PNTTM ";
		} else if( "SOFL02".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.LAST_UPDUSR_PNTTM ";
		} else if( "SOFL03".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.NTT_SJ ";
		} else if( "SOFL04".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.CTGRY_NM ";
		} else if( "SOFL05".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.RDCNT ";
		} else if( "SOFL06".equals(bbsInfo.getSortField()) ) {
			sortSql = "ORDER BY NTT.NOTICE_AT DESC, NTT.NTT_ORDR ";
		}
		if( !StringUtil.isEmpty(sortSql) ) {
			sortSql+=bbsInfo.getSortMth();
		}
		bbsNttVO.setSortSql(sortSql);

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsNttList(bbsNttVO);
		//뉴스 하남의 경우 전체 리스트 보여줌
		BbsVO bbsVO = bbsService.selectBbs(bbsInfo.getBbsNo());
		if( "mmnws".equals(bbsVO.getSkinId()) || "hanamtv".equals(bbsVO.getSkinId()) )
		{
			bbsNttList = bbsNttDAO.selectBbsNttListAllNttCn(bbsNttVO);
		}



		// new아이콘 표시
		if( "Y".equals(bbsInfo.getNewIconShowAt()) ) {
			long newIconDateRange = Long.parseLong(DateUtil.getDateAddDay(-bbsInfo.getNewIconCnd()));
			for( int i=0; i<bbsNttList.size(); i++ ) {
				Long dataDate = Long.parseLong(bbsNttList.get(i).getFrstRegisterPnttm());
				bbsNttList.get(i).setNewIcon( newIconDateRange < dataDate ? true : false );
			}
		}

		// cool아이콘
		if ("Y".equals(bbsInfo.getCoolIconShowAt())) {
			for( int i=0; i<bbsNttList.size(); i++ ) {
				bbsNttList.get(i).setCoolIcon( bbsNttList.get(i).getRdcnt() >= bbsInfo.getCoolIconCnd() ? true : false );
			}
		}

		// FAQ이면 내용을 HTML -> TEXt로 변환
		for( int i=0; i<bbsNttList.size(); i++ ) {
			if( "N".equals(bbsNttList.get(i).getHtmlUseAt()) ) {
				String nttCn = bbsNttList.get(i).getNttCn();
				bbsNttList.get(i).setNttCn(StringUtil.html2text(nttCn));
			}
		}

		return bbsNttList;

	}

	@Override
	public int selectBbsNttTotCnt(BbsNttVO bbsNttVO) throws Exception {
		egovLogger.debug(bbsNttVO.toString());
		return bbsNttDAO.selectBbsNttTotCnt(bbsNttVO);
	}

	@Override
	public BbsNtt selectBbsNtt(BbsNttVO bbsNttVO) throws Exception {
		return bbsNttDAO.selectBbsNtt(bbsNttVO);
	}

	@Override
	public BbsNtt selectBbsNtt(int nttNo) throws Exception {
		BbsNttVO bbsNttVO = new BbsNttVO();
		bbsNttVO.setNttNo(nttNo);
		return selectBbsNtt(bbsNttVO);
	}

	@Override
	public void updateBbsNttDeleteAt(int nttNo) throws Exception {
		BbsNtt bbsNtt = new BbsNtt();
		bbsNtt.setNttNo(nttNo);
		bbsNttDAO.updateBbsNttDeleteAt(bbsNtt);
	}

	@Override
	public void updateBbsNttRdcnt(HttpServletRequest request, BbsNttVO bbsNttVO) throws Exception {

	 	String rdate = DateUtil.getNowDateTime("yyyyMMddHHmmss");
		BbsNttRdcnt bbsNttRdcnt = new BbsNttRdcnt();
		bbsNttRdcnt.setNttNo(bbsNttVO.getNttNo());
		bbsNttRdcnt.setRdIp(request.getRemoteAddr());
		bbsNttRdcnt.setFrstRegisterPnttm(rdate);
		bbsNttRdcnt.setFrstRegisterId(LoginUtil.getLoginId(request.getSession()));
		bbsNttRdcnt.setLastUpdusrPnttm(rdate);
		bbsNttRdcnt.setLastUpdusrId(LoginUtil.getLoginId(request.getSession()));

		// 어제까지 저장된 히트로그 데이터 삭제
		bbsNttRdcntService.deleteBbsNttRdcntToDay();

		// 오늘 저장된 히트로그 확인
		if( bbsNttRdcntService.selectBbsNttRdcntCheck(bbsNttRdcnt) > 0 ) {
			//bbsNttRdcntService.updateBbsNttRdcnt(bbsNttRdcnt);
		} else {
			bbsNttRdcntService.insertBbsNttRdcnt(bbsNttRdcnt);
			bbsNttDAO.updateBbsNttRdcnt(bbsNttVO);
		}

	}

	@Override
	public List<BbsNttVO> selectBbsMiniList(int bbsNo, int listSize) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNo);

		BbsNttVO bbsNttVO = new BbsNttVO();
		bbsNttVO.setBbsNo(bbsNo);
		bbsNttVO.setFirstIndex(0);
		bbsNttVO.setLastIndex(listSize);

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsMiniList(bbsNttVO);





		long newIconDateRange = Long.parseLong(DateUtil.getDateAddDay(-bbsInfo.getNewIconCnd()));

		for( int i=0; i<bbsNttList.size(); i++ ) {
			if(bbsNttList.get(i).getNttCn() != null)
			bbsNttList.get(i).setNttCn(StringUtil.removeTag(bbsNttList.get(i).getNttCn()));
			// new 아이콘 표시
			Long dataDate = Long.parseLong(bbsNttList.get(i).getFrstRegisterPnttm());
			bbsNttList.get(i).setNewIcon( newIconDateRange < dataDate ? true : false );
		}

		//뉴스하남쪽 관련 메뉴는 전체 보여줌
		if(bbsNttVO.getBbsNo() == 1164 || bbsNttVO.getBbsNo() == 1184 ||bbsNttVO.getBbsNo() == 1185
				||bbsNttVO.getBbsNo() == 1186||bbsNttVO.getBbsNo() == 1187
				||bbsNttVO.getBbsNo() == 1188||bbsNttVO.getBbsNo() == 1189 || bbsNttVO.getBbsNo() == 1204)
		{
			bbsNttList = bbsNttDAO.selectBbsNewsMiniList(bbsNttVO);
		}


		return bbsNttList;

	}

	@Override
	public List<BbsNttVO> selectBbsMiniList(int bbsNo, int listSize, String integrDeptCode, String indvdlzShowAt) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNo);

		BbsNttVO bbsNttVO = new BbsNttVO();
		bbsNttVO.setBbsNo(bbsNo);
		bbsNttVO.setFirstIndex(0);
		bbsNttVO.setLastIndex(listSize);
		bbsNttVO.setIntegrDeptCode(integrDeptCode);
		bbsNttVO.setIndvdlzShowAt(indvdlzShowAt);

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsMiniList(bbsNttVO);

		long newIconDateRange = Long.parseLong(DateUtil.getDateAddDay(-bbsInfo.getNewIconCnd()));

		for( int i=0; i<bbsNttList.size(); i++ ) {
			bbsNttList.get(i).setNttCn(StringUtil.removeTag(bbsNttList.get(i).getNttCn()));
			// new 아이콘 표시
			Long dataDate = Long.parseLong(bbsNttList.get(i).getFrstRegisterPnttm());
			bbsNttList.get(i).setNewIcon( newIconDateRange < dataDate ? true : false );
		}

		return bbsNttList;

	}

	@Override
	public int selectBbsNttLwprtCnt(BbsNttVO bbsNttVO) throws Exception {
		return bbsNttDAO.selectBbsNttLwprtCnt(bbsNttVO);
	}

  @Override
  public int selectBbsNttRnum(BbsNttVO bbsNttVO) throws Exception {
    int result = 0;
    try {
      result = bbsNttDAO.selectBbsNttRnum(bbsNttVO);
    } catch (Exception e) {
      StringUtil.printException(e);
    }
    return result;
  }

	@Override
	public BbsNtt selectBbsNttPrev(BbsNttVO bbsNttVO) throws Exception {
		return bbsNttDAO.selectBbsNttPrev(bbsNttVO);
	}

	@Override
	public BbsNtt selectBbsNttNext(BbsNttVO bbsNttVO) throws Exception {
		return bbsNttDAO.selectBbsNttNext(bbsNttVO);
	}

	@Override
	public List<BbsNttVO> selectBbsNttMainList(BbsInfo bbsInfo, BbsNttVO bbsNttVO) throws Exception {

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsNttMainList(bbsNttVO);


		return bbsNttList;

	}
	@Override
	public String isIndvdlzShowAt(BbsInfo bbsInfo, BbsNttVO bbsNttVO) throws Exception {

		String result = null;

		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			String integrDeptCode = StringUtil.nvl(bbsNttVO.getIntegrDeptCode());
			if( !"000100101".equals(integrDeptCode) && !"000100186".equals(integrDeptCode) && !"000100209".equals(integrDeptCode) && !"000100230".equals(integrDeptCode) && !"000100251".equals(integrDeptCode) ) {
				result = "indvdlz";
			}
		}

		return result;

	}

	@Override
	public int selectBbsNttMultiTotCnt(BbsNttVO bbsNttVO) throws Exception {
		return bbsNttDAO.selectBbsNttMultiTotCnt(bbsNttVO);
	}

	@Override
	public List<BbsNttVO> selectBbsNttMultiList(BbsInfo bbsInfo, BbsNttVO bbsNttVO) throws Exception {

		List<BbsNttVO> bbsNttList = bbsNttDAO.selectBbsNttMultiList(bbsNttVO);

		// new아이콘 표시
		long newIconDateRange = Long.parseLong(DateUtil.getDateAddDay(-bbsInfo.getNewIconCnd()));
		for( int i=0; i<bbsNttList.size(); i++ ) {
			Long dataDate = Long.parseLong(bbsNttList.get(i).getFrstRegisterPnttm());
			bbsNttList.get(i).setNewIcon( newIconDateRange < dataDate ? true : false );
			// cool아이콘
			bbsNttList.get(i).setCoolIcon( bbsNttList.get(i).getRdcnt() >= bbsInfo.getCoolIconCnd() ? true : false );
		}

		return bbsNttList;
	}

  /**
   * 서명운동 집계를 가져옴
   */
  @Override
  public Map<String, String> selectSignmentTot() throws Exception {
    return bbsNttDAO.selectSignmentTot();
  }

  /**
   * 서명운동 참여 현황을 가져옴
   */
  @Override
  public List<Map<String, String>> selectSignmentList() throws Exception {
    return bbsNttDAO.selectSignmentList();
  }
}

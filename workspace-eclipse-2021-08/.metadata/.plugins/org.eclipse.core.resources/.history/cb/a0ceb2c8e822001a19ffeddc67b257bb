package com.koem.vms.waterdepth.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.koem.vms.waterdepth.dao.WaterDepthDAO;
import com.koem.vms.waterdepth.dto.WaterDepthDTO;

@Service
public class WaterDepthServiceImpl implements WaterDepthService {
  Logger logger = Logger.getLogger(WaterDepthServiceImpl.class);
  
  @Autowired
  private WaterDepthDAO dao;

  @SuppressWarnings("unchecked")
  @Override
  public ArrayList<Map<String, Object>> getWaterDepthInRange( String range ) throws Exception {
    
    logger.debug( range );
    List<WaterDepthDTO> allList;
    List<String> units;

    ArrayList<Map<String, Object>> result;
    Map<String, Object> label;
    Map<String, ArrayList<Float>> data;
    List<Float> unitData;
    
    /**
     * 범위 안의 Point들의 수심데이터를 모두 가져온다.
     */
    allList = dao.getWaterDepthInRage( range );
    System.out.println( "Depth Data In Range :\n" + allList.toString() + "\n" );
    
    if( allList.size() == 0 ) {
      //  데이터가 없다면.
      logger.info("\n\t!! Points In Range Is NULL !!");
      return new ArrayList<Map<String, Object>>();
    } else {
      
      units = dao.getSurveyUnitList();
      result = new ArrayList<Map<String, Object>>();

      /**
       * Map 안에 환경 조사 차수 이름으로 List를 만들어 준다.
       */
      System.out.println("\n\t :: result got label ::");
      try {
        
        for( int index = 0; index < units.size(); index++ ) {
//          System.out.println(index);
//          System.out.println( units.get(index) );
          label = new HashMap<String, Object>();
          label.put("data", new ArrayList<Float>() );
          label.put("label", units.get(index) );
//          System.out.println(label.toString());
          result.add(label);
//          System.out.println(result.toString());
//          System.out.println(result.size());
        }
      } catch( Exception e ) {
        logger.warn("\n\t!!!! ERR !!!! -> " + e.getMessage() + "\n\n");
      }
      System.out.println("result get labels");
      System.out.println(result.toString());
      System.out.println(result.size());
//      /**
//       * 환경 조사 데이터에 있는 차수 이름과 Map 안의 List 이름이 같은 경우 넣어 준다.
//       */
      try {
        System.out.println(allList.size());
        for( WaterDepthDTO depth : allList ) {
//          System.out.println(depth.toString());
          for( int idx = 0; idx < units.size(); idx++ ) {
            if( depth.getSurvey_unit().equals( units.get(idx) ) ) {
//              System.out.println( idx + " units.get(idx) :\n\t" + units.get(idx) );
//              System.out.println( "depth.getSurvey_unit() :\n\t" + depth.getSurvey_unit() );
              Map<String, Object> cover = (Map<String, Object>) result.get(idx);

              ArrayList<Float> target = (ArrayList<Float>) cover.get("data");
              target.add(depth.getDept());
              
            }
          }
        }
      } catch( Exception e ) {
        logger.warn("\n\t!!!! ERR !!!! -> " + e.getMessage() + "\n\n");
      }
    }
    /**
     * 비어 있는 List는 삭제 해준다.
     */
    int emptyDataSetsIdx = 0;
    for( int idx = 0; idx < result.size(); idx++ ) {
      Boolean flag = false;
      Map<String, Object> cover = (Map<String, Object>) result.get(idx);
      ArrayList<Float> target = (ArrayList<Float>) cover.get("data");
      System.out.println( result.get(idx).toString() );
      System.out.println(target.size());
      if( target.size() == 0) {
        result.remove(idx);
//        flag = false;
//      } else {
//        if( idx == 0 ||  )
      }
    }
//    logger.info( result.toString() );
//    logger.info( "SERVICE END" );
    
    return result;
  }

//
//  @Override
//  public Map<String, List<Float>> getWaterDepthInRange( String range ) throws Exception {
//    logger.debug( range );
//    List<WaterDepthDTO> allList;
//    List<String> units;
//    Map<String, List<Float>> result;
//    
//    /**
//     * 범위 안의 Point들의 수심데이터를 모두 가져온다.
//     */
//    allList = dao.getWaterDepthInRage( range );
////    System.out.println( "Depth Data In Range :\n" + allList.toString() );
//    
//    if( allList.size() == 0 ) {
//      //  데이터가 없다면.
//      logger.info("\n\t!! Points In Range Is NULL !!");
//      return new HashMap<String, List<Float>>();
//    } else {
//      units = dao.getSurveyUnitList();
//      result = new HashMap<String, List<Float>>();
//      
//      /**
//       * Map 안에 환경 조사 차수 이름으로 List를 만들어 준다.
//       */
//      for( String unit : units ) {
//        result.put( unit, new ArrayList<Float>() );
//      }
//      /**
//       * 환경 조사 데이터에 있는 차수 이름과 Map 안의 List 이름이 같은 경우 넣어 준다.
//       */
//      for( WaterDepthDTO depth : allList ) {
//        for( String unit : units ) {
//          if( depth.getSurvey_unit().toString().equals( unit ) ) {
////          System.out.println( unit );
////          System.out.println( depth.getSurvey_unit() );
//            result.get( unit ).add( depth.getDept() );
//          }
//        }
//      }
//    }
//    /**
//     * 비어 있는 List는 삭제 해준다.
//     */
//    for( String unit : units ) {
//      System.out.println( result.get( unit ).toString() );
//      if (result.get( unit ).size() == 0 ) {
//        result.remove(unit);
//      }
//    }
//    logger.info( result.toString() );
//    logger.info( "SERVICE END" );
//    return result;
//  }

  
}

package egovframework.acdntStat.web;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import egovframework.acdntStat.service.GsAcdntService;
import egovframework.acdntStat.service.PollutnAcdntService;
import egovframework.acdntStat.vo.AcdntInfoVO;
import egovframework.acdntStat.vo.GsAcdntVO;
import egovframework.acdntStat.vo.PollutnAcdntVO;
import egovframework.board.board.service.BoardService;
import egovframework.board.board.vo.BoardVO;
import egovframework.com.cmmn.CmmnConstant;
import egovframework.com.cmmn.LoginVO;
import egovframework.com.cmmn.service.FileVO;
import egovframework.com.cmmn.util.DateUtil;
import egovframework.com.cmmn.util.EgovConvertUtil;
import egovframework.com.cmmn.util.EgovStringUtil;
import egovframework.com.cmmn.web.CmmnAbstractController;
import egovframework.mng.auth.service.AuthGroupService;
import egovframework.rte.fdl.cmmn.exception.EgovBizException;
import egovframework.rte.psl.dataaccess.util.EgovMap;

/*
 * @since 2018.05.31
 * 
 * @version 1.0
 * 
 * @see
 *
 * <pre> << 개정이력(Modification Information) >>
 *
 * 수정일 수정자 수정내용 ----------- -------- --------------------- 2018.05.31 hjh 최초 생성
 *
 * </pre>
 */
@SuppressWarnings("deprecation")
@Controller
public class PollutnAcdntController extends CmmnAbstractController {

  @Resource(name = "pollutnAcdntService")
  private PollutnAcdntService pollutnAcdntService;

  @Resource(name = "authGroupService")
  private AuthGroupService authGroupService;

  @Resource(name = "gsAcdntService")
  private GsAcdntService gsAcdntService;

  @Resource(name = "boardService")
  private BoardService boardService;

  /**
   * 오염사고관리 목록 화면 이동
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(
      value = {"/acdntStat/acdntStat/pollutnAcdntList.do", "/ext/acdntStat/pollutnAcdntList.do"})
  public String pollutnAcdntList(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request) throws Exception {

    HttpSession session = request.getSession();
    LoginVO insttVO = (LoginVO) session.getAttribute("insttVO");

    if (pollutnAcdntVO.getSearchLcltyGrcCode() == null) {
      if (insttVO == null || "0000000".equals(insttVO.getUpInsttCD())) {
        pollutnAcdntVO.setSearchLcltyGrcCode("");
        pollutnAcdntVO.setSearchLcltyGrcNm("");
        pollutnAcdntVO.setSearchNmpaOfeCode("");
        pollutnAcdntVO.setSearchNmpaOfeNm("");
      } else {
        pollutnAcdntVO.setSearchLcltyGrcCode(insttVO.getUpInsttCD());
        pollutnAcdntVO.setSearchLcltyGrcNm(insttVO.getUpInsttNM());
        pollutnAcdntVO.setSearchNmpaOfeCode(insttVO.getUserInsttCD());
        pollutnAcdntVO.setSearchNmpaOfeNm(insttVO.getUserInsttNM());
      }


    }

    if (pollutnAcdntVO.getBgnAcdntDt() == null || pollutnAcdntVO.getBgnAcdntDt().length() == 0) {
      pollutnAcdntVO.setBgnAcdntDt(DateUtil.getToDay("yyyy") + "-01-01");
      pollutnAcdntVO.setEndAcdntDt(DateUtil.getToDay("yyyy-MM-dd"));
    }
    model.addAttribute("list", pollutnAcdntService.selectPollutnAcdntPage(pollutnAcdntVO));
    model.addAttribute("causeCodeList", cmmnCodeService.selectDtlCodeList(CmmnConstant.CAUSE_CODE));
    model.addAttribute("poltnsrcKndCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.POLTNSRC_KND_CODE));
    return "/acdntStat/acdntStat/pollutnAcdntList";
  }

  @RequestMapping(value = {"/acdntStat/acdntStat/pollutnAcdntListExcelDown.do",
      "/ext/acdntStat/pollutnAcdntListExcelDown.do"})
  public void pollutnAcdntListExcelDown(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request, HttpServletResponse response) throws Exception {
    // model.addAttribute("list", pollutnAcdntService.selectPollutnAcdntExcelDown(pollutnAcdntVO));
    // model.addAttribute("causeCodeList",
    // cmmnCodeService.selectDtlCodeList(CmmnConstant.CAUSE_CODE));
    // model.addAttribute("poltnsrcKndCodeList",
    // cmmnCodeService.selectDtlCodeList(CmmnConstant.POLTNSRC_KND_CODE));
    ServletOutputStream sos = null;

    List<EgovMap> list = pollutnAcdntService.selectPollutnAcdntExcelDown(pollutnAcdntVO);

    // System.out.println("오염사고관리 엑셀 리스트 확인 "+list);

    // Workbook 생성
    XSSFWorkbook work = new XSSFWorkbook(); // Excel 2007 이상

    // *** Sheet-------------------------------------------------
    // Sheet 생성
    XSSFSheet sheet = work.createSheet("ㅇㅇ시설 실적관리");

    for (int exCol = 0; exCol < 121; exCol++) {
      sheet.setColumnWidth(exCol, 5000);
    }

    /*
     * excel String docTitle = ""; List recTitles = new ArrayList(); List recTypes = new
     * ArrayList();
     * 
     * String menuNm = request.getParameter("menuNm"); if(EgovStringUtil.isEmpty(menuNm)) { docTitle
     * = "오염사고관리 목록"; } else { docTitle = menuNm+" 목록"; }
     */
    // ----------------------------------------------------------
    XSSFRow row = null;
    XSSFCell cell = null;
    // ----------------------------------------------------------

    sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 5));

    CellStyle style = work.createCellStyle();
    style.setAlignment(XSSFCellStyle.ALIGN_CENTER);

    row = sheet.createRow(0);
    cell = row.createCell(0);
    cell.setCellValue("오염사고관리 목록");
    cell.setCellStyle(style);

    row = sheet.createRow(1);
    cell = row.createCell(0);
    cell.setCellValue("연번");
    cell.setCellStyle(style);
    cell = row.createCell(1);
    cell.setCellValue("해경서명");
    cell.setCellStyle(style);
    cell = row.createCell(2);
    cell.setCellValue("사고일시 년");
    cell.setCellStyle(style);
    cell = row.createCell(3);
    cell.setCellValue("사고일시 월");
    cell.setCellStyle(style);
    cell = row.createCell(4);
    cell.setCellValue("사고일시 일");
    cell.setCellStyle(style);
    cell = row.createCell(5);
    cell.setCellValue("사고일시 시");
    cell.setCellStyle(style);
    cell = row.createCell(6);
    cell.setCellValue("사고일시 분");
    cell.setCellStyle(style);
    cell = row.createCell(7);
    cell.setCellValue("신고장소");
    cell.setCellStyle(style);
    cell = row.createCell(8);
    cell.setCellValue("항계");
    cell.setCellStyle(style);
    cell = row.createCell(9);
    cell.setCellValue("사고지점도경도");
    cell.setCellStyle(style);
    cell = row.createCell(10);
    cell.setCellValue("사고지점분경도");
    cell.setCellStyle(style);
    cell = row.createCell(11);
    cell.setCellValue("사고지점초경도");
    cell.setCellStyle(style);
    cell = row.createCell(12);
    cell.setCellValue("사고지점도위도");
    cell.setCellStyle(style);
    cell = row.createCell(13);
    cell.setCellValue("사고지점분위도");
    cell.setCellStyle(style);
    cell = row.createCell(14);
    cell.setCellValue("사고지점초위도");
    cell.setCellStyle(style);
    cell = row.createCell(15);
    cell.setCellValue("오염원");
    cell.setCellStyle(style);
    cell = row.createCell(16);
    cell.setCellValue("오염원구분");
    cell.setCellStyle(style);
    cell = row.createCell(17);
    cell.setCellValue("종류");
    cell.setCellStyle(style);
    cell = row.createCell(18);
    cell.setCellValue("톤수");
    cell.setCellStyle(style);
    cell = row.createCell(19);
    cell.setCellValue("선령");
    cell.setCellStyle(style);
    cell = row.createCell(20);
    cell.setCellValue("국적");
    cell.setCellStyle(style);
    cell = row.createCell(21);
    cell.setCellValue("선적");
    cell.setCellStyle(style);
    cell = row.createCell(22);
    cell.setCellValue("행위국적");
    cell.setCellStyle(style);
    cell = row.createCell(23);
    cell.setCellValue("원인");
    cell.setCellStyle(style);
    cell = row.createCell(25);
    cell.setCellValue("발생개요");
    cell.setCellStyle(style);
    cell = row.createCell(26);
    cell.setCellValue("신고자");
    cell.setCellStyle(style);
    cell = row.createCell(24);
    cell.setCellValue("인양여부");
    cell.setCellStyle(style);
    cell = row.createCell(27);
    cell.setCellValue("총유출량");
    cell.setCellStyle(style);
    cell = row.createCell(28);
    cell.setCellValue("오염물질1");
    cell.setCellStyle(style);
    cell = row.createCell(29);
    cell.setCellValue("유출량1");
    cell.setCellStyle(style);
    cell = row.createCell(30);
    cell.setCellValue("오염물질2");
    cell.setCellStyle(style);
    cell = row.createCell(31);
    cell.setCellValue("유출량2");
    cell.setCellStyle(style);
    cell = row.createCell(32);
    cell.setCellValue("오염물질3");
    cell.setCellStyle(style);
    cell = row.createCell(33);
    cell.setCellValue("유출량3");
    cell.setCellStyle(style);
    cell = row.createCell(34);
    cell.setCellValue("해상오염범위");
    cell.setCellStyle(style);
    cell = row.createCell(35);
    cell.setCellValue("해안오염범위");
    cell.setCellStyle(style);


    cell = row.createCell(36);
    cell.setCellValue("방제방법");
    cell.setCellStyle(style);
    cell = row.createCell(37);
    cell.setCellValue("해경-해상일수");
    cell.setCellStyle(style);
    cell = row.createCell(38);
    cell.setCellValue("해경-해안일수");
    cell.setCellStyle(style);
    cell = row.createCell(39);
    cell.setCellValue("해경-방제인원(명)");
    cell.setCellStyle(style);
    cell = row.createCell(40);
    cell.setCellValue("해경-방제선박(척)");
    cell.setCellStyle(style);
    cell = row.createCell(41);
    cell.setCellValue("해경-유회수기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(42);
    cell.setCellValue("해경-오일펜스(m)");
    cell.setCellStyle(style);
    cell = row.createCell(43);
    cell.setCellValue("해경-유흡착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(44);
    cell.setCellValue("해경-부착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(45);
    cell.setCellValue("해경-유처리제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(46);
    cell.setCellValue("해경-유겔화제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(47);
    cell.setCellValue("해경-항공기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(48);
    cell.setCellValue("해경-유회수량(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(49);
    cell.setCellValue("해경-폐회수량(kg)");
    cell.setCellStyle(style);
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) 해경-적재이적 */
    cell = row.createCell(50);
    cell.setCellValue("해경-적재이적");
    cell.setCellStyle(style);
    cell = row.createCell(51);
    cell.setCellValue("해경-방제비용(원)");
    cell.setCellStyle(style);

    cell = row.createCell(52);
    cell.setCellValue("공단-해상일수");
    cell.setCellStyle(style);
    cell = row.createCell(53);
    cell.setCellValue("공단-해안일수");
    cell.setCellStyle(style);
    cell = row.createCell(54);
    cell.setCellValue("공단-방제인원(명)");
    cell.setCellStyle(style);
    cell = row.createCell(55);
    cell.setCellValue("공단-방제선박(척)");
    cell.setCellStyle(style);
    cell = row.createCell(56);
    cell.setCellValue("공단-유회수기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(57);
    cell.setCellValue("공단-오일펜스(m)");
    cell.setCellStyle(style);
    cell = row.createCell(58);
    cell.setCellValue("공단-유흡착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(59);
    cell.setCellValue("공단-부착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(60);
    cell.setCellValue("공단-유처리제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(61);
    cell.setCellValue("공단-유겔화제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(62);
    cell.setCellValue("공단-항공기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(63);
    cell.setCellValue("공단-유회수량(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(64);
    cell.setCellValue("공단-폐회수량(kg)");
    cell.setCellStyle(style);
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) 공단-적재이적 */
    cell = row.createCell(65);
    cell.setCellValue("공단-적재이적");
    cell.setCellStyle(style);
    cell = row.createCell(66);
    cell.setCellValue("공단-방제비용(원)");
    cell.setCellStyle(style);

    cell = row.createCell(67);
    cell.setCellValue("업체-해상일수");
    cell.setCellStyle(style);
    cell = row.createCell(68);
    cell.setCellValue("업체-해안일수");
    cell.setCellStyle(style);
    cell = row.createCell(69);
    cell.setCellValue("업체-방제인원(명)");
    cell.setCellStyle(style);
    cell = row.createCell(70);
    cell.setCellValue("업체-방제선박(척)");
    cell.setCellStyle(style);
    cell = row.createCell(71);
    cell.setCellValue("업체-유회수기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(72);
    cell.setCellValue("업체-오일펜스(m)");
    cell.setCellStyle(style);
    cell = row.createCell(73);
    cell.setCellValue("업체-유흡착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(74);
    cell.setCellValue("업체-부착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(75);
    cell.setCellValue("업체-유처리제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(76);
    cell.setCellValue("업체-유겔화제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(77);
    cell.setCellValue("업체-항공기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(78);
    cell.setCellValue("업체-유회수량(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(79);
    cell.setCellValue("업체-폐회수량(kg)");
    cell.setCellStyle(style);
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) 업체-적재이적 */
    cell = row.createCell(80);
    cell.setCellValue("업체-적재이적");
    cell.setCellStyle(style);
    cell = row.createCell(81);
    cell.setCellValue("업체-방제비용(원)");
    cell.setCellStyle(style);

    cell = row.createCell(82);
    cell.setCellValue("행위자-해상일수");
    cell.setCellStyle(style);
    cell = row.createCell(83);
    cell.setCellValue("행위자-해안일수");
    cell.setCellStyle(style);
    cell = row.createCell(84);
    cell.setCellValue("행위자-방제인원(명)");
    cell.setCellStyle(style);
    cell = row.createCell(85);
    cell.setCellValue("행위자-방제선박(척)");
    cell.setCellStyle(style);
    cell = row.createCell(86);
    cell.setCellValue("행위자-유회수기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(87);
    cell.setCellValue("행위자-오일펜스(m)");
    cell.setCellStyle(style);
    cell = row.createCell(88);
    cell.setCellValue("행위자-유흡착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(89);
    cell.setCellValue("행위자-부착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(90);
    cell.setCellValue("행위자-유처리제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(91);
    cell.setCellValue("행위자-유겔화제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(92);
    cell.setCellValue("행위자-항공기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(93);
    cell.setCellValue("행위자-유회수량(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(94);
    cell.setCellValue("행위자-폐회수량(kg)");
    cell.setCellStyle(style);
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) 행위자-적재이적 */
    cell = row.createCell(95);
    cell.setCellValue("행위자-적재이적");
    cell.setCellStyle(style);
    cell = row.createCell(96);
    cell.setCellValue("행위자-방제비용(원)");
    cell.setCellStyle(style);

    cell = row.createCell(97);
    cell.setCellValue("관계기관-해상일수");
    cell.setCellStyle(style);
    cell = row.createCell(98);
    cell.setCellValue("관계기관-해안일수");
    cell.setCellStyle(style);
    cell = row.createCell(99);
    cell.setCellValue("관계기관-방제인원(명)");
    cell.setCellStyle(style);
    cell = row.createCell(100);
    cell.setCellValue("관계기관-방제선박(척)");
    cell.setCellStyle(style);
    cell = row.createCell(101);
    cell.setCellValue("관계기관-유회수기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(102);
    cell.setCellValue("관계기관-오일펜스(m)");
    cell.setCellStyle(style);
    cell = row.createCell(103);
    cell.setCellValue("관계기관-유흡착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(104);
    cell.setCellValue("관계기관-부착재(kg)");
    cell.setCellStyle(style);
    cell = row.createCell(105);
    cell.setCellValue("관계기관-유처리제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(106);
    cell.setCellValue("관계기관-유겔화제(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(107);
    cell.setCellValue("관계기관-항공기(대)");
    cell.setCellStyle(style);
    cell = row.createCell(108);
    cell.setCellValue("관계기관-유회수량(ℓ)");
    cell.setCellStyle(style);
    cell = row.createCell(109);
    cell.setCellValue("관계기관-폐회수량(kg)");
    cell.setCellStyle(style);
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) 관계기관-적재이적 */
    cell = row.createCell(110);
    cell.setCellValue("관계기관-적재이적");
    cell.setCellStyle(style);
    cell = row.createCell(111);
    cell.setCellValue("관계기관-방제비용(원)");
    cell.setCellStyle(style);

    cell = row.createCell(112);
    cell.setCellValue("피해여부");
    cell.setCellStyle(style);
    cell = row.createCell(113);
    cell.setCellValue("피해요구액");
    cell.setCellStyle(style);
    cell = row.createCell(114);
    cell.setCellValue("피해보상액");
    cell.setCellStyle(style);
    cell = row.createCell(115);
    cell.setCellValue("풍향");
    cell.setCellStyle(style);
    cell = row.createCell(116);
    cell.setCellValue("파고");
    cell.setCellStyle(style);
    cell = row.createCell(117);
    cell.setCellValue("시정");
    cell.setCellStyle(style);
    cell = row.createCell(118);
    cell.setCellValue("기상특보");
    cell.setCellStyle(style);
    cell = row.createCell(119);
    cell.setCellValue("기타");
    cell.setCellStyle(style);
    cell = row.createCell(120);
    cell.setCellValue("진행여부");
    cell.setCellStyle(style);


    String exColumNm = ",nmpaOfeNm"
        // 연,월,일,시,분,신고장소,항계
        + ",acdntYyyy,acdntMm,acdntDd,acdntHh,acdntMi,acdntPlace,hbrlmtNm,"
        // 위도경도(항계 이어서 사고지점도경도 사고지점분경도 사고지점초경도 사고지점도위도 사고지점분위도 사고지점초위도)
        + "acdntSpotDoLo,acdntSpotMinLo,acdntSpotSecndLo,acdntSpotDoLa,acdntSpotMinLa,acdntSpotSecndLa"
        // 오염원(poltnsrcNm->poltnsrcNmText) 오염원구분 종류
        + ",poltnsrcNmText,poltnsrcKndNm,poltnsrcDtlKndNm"
        // 톤수 선령 국적 선적
        + ",shipTonCo,shpageValue,shipNltyNm,shipngCn"
        // 행위국적 원인 인양여부 발생개요
        + ",acdntNltyNm,causeNm,slvgAt,occrrncSmry"
        // 신고자aplcntCdNm?detalSttemntNm?
        + ",detalSttemntNm,effluxTotqy"
        + ",mttrDtlNmR1,mttrEffluxQunty1,mttrDtlNmR2,mttrEffluxQunty2,mttrDtlNmR3,mttrEffluxQunty3"
        + ",seqPollutnScopeValue,bechPollutnScopeValue"

        + ",prvnbeMthNm" + ",seaDaycnt,bechDaycnt,prvnbeNmprCo,prvnbeShipCo,skmCo,ofncCo"
        + ",adbtCo,haptenCo,dpsCo,ogaCo,arplneCo,olRtrvlQunty"
        + ",wsteRtrvlQunty,ldadngRespmtCo,prvnbeCt"

        + ",seaDaycnt2,bechDaycnt2,prvnbeNmprCo2,prvnbeShipCo2,skmCo2,ofncCo2"
        + ",adbtCo2,haptenCo2,dpsCo2,ogaCo2,arplneCo2,olRtrvlQunty2"
        + ",wsteRtrvlQunty2,ldadngRespmtCo2,prvnbeCt2"

        + ",seaDaycnt3,bechDaycnt3,prvnbeNmprCo3,prvnbeShipCo3,skmCo3,ofncCo3"
        + ",adbtCo3,haptenCo3,dpsCo3,ogaCo3,arplneCo3,olRtrvlQunty3"
        + ",wsteRtrvlQunty3,ldadngRespmtCo3,prvnbeCt3"

        + ",seaDaycnt4,bechDaycnt4,prvnbeNmprCo4,prvnbeShipCo4,skmCo4,ofncCo4"
        + ",adbtCo4,haptenCo4,dpsCo4,ogaCo4,arplneCo4,olRtrvlQunty4"
        + ",wsteRtrvlQunty4,ldadngRespmtCo4,prvnbeCt4"

        + ",seaDaycnt5,bechDaycnt5,prvnbeNmprCo5,prvnbeShipCo5,skmCo5,ofncCo5"
        + ",adbtCo5,haptenCo5,dpsCo5,ogaCo5,arplneCo5,olRtrvlQunty5"
        + ",wsteRtrvlQunty5,ldadngRespmtCo5,prvnbeCt5"

        /* 피해여부추가 */
        + ",dmgeCmpnstnAt,dmgeCmpnstnDemandAmount,dmgeCmpnstnAmount"
        // ,풍향,풍속 ,파고 ,시정 ,기상특보,기타,진행여부
        + ",wdNm,wsValue,wvhgtValue,corecValue,spcnwsNm,etcCn";


    String[] arrExCol = exColumNm.split(",");

    int[] array = new int[arrExCol.length + 1];
    for (int i = 0; i < arrExCol.length + 1; i++) {
      array[i] = i + 1;
    }
    for (int r = 0; r < list.size(); r++) {
      row = sheet.createRow(r + 2);
      for (short c = 0; c < arrExCol.length; c++) {
        cell = row.createCell(c);
        if (c == 0) {
          // cell.setCellValue(String.valueOf(r+1));
          cell.setCellValue(list.size() - r);
          cell.setCellStyle(style);
        } else {
          if (String.valueOf(list.get(r).get(arrExCol[c])).equals("null")) {
            cell.setCellValue("");

          } else {

            /* 항계 추가 */
            if (c == 8) {
              cell.setCellValue(String.valueOf(list.get(r).get(arrExCol[c]) + " N "
                  + String.valueOf(list.get(r).get("acdntSpotDoLa") + "-"
                      + String.valueOf(list.get(r).get("acdntSpotMinLa") + "-"
                          + String.valueOf(list.get(r).get("acdntSpotSecndLa") + " E "
                              + String.valueOf(list.get(r).get("acdntSpotDoLo") + "-"
                                  + String.valueOf(list.get(r).get("acdntSpotMinLo") + "-"
                                      + String.valueOf(list.get(r).get("acdntSpotSecndLo")))))))));

              // System.out.println("변경값 "+cell.getStringCellValue());

              /* 종류에 종류구분 추가 */
            } else if (c == 17) {
              cell.setCellValue(String.valueOf(list.get(r).get("poltnsrcDtlKndNmUU") + "("
                  + String.valueOf(list.get(r).get(arrExCol[c]) + ")")));

              /* 원인에 원인구분 추가 */
            } else if (c == 23) {
              cell.setCellValue(String.valueOf(list.get(r).get(arrExCol[c]) + "("
                  + String.valueOf(list.get(r).get("detalCauseNm") + ")")));

            } else {
              cell.setCellValue(String.valueOf(list.get(r).get(arrExCol[c])));
              // System.out.println("size확인 "+c);
              // System.out.println("c확인 "+arrExCol[c]);
              // System.out.println("cell 값 확인 "+String.valueOf(list.get(r).get(arrExCol[c])));
            }

            // null값 체크
            if (cell.getStringCellValue().contains("null")) {
              cell.setCellValue(cell.getStringCellValue().replace("null", " "));
            }

          }
          cell.setCellStyle(style);
        }
      }
    }


    // excel 파일 저장

    try {

      response.setHeader("Content-Disposition",
          "attachment;filename=" + URLEncoder.encode("오염사고관리.xlsx", "UTF-8"));
      response.setContentType("application/vnd.ms.excel");

      sos = response.getOutputStream();
      work.write(sos);
      sos.flush();

    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } catch (IOException e1) {
      e1.printStackTrace();
    }
  }

  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  @RequestMapping(value = {"/acdntStat/acdntStat/pollutnAcdntListExcelDown2.do",
      "/ext/acdntStat/pollutnAcdntListExcelDown2.do"})
  public ModelAndView pollutnAcdntListExcelDown2(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {
    // model.addAttribute("list", pollutnAcdntService.selectPollutnAcdntExcelDown(pollutnAcdntVO));
    // model.addAttribute("causeCodeList",
    // cmmnCodeService.selectDtlCodeList(CmmnConstant.CAUSE_CODE));
    // model.addAttribute("poltnsrcKndCodeList",
    // cmmnCodeService.selectDtlCodeList(CmmnConstant.POLTNSRC_KND_CODE));

    ModelAndView mav = new ModelAndView();
    mav.setViewName("excelDownloadView");

    List<EgovMap> list = pollutnAcdntService.selectPollutnAcdntExcelDown(pollutnAcdntVO);

    // excel
    String docTitle = "";
    List recTitles = new ArrayList();
    List recTypes = new ArrayList();

    String menuNm = request.getParameter("menuNm");
    if (EgovStringUtil.isEmpty(menuNm)) {
      docTitle = "오염신고관리 목록";
    } else {
      docTitle = menuNm + " 목록";
    }

    // 항목명
    recTitles.add("연번");
    recTitles.add("해경서명");
    recTitles.add("사고일시 년");
    recTitles.add("사고일시 월");
    recTitles.add("사고일시 일");
    recTitles.add("사고일시 시");
    recTitles.add("사고일시 분");
    recTitles.add("신고장소");
    recTitles.add("신고내용");
    recTitles.add("신고접수부작성");
    recTitles.add("신고상황유형");
    recTitles.add("최초접수경로");
    recTitles.add("신고자");

    recTitles.add("현장확인");
    recTitles.add("오염여부");
    recTitles.add("현장확인해경선박수");
    recTitles.add("현장확인해경인원수");
    recTitles.add("현장확인공단선박수");
    recTitles.add("현장확인공단인원수");
    recTitles.add("현장확인기타선박수");
    recTitles.add("현장확인기타인원수");
    /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) */
    recTitles.add("현장확인방제정 출동 현황");

    recTitles.add("현장확인헬기수");

    recTitles.add("색상명");
    recTitles.add("오염범위량");
    recTitles.add("유류종류명");
    recTitles.add("유출량");
    recTitles.add("신고조치결과");

    recTitles.add("방제조치결과");
    recTitles.add("유흡착재(kg)");
    recTitles.add("유회수기(대)");
    recTitles.add("유처리제(리터)");
    recTitles.add("해경선박(척)");
    recTitles.add("해경인원(명)");
    recTitles.add("공단선박(척)");
    recTitles.add("공단인원(명)");
    recTitles.add("기타선박(척)");
    recTitles.add("기타인원(명)");
    recTitles.add("헬기(회)");

    recTitles.add("포상금지급여부");
    recTitles.add("미지급사유");
    recTitles.add("신고자성명");
    recTitles.add("포상금지급액(원)");
    recTitles.add("지급일");

    recTitles.add("선종명");
    recTitles.add("자체이적총이적량");
    recTitles.add("자체이적유류종류1");
    recTitles.add("자체이적유류종류수량1");
    recTitles.add("자체이적유류종류2");
    recTitles.add("자체이적유류종류수량2");
    recTitles.add("자체이적유류종류3");
    recTitles.add("자체이적유류종류수량3");
    recTitles.add("외부이적총이적량");
    recTitles.add("외부이적유류종류1");
    recTitles.add("외부이적유류종류수량1");
    recTitles.add("외부이적유류종류2");
    recTitles.add("외부이적유류종류수량2");
    recTitles.add("외부이적유류종류3");
    recTitles.add("외부이적유류종류수량3");

    recTitles.add("에어벤트봉쇄수");
    recTitles.add("에어벤트봉쇄해경수");
    recTitles.add("에어벤트봉쇄민간수");
    recTitles.add("파공부봉쇄수");
    recTitles.add("파공부봉쇄해경수");
    recTitles.add("파공부봉쇄민간수");


    for (int i = 0; i < list.size(); i++) {
      EgovMap egovMap = list.get(i);
      egovMap.put("sn", list.size() - i);

      if (i == 0) {
        List keyList = egovMap.keyList();

        recTypes.add("sn^center");
        recTypes.add("nmpaOfeNm^center");
        recTypes.add("acdntYyyy^center");
        recTypes.add("acdntMm^center");
        recTypes.add("acdntDd^center");
        recTypes.add("acdntHh^center");
        recTypes.add("acdntMi^center");
        recTypes.add("acdntPlace^center");
        recTypes.add("sttemntCn^center");
        recTypes.add("ocenPollutnSttemntAt^center");
        recTypes.add("sttemntSittnTyNm^center");
        recTypes.add("frstRceptCoursNm^center");
        recTypes.add("aplcntCdNm^center");

        recTypes.add("sptCnfirmNm^center");
        recTypes.add("pollutnAt^center");
        recTypes.add("sptCnfirmNmpaShipCo^center");
        recTypes.add("sptCnfirmNmpaNmprCo^center");
        recTypes.add("sptCnfirmIsrlpxShipCo^center");
        recTypes.add("sptCnfirmIsrlpxNmprCo^center");
        recTypes.add("sptCnfirmEtcShipCo^center");
        recTypes.add("sptCnfirmEtcNmprCo^center");
        /* 데이터가 없음 추후 입력후 처리 현제는 빈칸출력(담당자 협의된 사항) */
        recTypes.add("현장확인방제정 출동 현황-자료없음^center");

        recTypes.add("sptCnfirmHlcptrCo^center");
        recTypes.add("colorNm^center");
        recTypes.add("pollutnScopeQunty^center");
        recTypes.add("olKndNm^center");
        recTypes.add("effluxQunty^center");
        recTypes.add("sttemntManagtResultNm^center");

        recTypes.add("prvnbeManagtResultNm^center");
        recTypes.add("adbtCo^center");
        recTypes.add("skmCo^center");
        recTypes.add("dpsCo^center");
        recTypes.add("prvnbeManagtNmpaShipCo^center");
        recTypes.add("prvnbeManagtNmpaNmprCo^center");
        recTypes.add("prvnbeManagtIsrlpxShipCo^center");
        recTypes.add("prvnbeManagtIsrlpxNmprCo^center");
        recTypes.add("prvnbeManagtEtcShipCo^center");
        recTypes.add("prvnbeManagtEtcNmprCo^center");
        recTypes.add("prvnbeManagtHlcptrCo^center");

        recTypes.add("rwmnyPymntAt^center");
        recTypes.add("unpayPrvonsh^center");
        recTypes.add("aplcntNm^center");
        recTypes.add("cmpnstnAmount^center");
        recTypes.add("rwmnyPymntDe^center");

        recTypes.add("vslkndNm^center");
        recTypes.add("onslfRespmtTotRespmtQunty^center");
        recTypes.add("onslfRespmtOlKndNm1^center");
        recTypes.add("onslfRespmtOlKndQy1^center");
        recTypes.add("onslfRespmtOlKndNm2^center");
        recTypes.add("onslfRespmtOlKndQy2^center");
        recTypes.add("onslfRespmtOlKndNm3^center");
        recTypes.add("onslfRespmtOlKndQy3^center");
        recTypes.add("extrlRespmtTotRespmtQunty^center");
        recTypes.add("extrlRespmtOlKndNm1^center");
        recTypes.add("extrlRespmtOlKndQy1^center");
        recTypes.add("extrlRespmtOlKndNm2^center");
        recTypes.add("extrlRespmtOlKndQy2^center");
        recTypes.add("extrlRespmtOlKndNm3^center");
        recTypes.add("extrlRespmtOlKndQy3^center");

        recTypes.add("arvtBlkadeCo^center");
        recTypes.add("arvtBlkadeNmpaCo^center");
        recTypes.add("arvtBlkadePrvateCo^center");
        recTypes.add("dstrcpBlkadeCo^center");
        recTypes.add("dstrcpBlkadeNmpaCo^center");
        recTypes.add("dstrcpBlkadePrvateCo^center");

      }

      list.set(i, egovMap);
    }

    // excel
    mav.addObject("docTitle", docTitle);
    mav.addObject("recTitles", recTitles);
    mav.addObject("recTypes", recTypes);
    mav.addObject("records", list);

    return mav;
  }

  /**
   * 오염사고관리 상세 화면으로 이동
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/pollutnAcdntDetail.do",
      "/ext/acdntStat/pollutnAcdntDetail.do"})
  public String pollutnAcdntDetail(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request) throws Exception {
    try {
      EgovMap pollutnAcdntDetail = pollutnAcdntService.selectPollutnAcdntDetail(pollutnAcdntVO);
      FileVO fileVO = new FileVO();
      fileVO.setAtchmnflId((String) pollutnAcdntDetail.get("atchmnflId"));
      List<EgovMap> fileList = egovFileMngService.selectFileInfs(fileVO);
      model.addAttribute("fileList", fileList);
      model.addAttribute("result", pollutnAcdntDetail);
      return "/acdntStat/acdntStat/pollutnAcdntDetail";
    } catch (Exception e) {
      return "redirect:/ext/acdntStat/pollutnAcdntList.do";
    }
  }

  /**
   * 오염사고관리 등록 화면으로 이동
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/insertPollutnAcdntForm.do",
      "/ext/acdntStat/insertPollutnAcdntForm.do"})
  public String insertPollutnAcdntForm(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {

    System.out.println("/ext/acdntStat/insertPollutnAcdntForm.do start!");

    HttpSession session = request.getSession();
    LoginVO insttVO = (LoginVO) session.getAttribute("insttVO");

    if (pollutnAcdntVO.getSearchLcltyGrcCode() == null) {
      if (insttVO == null || insttVO.getUpInsttCD() == null
          || insttVO.getUpInsttCD().equals("0000000")) {
        pollutnAcdntVO.setSearchLcltyGrcCode("");
        pollutnAcdntVO.setSearchLcltyGrcNm("");
        pollutnAcdntVO.setSearchNmpaOfeCode("");
        pollutnAcdntVO.setSearchNmpaOfeNm("");
      } else {
        pollutnAcdntVO.setSearchLcltyGrcCode(insttVO.getUpInsttCD());
        pollutnAcdntVO.setSearchLcltyGrcNm(insttVO.getUpInsttNM());
        pollutnAcdntVO.setSearchNmpaOfeCode(insttVO.getUserInsttCD());
        pollutnAcdntVO.setSearchNmpaOfeNm(insttVO.getUserInsttNM());
      }
    }


    model.addAttribute("type", "I");
    this.addModelComboList(model);
    model.addAttribute("spcnwsCodeOtherCode", CmmnConstant.SPCNWS_CODE_OTHER);
    model.addAttribute("poltnsrcKndCodeOtherCode", CmmnConstant.POLTNSRC_KND_CODE_UKNWN);
    return "/acdntStat/acdntStat/pollutnAcdntWrite";
  }

  /**
   * 오염사고관리 등록
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/insertPollutnAcdnt.do",
      "/ext/acdntStat/insertPollutnAcdnt.do"})
  public String insertPollutnAcdnt(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request, BindingResult bindingResult,
      MultipartHttpServletRequest mptRequest, AcdntInfoVO acdntInfoVO) throws Exception {
    beanValidator.validate(pollutnAcdntVO, bindingResult);
    if (bindingResult.hasErrors()) {
      throw new EgovBizException(egovMessageSource.getMessage("fail.common.msg"));
    } else {
      try {
        pollutnAcdntService.insertPollutnAcdnt(pollutnAcdntVO, mptRequest);
        model.addAttribute("resultMessage", egovMessageSource.getMessage("success.common.insert"));
        StringBuffer paramSb = new StringBuffer();
        paramSb.append("?menuCode=" + pollutnAcdntVO.getMenuCode());
        paramSb.append("&sn=" + pollutnAcdntVO.getSn());
        model.addAttribute("destUrl", "/ext/acdntStat/pollutnAcdntDetail.do" + paramSb);
      } catch (EgovBizException e) {
        model.addAttribute("resultMessage", e.getMessage());
      } catch (Exception e) {
        LOGGER.error(
            "#" + this.getClass().getSimpleName() + ".insertPollutnAcdnt: " + e.getMessage());
        if (e.getCause() instanceof SQLException) {
          final SQLException sqlExn = (SQLException) e.getCause();
          model.addAttribute("resultMessage", egovMessageSource.getMessage("fail.common.sql2",
              Math.abs(sqlExn.getErrorCode()) + ""));
        } else {
          model.addAttribute("resultMessage", egovMessageSource.getMessage("fail.common.msg"));
        }
      }
    }
    return "/cmmn/messageAlert";
  }

  /**
   * 오염사고관리 수정 화면으로 이동
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/updatePollutnAcdntForm.do",
      "/ext/acdntStat/updatePollutnAcdntForm.do"})
  public String updatePollutnAcdntForm(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {
    model.addAttribute("type", "U");
    this.addModelComboList(model);
    model.addAttribute("spcnwsCodeOtherCode", CmmnConstant.SPCNWS_CODE_OTHER);
    model.addAttribute("poltnsrcKndCodeOtherCode", CmmnConstant.POLTNSRC_KND_CODE_UKNWN);
    EgovMap selectPollutnAcdntDetail = pollutnAcdntService.selectPollutnAcdntDetail(pollutnAcdntVO);
    AcdntInfoVO convertAcdntInfoVO =
        (AcdntInfoVO) EgovConvertUtil.convertMap2Vo(selectPollutnAcdntDetail, new AcdntInfoVO());
    pollutnAcdntVO.setAcdntInfoVO(convertAcdntInfoVO);
    FileVO fileVO = new FileVO();
    fileVO.setAtchmnflId((String) selectPollutnAcdntDetail.get("atchmnflId"));
    List<EgovMap> fileList = egovFileMngService.selectFileInfs(fileVO);
    model.addAttribute("fileList", fileList);
    return "/acdntStat/acdntStat/pollutnAcdntWrite";
  }

  /**
   * 오염사고관리 수정
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/updatePollutnAcdnt.do",
      "/ext/acdntStat/updatePollutnAcdnt.do"})
  public String updatePollutnAcdnt(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request, BindingResult bindingResult,
      MultipartHttpServletRequest mptReques) throws Exception {
    beanValidator.validate(pollutnAcdntVO, bindingResult);
    if (bindingResult.hasErrors()) {
      throw new EgovBizException(egovMessageSource.getMessage("fail.common.msg"));
    } else {
      try {
        pollutnAcdntService.updatePollutnAcdnt(pollutnAcdntVO, mptReques, request);
        model.addAttribute("resultMessage", egovMessageSource.getMessage("success.common.update"));
        StringBuffer paramSb = new StringBuffer();
        paramSb.append("?menuCode=" + pollutnAcdntVO.getMenuCode());
        paramSb.append("&sn=" + pollutnAcdntVO.getSn());
        paramSb.append("&bgnAcdntDt=" + pollutnAcdntVO.getBgnAcdntDt());
        paramSb.append("&endAcdntDt=" + pollutnAcdntVO.getEndAcdntDt());
        paramSb.append("&searchLcltyGrcCode=" + pollutnAcdntVO.getSearchLcltyGrcCode());
        paramSb.append("&searchLcltyGrcNm=" + pollutnAcdntVO.getSearchLcltyGrcNm());
        paramSb.append("&searchNmpaOfeCode=" + pollutnAcdntVO.getSearchNmpaOfeCode());
        paramSb.append("&searchNmpaOfeNm=" + pollutnAcdntVO.getSearchNmpaOfeNm());
        paramSb.append("&searchPoltnsrcKndCode=" + pollutnAcdntVO.getSearchPoltnsrcKndCode());
        paramSb.append("&searchMttrCodeU=" + pollutnAcdntVO.getSearchMttrCodeU());
        paramSb.append("&searchMttrCode=" + pollutnAcdntVO.getSearchMttrCode());
        paramSb.append("&searchMttrDtlCode=" + pollutnAcdntVO.getSearchMttrDtlCode());
        paramSb.append("&searchAcdntNm=" + pollutnAcdntVO.getSearchAcdntNm());
        paramSb.append("&searchCauseCode=" + pollutnAcdntVO.getSearchCauseCode());
        paramSb.append("&searchDetalCauseCode=" + pollutnAcdntVO.getSearchDetalCauseCode());
        paramSb.append("&currentPageNo=" + pollutnAcdntVO.getCurrentPageNo());
        paramSb.append("&searchOcenPollutnAcdntAt=" + pollutnAcdntVO.getSearchOcenPollutnAcdntAt());
        paramSb.append(
            "&searchOcenPollutnSttemntAt=" + pollutnAcdntVO.getSearchOcenPollutnSttemntAt());
        model.addAttribute("destUrl", "/ext/acdntStat/pollutnAcdntDetail.do" + paramSb);
      } catch (EgovBizException e) {
        model.addAttribute("resultMessage", e.getMessage());
      } catch (Exception e) {
        LOGGER.error(
            "#" + this.getClass().getSimpleName() + ".updatePollutnAcdnt: " + e.getMessage());
        if (e.getCause() instanceof SQLException) {
          final SQLException sqlExn = (SQLException) e.getCause();
          model.addAttribute("resultMessage", egovMessageSource.getMessage("fail.common.sql2",
              Math.abs(sqlExn.getErrorCode()) + ""));
        } else {
          model.addAttribute("resultMessage", egovMessageSource.getMessage("fail.common.msg"));
        }
      }
    }
    return "/cmmn/messageAlert";
  }

  /**
   * 오염사고관리 삭제
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/deletePollutnAcdnt.do",
      "/ext/acdntStat/deletePollutnAcdnt.do"})
  public String deletePollutnAcdnt(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request, BindingResult bindingResult) throws Exception {
    try {
      pollutnAcdntService.deletePollutnAcdnt(pollutnAcdntVO);
      model.addAttribute("resultMessage", egovMessageSource.getMessage("success.common.delete"));
      StringBuffer paramSb = new StringBuffer();
      paramSb.append("?menuCode=" + pollutnAcdntVO.getMenuCode());
      model.addAttribute("destUrl", "/ext/acdntStat/pollutnAcdntList.do" + paramSb);
    } catch (EgovBizException e) {
      model.addAttribute("resultMessage", e.getMessage());
    } catch (Exception e) {
      LOGGER
          .error("#" + this.getClass().getSimpleName() + ".deletePollutnAcdnt: " + e.getMessage());
      if (e.getCause() instanceof SQLException) {
        final SQLException sqlExn = (SQLException) e.getCause();
        model.addAttribute("resultMessage",
            egovMessageSource.getMessage("fail.common.sql2", Math.abs(sqlExn.getErrorCode()) + ""));
      } else {
        model.addAttribute("resultMessage", egovMessageSource.getMessage("fail.common.msg"));
      }
    }
    return "/cmmn/messageAlert";
  }

  /**
   * 등록/수정에 필요한 콤보박스 삽입
   *
   * @param model
   * @throws Exception
   */
  private void addModelComboList(ModelMap model) throws Exception {
    model.addAttribute("wdCodeList", cmmnCodeService.selectDtlCodeList(CmmnConstant.WD_CODE));
    model.addAttribute("spcnwsCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.SPCNWS_CODE));
    model.addAttribute("shipNltyCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.SHIP_NLTY_CODE));
    model.addAttribute("acdntNltyCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.ACDNT_NLTY_CODE));
    model.addAttribute("causeCodeList", cmmnCodeService.selectDtlCodeList(CmmnConstant.CAUSE_CODE));
    model.addAttribute("sttemntCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.STTEMNT_CODE));
    model.addAttribute("prvnbeMthCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.PRVNBE_MTH_CODE));
    model.addAttribute("sttemntSittnTyCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.STTEMNT_SITTN_TY_CODE));
    model.addAttribute("frstRceptCoursCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.FRST_RCEPT_COURS_CODE));
    model.addAttribute("aplcntCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.APLCNT_CODE));
    model.addAttribute("sptCnfirmCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.SPT_CNFIRM_CODE));
    model.addAttribute("sttemntManagtResultCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.STTEMNT_MANAGT_RESULT_CODE));
    model.addAttribute("prvnbeManagtResultCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.PRVNBE_MANAGT_RESULT_CODE));
    model.addAttribute("vslkndCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.VSLKND_CODE));
    model.addAttribute("onslfRespmtOlKndCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.ONSLF_RESPMT_OL_KND_CODE));
    model.addAttribute("poltnsrcKndCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.POLTNSRC_KND_CODE));
  }

  /**
   * 오염사고관리 팝업 화면 이동
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(
      value = {"/acdntStat/acdntStat/pollutnAcdntPopup.do", "/ext/acdntStat/pollutnAcdntPopup.do"})
  public String pollutnAcdntPopup(@ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO,
      ModelMap model, HttpServletRequest request) throws Exception {
    pollutnAcdntVO.setRecordCountPerPage(5);
    model.addAttribute("list", pollutnAcdntService.selectPollutnAcdntPage(pollutnAcdntVO));
    model.addAttribute("causeCodeList", cmmnCodeService.selectDtlCodeList(CmmnConstant.CAUSE_CODE)); // AS129
    model.addAttribute("poltnsrcKndCodeList",
        cmmnCodeService.selectDtlCodeList(CmmnConstant.POLTNSRC_KND_CODE)); // AS93
    return "/acdntStat/acdntStat/pollutnAcdntPopup";
  }

  /**
   * 오염사고관리 상세조회
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/selectPollutnAcdntDetail.do",
      "/ext/acdntStat/selectPollutnAcdntDetail.do"})
  public @ResponseBody EgovMap selectPollutnAcdntDetail(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {
    EgovMap pollutnAcdntDetail = pollutnAcdntService.selectPollutnAcdntDetail(pollutnAcdntVO);
    return pollutnAcdntDetail;
  }

  /**
   * 재난정보 팝업 화면 이동
   *
   * @param gsAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(
      value = {"/acdntStat/acdntStat/gsAcdntPopup.do", "/ext/acdntStat/gsAcdntPopup.do"})
  public String gsAcdntPopup(@ModelAttribute("gsAcdntVO") GsAcdntVO gsAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {
    model.addAttribute("list", gsAcdntService.selectGsAcdntPage(gsAcdntVO));
    return "/ext/acdntStat/gsAcdntPopup";
  }

  /**
   * 재난정보 상세조회
   *
   * @param gsAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdntStat/selectGsAcdntDetail.do",
      "/ext/acdntStat/selectGsAcdntDetail.do"})
  public @ResponseBody EgovMap selectGsAcdntDetail(@ModelAttribute("gsAcdntVO") GsAcdntVO gsAcdntVO,
      ModelMap model, HttpServletRequest request) throws Exception {
    EgovMap gsAcdntDetail = gsAcdntService.selectGsAcdntDetail(gsAcdntVO);
    return gsAcdntDetail;
  }

  /**
   * 연계용 오염분포도 팝업
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(
      value = {"/acdntStat/acdnt/refPollutnImagePopup.do", "/ext/acdnt/refPollutnImagePopup.do"})
  public String refPollutnImagePopup(@ModelAttribute("gsAcdntVO") GsAcdntVO gsAcdntVO,
      ModelMap model, HttpServletRequest request) throws Exception {

    BoardVO searchVO = new BoardVO();

    searchVO.setSearchKeyword(gsAcdntVO.getSearchKeyword());
    searchVO.setBbsId("BBS003");
    EgovMap boardVO = boardService.selectRefPollutnBoardArticleDetail(searchVO);

    if (boardVO != null) {
      FileVO fileVO = new FileVO();
      fileVO.setAtchmnflId((String) boardVO.get("atchmnflId"));
      List<EgovMap> fileList = egovFileMngService.selectFileInfs(fileVO);
      model.addAttribute("fileList", fileList);
    }

    EgovMap board = boardService.selectBoard(searchVO);

    model.addAttribute("bbsNm", board.get("bbsNm"));
    model.addAttribute("boardVO", boardVO);


    return "/ext/acdntStat/refPollutnImagePopup";
  }

  /**
   * 연계용 오염사고관리 상세화면 팝업
   *
   * @param pollutnAcdntVO
   * @param model
   * @param request
   * @return
   * @throws Exception
   */
  @RequestMapping(value = {"/acdntStat/acdnt/refPollutnAcdntDetailPopup.do",
      "/ext/acdnt/refPollutnAcdntDetailPopup.do"})
  public String refPollutnAcdntDetailPopup(
      @ModelAttribute("pollutnAcdntVO") PollutnAcdntVO pollutnAcdntVO, ModelMap model,
      HttpServletRequest request) throws Exception {

    EgovMap pollutnAcdntDetail = pollutnAcdntService.selectGsAcdntInfo(pollutnAcdntVO);

    if (pollutnAcdntDetail != null) {
      FileVO fileVO = new FileVO();
      fileVO.setAtchmnflId((String) pollutnAcdntDetail.get("atchmnflId"));
      List<EgovMap> fileList = egovFileMngService.selectFileInfs(fileVO);
      model.addAttribute("fileList", fileList);
    }

    model.addAttribute("result", pollutnAcdntDetail);

    return "/ext/acdntStat/refPollutnAcdntDetailPopup";
  }
}

package kr.co.hanshinit.NeoCMS.cop.sns.service.impl;

import java.io.InputStreamReader;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Resource;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import kr.co.hanshinit.NeoCMS.cmm.util.DateUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.HttpRequestUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.cop.cnt.fbKey.service.FbApiKey;
import kr.co.hanshinit.NeoCMS.cop.cnt.service.fb.FaceBookVO;
import kr.co.hanshinit.NeoCMS.cop.sns.service.SnsService;
import kr.co.hanshinit.NeoCMS.cop.sns.service.SnsVO;
import kr.co.hanshinit.NeoCMS.cop.sns.service.fb.FacebookVO;
import twitter4j.MediaEntity;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;

@SuppressWarnings("rawtypes")
@Service("snsService")
public class SnsServiceImpl implements SnsService {

  private final static Logger logger = LoggerFactory.getLogger(SnsServiceImpl.class);

  private final String FB_USER_ID = "hanamstory";
  private final String FB_CLIENT_ID = "514840585654573";
  private final String FB_CLIENT_SECRET = "48193dbe8e50a1d4bfc88c1c1bcbd93b";
  private final String FB_ACCESS_TOKEN = "EAAHUPqo5US0BAJIPwWYR11UxrBbFZCbeJGRZA6ZCA3pxHUqEyzHcErfOd2C7YS7SZB2ZBBZAocexUhZCaWzKEppOhxW5B1FACRGPMNz48uImJ7hrSpTYvSqy3PQYM9EJyKtZAuVZAVC8K6ANh6jvpZCpm9WJMpZB9cIdwtCNIqcHXChlXpEGsmeR54JV7ZAvrigvTZBXGfZCJfdO5cKiROu4aIYsin0tvD8bp6LWja5O8k9Pw7SPvbqTykCrHxTB9Wg9m2LqkZD";

  /** snsDAO */
  @Resource(name = "snsDAO")
  private SnsDAO snsDAO;

  /** snsService */
  @Resource(name = "snsService")
  private SnsService snsService;

  public List<SnsVO> selectSnsList(String type) throws Exception {

    SnsVO snsVO = new SnsVO();
    snsVO.setSnsType(type);
    return snsDAO.selectSnsList(snsVO);
  }

  public List<SnsVO> selectSnsTotList() throws Exception {
    return snsDAO.selectSnsTotList();
  }



	public List<SnsVO> mainSnsList(String type, int listSize) throws Exception {

		SnsVO snsVO = new SnsVO();
		snsVO.setSnsType(type);
		snsVO.setFirstIndex(1);
		snsVO.setLastIndex(listSize);

		return snsDAO.mainSnsList(snsVO);
	}


	public void updateTwitterData(SnsVO snsVO) throws Exception {

		List<SnsVO> snsDataList = getTwitterListSize(snsVO);
		if(snsDataList.size() != 0){

			snsDAO.deleteTwitterData(snsVO);
			for(int i=0; i<snsDataList.size(); i++) {
				snsDAO.insertSnsData(snsDataList.get(i));
			}
		}

	}

	public void updateFaceBookData(SnsVO snsVO) throws Exception {
//    List<SnsVO> snsDataList = getFacebookListSize(snsVO);
//    if (snsDataList.size() != 0) {
//      snsDAO.deleteFaceBookData(snsVO);
//      for (int i = 0; i < snsDataList.size(); i++) {
//        snsDAO.insertSnsData(snsDataList.get(i));
//      }
//    }

    FacebookVO data = getFaceBook( FB_USER_ID, FB_CLIENT_ID, FB_CLIENT_SECRET, FB_ACCESS_TOKEN );
    
    if( data == null ) return;

    List<SnsVO> snsDataList = data.convertToSnsDataVO(null);

    
    System.out.println("\n\tfacebook insert..\n\t");

    
    if(snsDataList.size() != 0){
      snsDAO.deleteFaceBookData(snsVO);
      int cycle = snsDataList.size();
      for(int i = 0; i < cycle; i++) {
        snsDAO.insertSnsData(snsDataList.get(i));
      }
    }

    System.out.println("\n\tfacebook insert..\n\t");



  }

	public void updateBlogData(SnsVO snsVO) throws Exception {

		List<SnsVO> snsDataList = getBlogListSize(snsVO);
		if(snsDataList.size() != 0){
			snsDAO.deleteBlogData(snsVO);
			for(int i=0; i<snsDataList.size(); i++) {
				snsDAO.insertSnsData(snsDataList.get(i));
			}
		}

	}

	public void updateYoutubeData(SnsVO snsVO) throws Exception {

		List<SnsVO> snsDataList = getYoutubeListSize(snsVO);
		if(snsDataList.size() != 0){
			snsDAO.deleteYoutubeData(snsVO);
			for(int i=0; i<snsDataList.size(); i++) {
				snsDAO.insertSnsData(snsDataList.get(i));
			}
		}

	}

	/* 트위터 타임라인 가져오기 */
	public static  List<SnsVO> getTwitterListSize(SnsVO snsVO) throws Exception {

		List<SnsVO> list = new LinkedList<SnsVO>();

		try {
			 	AccessToken accesstoken = new AccessToken("169052443-HltqfqkAX7PAvTW8qqgtLdcuC08aEDrCtnMSjDEw", "IbIvwwYju7dGg4QueNvfmhxmwrF76cnuhUdH8z2Z5vnSn");
		        Twitter twitter = TwitterFactory.getSingleton();
		        twitter.setOAuthConsumer("3oOqQdZa7Txb6GwWweoPGdfZq", "R5kdnVCXarl2KgNnCTM3CaePCSoWTd4hef1DqphZSL4MFRbzgQ");
		        twitter.setOAuthAccessToken(accesstoken);

		        List<Status> list2 = twitter.getUserTimeline();

		        for(Status status : list2) {

		        	String s1 = UrlHtml(status.getText());

		        	SnsVO tmpSns = new SnsVO();


		        	tmpSns.setSnsType("T");
		        	tmpSns.setSnsTitle(s1);
					tmpSns.setSnsContents(status.getText());
					//////// 임석훈 삭제(2017.08.28) /////////
//					if(status.getMediaEntities().length > 0){
//				        tmpSns.setSnsImage(status.getMediaEntities()[0].getMediaURL());
//				     }
//					tmpSns.setSnsUrl("https://twitter.com/hncity");
					//////// 임석훈 삭제(2017.08.28) /////////
					//////// 임석훈 추가(2017.08.28) /////////
					MediaEntity arrMedia[] = status.getMediaEntities();
					for (MediaEntity mediaEntity : arrMedia) {
						if(mediaEntity.getType().equals("photo")) {
							tmpSns.setSnsImage(mediaEntity.getMediaURL());
							break;
						}
		        	}
					tmpSns.setSnsUrl("https://twitter.com/"+status.getUser().getScreenName()+"/status/"+status.getId());
					//////// 임석훈 추가(2017.08.28) /////////
					tmpSns.setSnsRdate(DateUtil.getDateTimeFormat(status.getCreatedAt(), "yyyy-MM-dd : hh:mm"));
					tmpSns.setSnsRdate2(DateUtil.getDateTimeFormat(status.getCreatedAt(), "yyyy-MM-dd"));

					list.add(tmpSns);

		        }

		    } catch (Exception e) {
		        e.printStackTrace();
		    }

        return list;
	}

	 public static String UrlHtml(String str){
	        StringBuffer sb = new StringBuffer();
	        String regex ="(http|https|ftp)://[^\\s^\\.]+(\\.[^\\s^\\.^\"^\']+)*";

	        Pattern p = Pattern.compile(regex);
	        Matcher m=p.matcher(str);

	        if(m.find()){
	            sb.append(m.group(0));
	        }

	        return sb.toString();
	    }





  /**
   *  페이스북 타임라인 가져오기
   *  20210513
   *  페이스북 API 강제 버젼업을 하면서, 주석처리.
   */
//  public static List<SnsVO> getFacebookListSize(SnsVO snsVO) throws Exception {
//
//    List<SnsVO> list = new LinkedList<SnsVO>();
//
//    String accesstoken = "EAAHUPqo5US0BAPxpAlmGC5p9khG07EK6Muhzi40GlkjcESbtU0t6fhxaR9ILTlZCn1VVHbihAHw2GZBH11wTCSTJnrWQjOMmK7iXRlzmvK8ynHKSwh1dBX3ZAIucT8wZAwbZAMamdQricZC8uqXY1nL54itgxd7RmSGM9l9ItQ7WFILZC5SwMl49fK2aoWBhd0ZD";
//    String messageText;
//    String idText;
//    String[] arrIdText;
//    String linkText;
//    String writedate;
//    String picture;
//
//    JSONObject obj = null;
//    JSONArray messageArray = null;
//
//    URL url;
//    HttpURLConnection connection = null;
//
//    BufferedReader in = null;
//    String inputLine;
//    StringBuffer response = null;
//
//    /* 페이스북 연동 방식 변경으로 변경 */
//    try {
//
//      accesstoken = URLEncoder.encode(accesstoken, "UTF-8");
//      url = new URL(
//          "https://graph.facebook.com/hanamstory/feed?fields=message,full_picture,from,name,link,created_time&access_token="
//              + accesstoken);
//      logger.warn("\n\tURL : {}", url.toString());
//      connection = (HttpURLConnection) url.openConnection();
//      connection.setRequestMethod("GET");
//      connection.setConnectTimeout(2000);
//      connection.setReadTimeout(2000);
//
//      in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
//      response = new StringBuffer();
//
//
//      while ((inputLine = in.readLine()) != null) {
//        response.append(inputLine);
//      }
//      in.close();
//
//      obj = (JSONObject) JSONValue.parse(response.toString());
//
//      messageArray = (JSONArray) obj.get("data");
//      logger.warn("\n\tMSG ARRAY LENGTH : {}", messageArray.size());
//
//      int cycle = messageArray.size() >= 10 ? 10 : messageArray.size();
//      for (int i = 0; i <= cycle; i++) {
//        JSONObject messageobj = (JSONObject) messageArray.get(i);
//
//        // 메시지 할당
//        messageText = (String) messageobj.get("message");
//        if (!StringUtil.isEmpty(messageText)) {
//          // 유니코드 한글변환
//          messageText = unicodeConvert(messageText);
//          // 메시지에 엔터값 제거
//          messageText = messageText.replace("\n", " ");
//        }
//
//        // 1544594529130110_1610332195889676 이런 형태임
//        // (아이디_포스트번호)
//        idText = (String) messageobj.get("id");
//        // id 값 split 으로 자름
//        arrIdText = idText.split("_");
//        // 링크 주소 할당
//        linkText = "https://www.facebook.com/hanamstory/posts/" + arrIdText[1];
//
//        writedate = messageobj.get("created_time").toString();
//
//        SnsVO tmpSns = new SnsVO();
//
//        if (messageobj.get("full_picture") != null) {
//          picture = messageobj.get("full_picture").toString();
//          tmpSns.setSnsImage(picture);
//        }
//
//        tmpSns.setSnsContents(messageText);
//        tmpSns.setSnsUrl(linkText);
//        tmpSns.setSnsType("F");
//
//
//        String date = writedate;
//        String ym = date.substring(0, 8);
//        String day = date.substring(8, 10);
//        int integerDay = Integer.parseInt(day) + 1;
//        String hour = date.substring(11, 13);
//        int integerHour = Integer.parseInt(hour) + 8;
//        int integerHour2 = integerHour - 24;
//        String min = date.substring(14, 16);
//        String s2 = " : ";
//        String s3 = ":";
//
//        tmpSns.setSnsRdate2(ym + day);
//
//        if (integerHour < 10) {
//          tmpSns.setSnsRdate(ym + day + s2 + "0" + integerHour + s3 + min);
//        } else if (integerHour > 24) {
//
//          if (integerHour2 < 10) {
//            tmpSns.setSnsRdate(ym + integerDay + s2 + "0" + integerHour2 + s3 + min);
//          } else {
//            tmpSns.setSnsRdate(ym + integerDay + s2 + integerHour2 + s3 + min);
//          }
//
//        } else {
//          tmpSns.setSnsRdate(ym + day + s2 + integerHour + s3 + min);
//        }
//
//        list.add(tmpSns);
//      }
//
//    } catch (Exception e) {
//      StringUtil.printException(e);
//      throw new Exception(e);
//    } finally {
//      if( null != in ) try { in.close(); } catch ( Exception e ) {}
//      if( null != connection) try { connection.disconnect(); } catch ( Exception e ) {}
//    }
//
//    return list;
//  }






  /**
   * 20210513
   * 페이스북 API 강제 버전업을 하면서 부천여성청소년재단 프로젝트에서 가져옴.
   *
   * 페이스북 데이터를 가져온다
   *
   * 20210428 API 사용하는데 기본적인 인자값 어디서 가져오는지 설명도 안하는 사람이 어딨음?
   * 변수명이라도 맞춰주던지...
   * @String fbId(facebook userId)
   *   : https://www.facebook.com/profile.php?id=100047429145288 feed id 임
   * @String clientId(앱 ID)
   * @String clientSecret(앱 시크릿 코드)
   *   : https://developers.facebook.com/ -> 내 앱 -> 해당 앱 (없으면 앱 만들기) -> 설정 -> 기본설정
   *   : 앱 ID, 앱 시크릿 코드
   * @String token(엑세스토큰)
   *   : 위 순서에서 앱이 있다면,
   *   : 도구 -> 그래프 API 탐색기 -> 에서 받는 엑세스 토큰임.
   *   : (https://developers.facebook.com/tools/explorer/)
   */
  public FacebookVO getFaceBook(String fbId, String clientId, String clientSecret, String token) throws Exception {

    // 20210715 방식 변경으로 인한 주석처리
    // 새로운 token 생성
    //String tokenNew = "";
//    try {
//      String url =
//          "https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id="
//              + clientId + "&client_secret=" + clientSecret + "&fb_exchange_token=" + token;
//      URL postUrl;
//      postUrl = new URL(url);
//      InputStreamReader isr =
//          new InputStreamReader(postUrl.openConnection().getInputStream(), "UTF-8");
//      //  object 안에 60일 짜리 토큰과 만료 second 값이 담겨 있다
//      JSONObject object = (JSONObject) JSONValue.parseWithException(isr);
//      logger.debug("\n\t>> obj : {}\n", object.toString());
//      logger.debug("\n\t>> access_token : {}\n", object.get("access_token") );
//      if( object.get("access_token") == null ) return null;
//      tokenNew = (String) object.get("access_token");
//    } catch (Exception e) {
//      StringUtil.printException( e );
//    }


    String resultString = HttpRequestUtil
        .requestHttpOnlyGet("https://graph.facebook.com/" + fbId + "?access_token=" + token
            + "&fields=id%2Cname%2Cfeed%7Bmessage%2Cfull_picture%2Ccreated_time%2Cfrom%7D");
    logger.debug("\n\t>> RESULT STRING : \n{}\n\n", resultString);

    GsonBuilder gsonBuilder = new GsonBuilder();
    Gson gson = gsonBuilder.create();

    JsonElement locationJsonList = gson.fromJson(resultString, JsonObject.class).get("feed");
    
    if( locationJsonList == null ) return null;

    FacebookVO faceBook = gson.fromJson(locationJsonList, FacebookVO.class);
    return faceBook;
  }
  
  public FacebookVO getFaceBook( FbApiKey fbKey) throws Exception {
    if( fbKey == null ) {
      logger.error("\n\tgetFaceBook PARAMETER IS NULL!!");
      return null;
    }
    return this.getFaceBook(
        fbKey.getFbId()
      , fbKey.getFbAppId()
      , fbKey.getFbAppScrtCd()
      , fbKey.getFbLngTmToken()
    );
  }
  
  


	/* BLOG 타임라인 가져오기 */

  public static List<SnsVO> getBlogListSize(SnsVO snsVO) throws Exception {

		List<SnsVO> list = new LinkedList<SnsVO>();

		try{

			SAXReader reader = new SAXReader();
			org.dom4j.Document doc = reader.read("http://blog.rss.naver.com/hanam_story.xml");
			Element root = doc.getRootElement();

			int cnt=1;
			String messageText;
			String pubDate;
			String title;

			//root 엘리먼트
			for( Iterator i = root.elementIterator(); i.hasNext();) {
				Element el=(Element)i.next();

				//item 엘리먼트를 돌면서 정보 수집
				for( Iterator j = el.elementIterator("item"); j.hasNext();) {

					Element el2=(Element)j.next();
					if(cnt>10) break;

					messageText = (String) el2.elementText("description"); //메시지 할당
					if (!StringUtil.isEmpty(messageText)) {
						messageText = htmlEntityReplace(messageText); //유니코드 한글변환
		            	messageText = messageText.replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", "").trim(); //불필요한 문자제거
	            	}

	            	title = el2.elementText("title");
	            	pubDate = (String) el2.elementText("pubDate");

	            	SimpleDateFormat original_format = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z", Locale.ENGLISH);
	            	SimpleDateFormat new_format = new SimpleDateFormat("yyyy-MM-dd : HH:mm");
	            	SimpleDateFormat new_format2 = new SimpleDateFormat("yyyy-MM-dd");

	            	Date original_date = original_format.parse(pubDate);
	            	String rdate = new_format.format(original_date);
	            	String rdate2 = new_format2.format(original_date);


	            	SnsVO tmpSns = new SnsVO();

	            	tmpSns.setSnsContents(messageText);
	            	tmpSns.setSnsTitle(title);
	            	tmpSns.setSnsType("B");
	            	tmpSns.setSnsUrl(el2.elementText("link"));
	            	tmpSns.setSnsRdate(rdate);
	            	tmpSns.setSnsRdate2(rdate2);

					list.add(tmpSns);
					cnt++;

				}
			}

		  } catch(Exception e){
				e.printStackTrace();
				StackTraceElement[] elem = e.getStackTrace();
				for ( int i = 0; i < elem.length; i++ ) {
					System.out.println("QuartzSnsBean Blog="+elem[i]);
				}
			}

		return list;
	}


	/* YOUTUBE 타임라인 가져오기 */
	public static List<SnsVO> getYoutubeListSize(SnsVO snsVO) throws Exception {

		List<SnsVO> list = new LinkedList<SnsVO>();

		try{

			SAXReader reader = new SAXReader();
			org.dom4j.Document doc = reader.read("https://www.youtube.com/feeds/videos.xml?channel_id=UCl_3liFibXWU0pIOpC60QHg");
			Element root = doc.getRootElement();

			//root 엘리먼트
			for( Iterator i = root.elementIterator(); i.hasNext();) {
				Element el=(Element)i.next();
				String link = (String) el.elementText("link");
				String vidioId = (String) el.elementText("videoId");
				String contents = (String) el.elementText("title");
				String date = (String) el.elementText("published");
				if (link != null){

				SnsVO tmpSns = new SnsVO();

				tmpSns.setSnsImage("https://i1.ytimg.com/vi/"+vidioId+"/hqdefault.jpg");
				tmpSns.setSnsContents(contents);
				tmpSns.setSnsType("Y");
				tmpSns.setSnsUrl("https://www.youtube.com/watch?v="+vidioId);

				String ym = date.substring(0,8);
				String day = date.substring(8,10);
				int integerDay = Integer.parseInt(day) +1;
				String hour = date.substring(11,13);
				int integerHour = Integer.parseInt(hour) + 8;
				int integerHour2 = integerHour - 24;
				String min = date.substring(14,16);
				String s2 = " : ";
				String s3 = ":";

				tmpSns.setSnsRdate2(ym + day);

				if(integerHour < 10){
				        tmpSns.setSnsRdate(ym + day + s2 + "0" + integerHour + s3 + min);
				} else if (integerHour > 24){
					if(integerHour2 < 10){
						tmpSns.setSnsRdate(ym + integerDay + s2 + "0" + integerHour2 + s3 + min);
					} else {
						tmpSns.setSnsRdate(ym + integerDay + s2 + integerHour2 + s3 + min);
					}
				} else {
					    tmpSns.setSnsRdate(ym + day + s2 + integerHour + s3 + min);
				}
				list.add(tmpSns);
			}
		}

	  } catch(Exception e){
			e.printStackTrace();
			StackTraceElement[] elem = e.getStackTrace();
			for ( int i = 0; i < elem.length; i++ ) {
				System.out.println("QuartzSnsBean Youtube="+elem[i]);
			}
	   }

		return list;
	}

	   // html entity Replace (&#8203; &#8203; &#65279; 이런문자열)
	  public static String htmlEntityReplace(String str) {
		   Matcher mat;

		   // html entity replace 처리
		   Pattern Eentity = Pattern.compile("&[^;]+;");
		   mat = Eentity.matcher(str);
		   str = mat.replaceAll("");

		   return str;
	   }

   /**
    * 유니코드 한글 변환
    *
    * @param str
    * @return
    */
  public static String unicodeConvert(String str) {
    StringBuilder sb = new StringBuilder();
    char ch;
    int len = str.length();
    for (int i = 0; i < len; i++) {
      ch = str.charAt(i);
      if (ch == '\\' && str.charAt(i + 1) == 'u') {
        sb.append((char) Integer.parseInt(str.substring(i + 2, i + 6), 16));
        i += 5;
        continue;
      }
      sb.append(ch);
    }
    return sb.toString();
  }

}


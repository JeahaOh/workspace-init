package kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.web;

import kr.co.hanshinit.NeoCMS.cmm.service.CmmUseService;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.Interceptor;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.cop.mvote.clsdrTarget.service.MvoteClsdrTarget;
import kr.co.hanshinit.NeoCMS.cop.mvote.clsdrTarget.service.MvoteClsdrTargetService;
import kr.co.hanshinit.NeoCMS.cop.mvote.comment.service.MvoteComment;
import kr.co.hanshinit.NeoCMS.cop.mvote.comment.service.MvoteCommentService;
import kr.co.hanshinit.NeoCMS.cop.mvote.login.MvoteLoginUtil;
import kr.co.hanshinit.NeoCMS.cop.mvote.panelGroup.service.PanelGroupService;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.mvoteItm.service.MvoteQestn;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.mvoteItm.service.MvoteQestnarItmService;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.mvoteRspns.service.*;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.service.MvoteQestnar;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.service.MvoteQestnarService;
import kr.co.hanshinit.NeoCMS.cop.mvote.qestnar.service.MvoteQestnarVO;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCode;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCodeService;
import kr.co.hanshinit.NeoCMS.sym.sit.sii.service.SiteInfoService;
import kr.co.hanshinit.NeoCMS.tag.pagination.NeoPaginationInfo;
import org.apache.commons.lang.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.net.URLEncoder;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Controller
public class MvoteQestnarWebController {

    @Resource(name = "mvoteQestnarService")
    private MvoteQestnarService mvoteQestnarService;

    /**
     * cmmUseService
     */
    @Resource(name = "cmmUseService")
    private CmmUseService cmmUseService;
    @Resource(name = "mvoteQestnarItmService")
    private MvoteQestnarItmService mvoteQestnarItmService;
    @Resource(name = "mvoteRspnsService")
    private MvoteRspnsService mvoteRspnsService;

    @Resource(name = "mvoteClsdrTargetService")
    private MvoteClsdrTargetService mvoteClsdrTargetService;

    @Resource(name = "mvoteCommentService")
    private MvoteCommentService mvoteCommentService;

    @Resource(name = "panelGroupService")
    private PanelGroupService panelGroupService;

    /**
     * cmmnDetailCodeService
     */
    @Resource(name = "cmmnDetailCodeService")
    private CmmnDetailCodeService cmmnDetailCodeService;


    private final String LOGINED = "login";

    /**
     * siteInfoService
     */
    @Resource(name = "siteInfoService")
    private SiteInfoService siteInfoService;

    @Interceptor(value = {"templateBinding", "mvoteAuthorBinding"})
    @RequestMapping(value = "/{siteId}/mvoteWebMyList.do")
    public String mvoteWebMyList(@RequestParam("key") int key, HttpServletRequest request,
                                 ModelMap model, @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar) throws Exception {
        //9개씩 가져옴
        mvoteQestnar.setPageUnit(9);
        MvoteQestnarVO mvoteQestnarVO = new MvoteQestnarVO();
        mvoteQestnarVO.setNcnm(MvoteLoginUtil.getLoginNcnm(request.getSession()));

        int totCnt = mvoteQestnarService.selectMvoteQestnarMyListTotCnt(mvoteQestnarVO);
        System.out.println(totCnt);
        NeoPaginationInfo paginationInfo = mvoteQestnarVO.getNeoPaginationInfo(totCnt);
        model.addAttribute("paginationInfo", paginationInfo);
        List<MvoteQestnar> resultList = mvoteQestnarService.selectMvoteQestnarMyList(mvoteQestnarVO);


        model.addAttribute("resultList", resultList);
        model.addAttribute("totCnt", totCnt);

        return "NeoCMS/cop/mvote/qestnar/mvoteQestnarWebMyList";
    }


    @Interceptor("templateBinding")
    @RequestMapping(value = "/{siteId}/mvoteWebList.do")
    public String mvoteWebList(@RequestParam("key") int key, HttpServletRequest request,
                               ModelMap model, @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar) throws Exception {
        mvoteQestnar.setShowAt("Y");
        mvoteQestnar.setDeleteAt("N");
        //공통코드 설문상태  QEST03
        model.addAttribute("codeMapQest3", cmmUseService.selectCmmnDetailCodeMap("QEST03"));
        //9개씩 가져옴
        mvoteQestnar.setPageUnit(9);

        // QESST03 가 아닐경우 대기나 진행중인 리스트만 가져옴
        mvoteQestnar.setSttus("QESST02");
        mvoteQestnar.setMvoteTrgt("WEB");

        int totCnt = mvoteQestnarService.selectMvoteQestnarTotCnt(mvoteQestnar);
        NeoPaginationInfo paginationInfo = mvoteQestnar.getNeoPaginationInfo(totCnt);
        model.addAttribute("paginationInfo", paginationInfo);
        List<MvoteQestnar> resultList = mvoteQestnarService.selectMvoteQestnarList(mvoteQestnar);
        model.addAttribute("resultList", resultList);
        model.addAttribute("totCnt", totCnt);


        return "NeoCMS/cop/mvote/qestnar/mvoteQestnarWebList";
    }


    @SuppressWarnings("unchecked")
    @ResponseBody
    @RequestMapping(value = "/{siteId}/mvoteWebMoreList.do")
    public JSONObject mvoteWebMoreList
            (HttpServletRequest request, ModelMap model,
             @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar) {
        //9개씩 가져옴
        mvoteQestnar.setPageUnit(9);
        System.out.println("들어옴");
        JSONObject rj = new JSONObject();
        JSONArray rs = new JSONArray();
        try {
            mvoteQestnar.setShowAt("Y");
            mvoteQestnar.setDeleteAt("N");
            // QESST03 가 아닐경우 대기나 진행중인 리스트만 가져옴
            mvoteQestnar.setSttus("QESST02");
            mvoteQestnar.setMvoteTrgt("WEB");
            int totCnt = mvoteQestnarService.selectMvoteQestnarTotCnt(mvoteQestnar);
            NeoPaginationInfo paginationInfo = mvoteQestnar.getNeoPaginationInfo(totCnt);
            List<MvoteQestnar> resultList = mvoteQestnarService.selectMvoteQestnarList(mvoteQestnar);
            rj.put("jsonArray", resultList);
            rj.put("codeMapQest3", cmmUseService.selectCmmnDetailCodeMap("QEST03"));


        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            System.out.println("에러" + e);
        }

        return rj;
    }

    //	@Interceptor(value={"templateBinding","mvoteAuthorBinding"})
    @Interceptor(value = {"templateBinding"})
    @RequestMapping(value = "/{siteId}/mvoteWebView.do")
    public String mvoteWebView(@PathVariable("siteId") String siteId, @RequestParam("key") int key,
                               HttpServletRequest request, MvoteQestnar mvoteQestnar, ModelMap model,
                               @ModelAttribute("mvoteRspns") MvoteRspns mvoteRspns
    ) throws Exception {


        model.addAttribute("codeMapQest3", cmmUseService.selectCmmnDetailCodeMap("QEST03"));
        mvoteRspns.setMvoteNo(mvoteQestnar.getMvoteNo());
        MvoteQestnar getVO = mvoteQestnarService.selectMvoteQestnar(mvoteQestnar);


        //특정인일 경우 특정인있는지 여부 체크
        if ("SPCIFY".equals(getVO.getMvoteTrgt())) {
            String TelNo = MvoteLoginUtil.getLoginMoblphon(request.getSession());
            MvoteClsdrTarget mvoteClsdrTarget = new MvoteClsdrTarget();
            mvoteClsdrTarget.setMvoteNo(getVO.getMvoteNo());
            mvoteClsdrTarget.setTargetTelNo(TelNo);
            int check = mvoteClsdrTargetService.selectMvoteClstarTargetCheck(mvoteClsdrTarget);
            //0보다 작으면 없으므로 리턴
            if (check <= 0) {
                return cmmUseService.redirectMsg(model, "해당 설문은 특정인에게만 공개되어 있습니다.", "/vote/index.do");
            }
        }
        //비공개일 경우 비밀번호 입력 여부 체크
        else if ("CLSDR".equals(getVO.getMvoteTrgt())) {
            //request.getSession().setAttribute("mvote"+getVO.getMvoteNo(), "true");
            if (request.getSession().getAttribute("mvote" + getVO.getMvoteNo()) == null) {
                //mvoteQestnarInputPassword.do
                return cmmUseService.redirectMsg(model, "해당 설문은 비밀번호를 입력해야 합니다.", "./mvoteQestnarInputPassword.do?key=" + key + "&mvoteNo=" + getVO.getMvoteNo());
            }

            String check = (String) request.getSession().getAttribute("mvote" + getVO.getMvoteNo());
            if ("true".equals(check)) {
                request.getSession().removeAttribute("mvote" + getVO.getMvoteNo());
            } else {
                return cmmUseService.redirectMsg(model, "해당 설문의 비밀번호가 다릅니다.", "./mvoteQestnarInputPassword.do?key=" + key + "&mvoteNo=" + getVO.getMvoteNo());
            }

        }


        if ("QESST03".equals(getVO.getSttus())) {
            if (getVO.getResultOthbcAt().equals("N")) {
                return cmmUseService.redirectMsg(model, "투표결과가 비공개처리된 설문입니다.", "/vote/index.do");
            }
            return cmmUseService.redirectMsg(model, "투표가 종료되었습니다. 결과페이지로 이동합니다.", "./selectMovteQestnarResult.do?key=" + key + "&mvoteNo=" + getVO.getMvoteNo());
        }

        if (getVO.getDplctPrtcmpnyAt().equals("N")) {
            MvoteRespond mvoteRespond = new MvoteRespond();
            mvoteRespond.setNcnm(MvoteLoginUtil.getLoginNcnm(request.getSession()));
            mvoteRespond.setMvoteNo(getVO.getMvoteNo());

            int duplCnt = mvoteRspnsService.selectDuplMvoteQestnar(mvoteRespond);
            if (duplCnt > 0) {
                return cmmUseService.redirectMsg(model, "이미 참여한 투표입니다.", "/vote/index.do");
            }
        }

        //댓글
        if ("Y".equals(getVO.getAnswerUseAt())) {
            MvoteComment mvoteComment = new MvoteComment();
            mvoteComment.setMvoteNo(getVO.getMvoteNo());

            List<MvoteComment> selectMvoteCommentList = mvoteCommentService.selectMvoteCommentList(mvoteComment);
            model.addAttribute("selectMvoteCommentList", selectMvoteCommentList);
            model.addAttribute("mvoteComment", mvoteComment);
        }
        getVO.setMvoteDc(StringUtil.html2text(getVO.getMvoteDc()));
        model.addAttribute("mvoteQestnar", getVO);

        List<MvoteQestn> resultList = mvoteQestnarItmService.selectMvoteQestnList(mvoteRspns.getMvoteNo());
        for (int i = 0; i < resultList.size(); i++) {
            resultList.get(i).setQestnDc(StringUtil.html2text(resultList.get(i).getQestnDc()));
        }
        model.addAttribute("resultList", resultList);

        // 공통코드 : 타지역
        List<CmmnDetailCode> areaList = cmmnDetailCodeService.selectCmmnDetailCodeLIstByCodeId("AREA");
        model.addAttribute("areaList", areaList);

        // 공통코드 : 관내 상세지역
        List<CmmnDetailCode> dtAreaList = cmmnDetailCodeService.selectCmmnDetailCodeLIstByCodeId("DTAREA");
        model.addAttribute("dtAreaList", dtAreaList);


        return "NeoCMS/cop/mvote/qestnar/mvoteRspnsRegist";
    }

    //	@Interceptor(value={"templateBinding","mvoteAuthorBinding"})
    @Interceptor(value = {"templateBinding"})
    @RequestMapping(value = "/{siteId}/addMvoteRspns.do")
    public String addMvoteRspns(HttpServletRequest request,
                                @PathVariable("siteId") String siteId, @RequestParam("key") int key, ModelMap model, String mvoteSe,
                                @ModelAttribute("mvoteRspns") MvoteRspns mvoteRspns
    ) throws Exception {

        MvoteRespond mvoteRespond = new MvoteRespond();
        mvoteRespond.setMvoteNo(mvoteRspns.getMvoteNo());
        mvoteRespond.setNcnm(MvoteLoginUtil.getLoginNcnm(request.getSession()));

		/*MvoteUserInfoVO mvoteUserInfoVO = new MvoteUserInfoVO();
		mvoteUserInfoVO.setSearchCnd("MVOTE");
		mvoteUserInfoVO.setSearchKrwd(mvoteRespond.getNcnm());
		List<MvoteUserInfo> resultList = panelGroupService.selectUserInfoList(mvoteUserInfoVO);
		if(resultList != null){

		}*/

        String checkResult = checkRspns(mvoteRspns, mvoteRespond);
        if (StringUtils.isBlank(checkResult)) {
            mvoteRspnsService.insertMvoteRspns(request, mvoteRspns, mvoteRespond);
        } else {
            String url = "/" + siteId + "/mvoteWebView.do?key=" + key + "&mvoteNo=" + mvoteRespond.getMvoteNo();
            return cmmUseService.redirectMsg(model, checkResult, url);
        }


        return cmmUseService.redirectMsg(model, "투표가 완료되었습니다", "./mvoteWebList.do?key=" + key + "&mvoteSe=" + mvoteSe);
    }


    /**
     * 설문결과 리스트 화면
     *
     * @param key
     * @param request
     * @param model
     * @param mvoteQestnar
     * @return
     * @throws Exception
     */
    @Interceptor("templateBinding")
    @RequestMapping(value = "/{siteId}/mvoteWebEndList.do")
    public String mvoteWebEndList(
      @RequestParam("key") int key
      , HttpServletRequest request
      , ModelMap model
      , @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar
    ) throws Exception {
      
        mvoteQestnar.setShowAt("Y");
        mvoteQestnar.setDeleteAt("N");
        //공통코드 설문상태  QEST03
        model.addAttribute("codeMapQest3", cmmUseService.selectCmmnDetailCodeMap("QEST03"));
        //9개씩 가져옴
        mvoteQestnar.setPageUnit(9);
        //타겟 일반
        mvoteQestnar.setMvoteTrgt("OTHBC");

        // 종료된 리스트
        mvoteQestnar.setSttus("QESST03");


        int totCnt = mvoteQestnarService.selectMvoteQestnarTotCnt(mvoteQestnar);
        NeoPaginationInfo paginationInfo = mvoteQestnar.getNeoPaginationInfo(totCnt);
        model.addAttribute("paginationInfo", paginationInfo);
        List<MvoteQestnar> resultList = mvoteQestnarService.selectMvoteQestnarList(mvoteQestnar);
        model.addAttribute("resultList", resultList);
        model.addAttribute("totCnt", totCnt);

        return "NeoCMS/cop/mvote/qestnar/mvoteQestnarEndWebList";
    }


    @SuppressWarnings("unchecked")
    @ResponseBody
    @RequestMapping(value = "/{siteId}/mvoteEndWebMoreList.do")
    public JSONObject mvoteEndWebMoreList
            (HttpServletRequest request, ModelMap model,
             @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar) {
        //9개씩 가져옴
        mvoteQestnar.setPageUnit(9);
        JSONObject rj = new JSONObject();
        JSONArray rs = new JSONArray();
        try {
            mvoteQestnar.setShowAt("Y");
            mvoteQestnar.setDeleteAt("N");
            mvoteQestnar.setSttus("QESST03");
            //타겟 일반
            mvoteQestnar.setMvoteTrgt("OTHBC");
            int totCnt = mvoteQestnarService.selectMvoteQestnarTotCnt(mvoteQestnar);
            NeoPaginationInfo paginationInfo = mvoteQestnar.getNeoPaginationInfo(totCnt);
            List<MvoteQestnar> resultList = mvoteQestnarService.selectMvoteQestnarList(mvoteQestnar);
            rj.put("jsonArray", resultList);
            rj.put("codeMapQest3", cmmUseService.selectCmmnDetailCodeMap("QEST03"));

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            System.out.println("에러" + e);
        }

        return rj;
    }

    //
    @SuppressWarnings("unchecked")
    @ResponseBody
    @RequestMapping(value = "/{siteId}/mvoteQestnarConfirmPassword.do")
    public JSONObject mvoteQestnarConfirmPassword
    (
            MvoteQestnar mvoteQestnar, HttpServletRequest request, ModelMap model, String confirmPassword
    ) {
        JSONObject rj = new JSONObject();
        try {
            MvoteQestnar getVO = mvoteQestnarService.selectMvoteQestnar(mvoteQestnar);
            if (confirmPassword == null) {
                rj.put("smsTxt", "비밀번호를 입력하세요");
                rj.put("result", "false");
                return rj;
            }
            if (confirmPassword.equals(getVO.getMvotePassword())) {
                rj.put("smsTxt", "인증되었습니다.");
                rj.put("result", "true");
                request.getSession().setAttribute("mvote" + getVO.getMvoteNo(), "true");
            } else {
                rj.put("smsTxt", "비밀번호가 다릅니다.");
                rj.put("result", "false");
            }


        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        return rj;
    }

    @Interceptor(value = {"templateBinding", "mvoteAuthorBinding"})
    @RequestMapping(value = "/{siteId}/mvoteQestnarInputPassword.do")
    private String mvoteQestnarInputPassword(@PathVariable("siteId") String siteId, @RequestParam("key") int key,
                                             @ModelAttribute("mvoteQestnar") MvoteQestnar mvoteQestnar, ModelMap model) throws Exception {

        return "NeoCMS/cop/mvote/qestnar/mvoteQestnarInputPassword";
    }

    @Interceptor(value = {"templateBinding"})
    @RequestMapping(value = "/{siteId}/selectMovteQestnarResult.do")
    public String selectMovteQestnarResult(@PathVariable("siteId") String siteId,
                                           @RequestParam("key") int key,
                                           HttpServletRequest request,
                                           MvoteQestnar mvoteQestnar, ModelMap model
    ) throws Exception {

        MvoteQestnar getVO = mvoteQestnarService.selectMvoteQestnar(mvoteQestnar);

        //비공개 설정시 공개 안함
        if (getVO.getResultOthbcAt().equals(MvoteQestnar.RESULT_OTHBC_NOT_OPEN)) {
            return cmmUseService.redirectMsg(model, "투표결과가 비공개처리된 설문입니다.", "/vote/index.do");
        }

        //로그인 설정
        if (getVO.getResultOthbcAt().equals(MvoteQestnar.RESULT_OTHBC_USER_OPEN)) {
            if(!MvoteLoginUtil.isMvoteLogined(request.getSession())) {
                return returnLoginUrl(model, request);
            }
        }

        getVO.setMvoteDc(StringUtil.html2text(getVO.getMvoteDc()));

        //설문조사 정보.
        model.addAttribute("mvoteQestnar", getVO);

        //질문리스트
        model.addAttribute("resultList", mvoteQestnarItmService.selectMvoteQestnList(mvoteQestnar.getMvoteNo()));

        //객관식 답변수 Map
        model.addAttribute("answerMap", mvoteRspnsService.selectObjctAnswerCntList(mvoteQestnar.getMvoteNo()));

        //객관식응답 Map
        model.addAttribute("objctMap", mvoteRspnsService.selectObjctRspnsList(mvoteQestnar.getMvoteNo()));

        //주관식응답 Map
        model.addAttribute("sbjctMap", mvoteRspnsService.selectSbjctRspnsList(mvoteQestnar.getMvoteNo()));

        //댓글
        if ("Y".equals(getVO.getAnswerUseAt())) {
            MvoteComment mvoteComment = new MvoteComment();
            mvoteComment.setMvoteNo(getVO.getMvoteNo());
            List<MvoteComment> selectMvoteCommentList = mvoteCommentService.selectMvoteCommentList(mvoteComment);
            model.addAttribute("selectMvoteCommentList", selectMvoteCommentList);
            model.addAttribute("mvoteComment", mvoteComment);
        }

        return "NeoCMS/cop/mvote/qestnar/result/mvoteQestnarResultWebView";
    }

    private String returnLoginUrl(ModelMap model, HttpServletRequest request) throws Exception {
        String referer = request.getRequestURL().toString();
        String queryString = "";

        if (!"".equals(request.getQueryString()) && request.getQueryString() != null) {
            queryString = request.getQueryString().toString();
        }

        if (!"".equals(queryString)) {
            referer = referer + "?" + queryString;
        }
        String returnUrl = "./mvoteLoginView.do?key=4823" + "&rurl=" + URLEncoder.encode(referer, "UTF-8");
        return cmmUseService.redirectMsg(model, "해당 투표결과는 로그인 후 이용이 가능합니다.", returnUrl);
    }


    protected String checkRspns(MvoteRspns mvoteRspns, MvoteRespond mvoteRespond) throws Exception {
        StringBuffer checkResult = new StringBuffer();
        //질문리스트

        List<MvoteQestn> qestnList = mvoteQestnarItmService.selectMvoteQestnList(mvoteRespond.getMvoteNo());

        if (qestnList != null) {
            Map<Integer, MvoteQestn> qestnMap = new LinkedHashMap<Integer, MvoteQestn>(qestnList.size());
            for (MvoteQestn q : qestnList) {
                qestnMap.put(q.getMvoteQestnNo(), q);
            }

            //객관식 응답 체크.
            if (mvoteRspns.getObjctList() != null && mvoteRspns.getObjctList().size() > 0) {
                for (MvoteObjctRspns mobileVoteObjctRspns : mvoteRspns.getObjctList()) {
                    int qestnNo = mobileVoteObjctRspns.getMvoteQestnNo();
                    MvoteQestn q = qestnMap.get(qestnNo);

                    if (q != null) {
                        String multiAnswerAt = q.getMultiAnswerAt();
                        int maxAnswerCo = q.getAnswerCo();
                        int mummAnswerCo = q.getMummAnswerCo();

                        if ("Y".equals(multiAnswerAt)) {
                            if (mummAnswerCo > 1) {
                                if (mobileVoteObjctRspns.getChkAnswerNo() == null) {
                                    checkResult.append("문항제목(" + q.getQestn() + ")의 답변이 등록되지 않았습니다.");
                                } else if (mobileVoteObjctRspns.getChkAnswerNo().length < mummAnswerCo) {
                                    checkResult.append("문항제목(" + q.getQestn() + ")의 최소답변수를 충족하지 못하였습니다.");
                                } else if (mobileVoteObjctRspns.getChkAnswerNo().length > maxAnswerCo) {
                                    checkResult.append("문항제목(" + q.getQestn() + ")의 답변이 가능답변수를 초과하였습니다.");
                                } else {
                                    qestnMap.remove(qestnNo);
                                }
                            } else {
                                qestnMap.remove(qestnNo);
                            }
                        } else if ("N".equals(multiAnswerAt)) {
                            mvoteRespond.getRespondNo();
                            if (mummAnswerCo > 0 && mobileVoteObjctRspns.getMvoteAnswerNo() == 0) {
                                checkResult.append("문항제목(" + q.getQestn() + ")의 답변이 등록되지 않았습니다.");
                            }
                        }
                    }
                }
            }

            //주관식 응답 체크.
            if (mvoteRspns.getSbjctList() != null && mvoteRspns.getSbjctList().size() > 0) {
                for (MvoteSbjctRspns mobileVoteSbjctRspns : mvoteRspns.getSbjctList()) {
                    int qestnNo = mobileVoteSbjctRspns.getMvoteQestnNo();
                    MvoteQestn q = qestnMap.get(qestnNo);

                    if (q != null) {
                        int mummAnswerCo = q.getMummAnswerCo();
                        boolean emptyRspns = StringUtils.isBlank(StringUtils.trim(mobileVoteSbjctRspns.getSbjctRspns()));
                        if (mummAnswerCo > 0 && emptyRspns) {
                            checkResult.append("문항제목(" + q.getQestn() + ")의 답변이 등록되지 않았습니다.");
                        } else {
                            qestnMap.remove(qestnNo);
                        }
                    }
                }
            }

			/*for(Integer qestnNo : qestnMap.keySet()) {
				MobileVoteQestn q = qestnMap.get(qestnNo);
				int mummAnswerCo = q.getMummAnswerCo();
				if(mummAnswerCo > 0) {
					checkResult.append("문항번호(" + q.getMobileVoteQestnNo() + ")의 답변이 등록되지 않았습니다.(N)\n");
				}
			}*/
        }

        return checkResult.toString();
    }


}
